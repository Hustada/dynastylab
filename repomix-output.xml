This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
docs/
  CFB25_DeepDynasty_Spec.md
public/
  vite.svg
src/
  assets/
    react.svg
  components/
    AISettings.tsx
    CoachRoom.tsx
    DepthChart.tsx
    FanForum.tsx
    Footer.tsx
    GameForm.tsx
    GameList.tsx
    Layout.tsx
    NewsHub.tsx
    PlayerForm.tsx
    PlayerManager.tsx
    RecruitForm.tsx
    RecruitTracker.tsx
    Schedule.tsx
    SeasonDashboard.tsx
    TeamForm.tsx
    TeamList.tsx
    ThreadRow.tsx
    Timeline.tsx
  data/
    division1Teams.ts
    dummyData.ts
  services/
    AIService.ts
    OpenAIService.ts
  stores/
    aiSettingsStore.ts
    coachStore.ts
    gameStore.ts
    playerStore.ts
    recruitStore.ts
    seasonStore.ts
    teamStore.ts
  types/
    index.ts
  utils/
    AIContentGenerator.ts
    aiContextDetection.ts
    sampleDataGenerator.ts
    teamTheme.ts
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
.env.example
.gitignore
eslint.config.js
index.html
package.json
postcss.config.js
README.md
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="docs/CFB25_DeepDynasty_Spec.md">
# üß† Claude-Ready Markdown Spec ‚Äì Deep Dynasty Tracking System for CFB25 Companion App

This file defines a step-by-step implementation plan for tracking **deep dynasty stats**, legacy records, and immersive features that simulate a true NCAA Football dynasty experience.

---

## ‚úÖ Goal

Track everything a hardcore dynasty-mode user would expect:
- Season-level stats
- Coaching careers
- Program records
- Prestige arcs
- Rivalries
- Recruiting and player legacy
- Story-driven timelines

---

## üß± Step 1: Data Type Definitions (`src/types/deepStats.ts`)

### Season
```ts
export type Season = {
  year: number;
  team: string;
  record: string; // "10‚Äì3"
  finalRanking?: number;
  conference?: string;
  conferenceStanding?: string;
  bowlGame?: string;
  bowlResult?: string;
  playoffAppearance?: boolean;
  playoffResult?: string;
  heismanFinalists?: string[];
  notableEvents?: string[];
};
```

### Team Season Stats
```ts
export type TeamStats = {
  year: number;
  pointsPerGame: number;
  yardsPerGame: number;
  passYardsPerGame: number;
  rushYardsPerGame: number;
  turnoverMargin: number;
  sacks: number;
  interceptions: number;
  thirdDownPct: number;
  redZonePct: number;
};
```

### Coach Career Stats
```ts
export type Coach = {
  name: string;
  careerRecord: string; // "81‚Äì42"
  seasonsCoached: number;
  championships: number;
  playoffAppearances: number;
  bowlRecord: string;
  coachingStyle: string;
  hotSeat: boolean;
  scandalCount?: number;
  notes?: string;
};
```

### All-Time Program History
```ts
export type TeamHistory = {
  programName: string;
  allTimeRecord: string; // "789‚Äì375‚Äì45"
  championships: number;
  playoffAppearances: number;
  bowlWins: number;
  heismanWinners: string[];
  longestWinStreak: number;
  worstLoss: string;
  bestSeason?: string;
  rivalries: RivalryRecord[];
};
```

### Rivalries
```ts
export type RivalryRecord = {
  opponent: string;
  allTimeSeries: string;
  currentStreak: string;
  notableGames: string[];
};
```

### Prestige Tracker
```ts
export type ProgramPrestige = {
  year: number;
  prestigeScore: number; // 1‚Äì100
  changeReason?: string;
};
```

---

## üß™ Step 2: UI Modules

### `LegacyDashboard.tsx`
- Overview of:
  - Total games coached
  - All-time record
  - Rivalry streaks
  - Win/loss trends

### `ProgramHistory.tsx`
- Render yearly performance
- Conference titles, bowl wins
- Link to Heisman, recruiting class highlights

### `CoachRoom.tsx` (Extend)
- Career summary + stat blocks
- Hot seat history
- Scandal count, job offers, coaching tree

### `RivalryCenter.tsx`
- Show all tracked rivalries
- Streaks, drama, AI-generated ‚ÄúTop 5 Rivalry Games‚Äù

---

## üéôÔ∏è Step 3: Commentary Prompts for Deep Story

### Dynasty Recap
```
Write a 10-year dynasty recap for Nebraska. They won 3 conference titles, lost in a playoff semifinal, and had 2 Heisman finalists. Include ups and downs, coaching changes, and how the team is viewed nationally now.
```

### Coach Legacy
```
Summarize Coach Grimes‚Äôs career after 15 years at Nebraska. He started with a rebuild and finished with a championship. Include record, style, and fictional quotes from former players.
```

### Rivalry Lore Article
```
Write a rivalry feature on Nebraska vs Michigan. Nebraska has won 5 straight. Include references to past blowouts, comebacks, and fan expectations for next year.
```

---

## üíæ Step 4: Persistence & State

- Save each `Season`, `TeamStats`, `Coach`, and `TeamHistory` object in localStorage via Zustand or Context
- Optionally export JSON bundles for backup:
  - `dynasty-seasons.json`
  - `team-history.json`
  - `coach-records.json`

---

## ‚úÖ Final Tips

- Claude can help generate mock data from real stats or summaries
- Use `Timeline.tsx` to link all narrative-worthy events together
- Show charts or decade summaries in `LegacyDashboard`

---

Once this is implemented, you‚Äôll have a system that gives you:
- Story-driven immersion
- ESPN-style commentary
- Historical depth
- Full user control of the dynasty universe
</file>

<file path="public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="src/components/AISettings.tsx">
import React, { useState, useMemo } from 'react';
import { Link } from 'react-router-dom';
import { useAISettingsStore } from '../stores/aiSettingsStore';
import { useTeamStore } from '../stores/teamStore';
import { useGameStore } from '../stores/gameStore';
import { useSeasonStore } from '../stores/seasonStore';

export const AISettings: React.FC = () => {
  const settings = useAISettingsStore(state => state.settings);
  const updateExtendedCoverage = useAISettingsStore(state => state.updateExtendedCoverage);
  const updateSmartFeatures = useAISettingsStore(state => state.updateSmartFeatures);
  const setTeamSpecificSetting = useAISettingsStore(state => state.setTeamSpecificSetting);
  const removeTeamSpecificSetting = useAISettingsStore(state => state.removeTeamSpecificSetting);
  
  const userTeamId = useTeamStore(state => state.userTeamId);
  const teams = useTeamStore(state => state.teams);
  const games = useGameStore(state => state.games);
  const currentSeason = useSeasonStore(state => state.getCurrentSeason());
  
  // Derive values to avoid infinite loops
  const userTeam = useMemo(() => teams.find(t => t.id === userTeamId), [teams, userTeamId]);
  const rivals = useMemo(() => teams.filter(t => t.isRival), [teams]);
  
  const [showTeamOverrides, setShowTeamOverrides] = useState(false);
  const [selectedConference, setSelectedConference] = useState<string>('all');
  
  // Get upcoming opponents
  const upcomingGames = games
    .filter(g => new Date(g.date) > new Date())
    .slice(0, 5);
  const upcomingOpponents = upcomingGames.map(g => g.opponent);
  
  // Get unique conferences
  const conferences = [...new Set(teams.map(t => t.conference))].sort();
  
  // Filter teams by conference
  const filteredTeams = selectedConference === 'all' 
    ? teams 
    : teams.filter(t => t.conference === selectedConference);
    
  const isTeamRanked = currentSeason?.ranking !== undefined;

  return (
    <div className="max-w-4xl mx-auto space-y-6">
      <div className="bg-white rounded-lg border border-secondary-200 p-6">
        <h2 className="text-2xl font-bold text-primary-800 mb-6">AI Content Settings</h2>
        
        {/* Core Content Section */}
        <div className="mb-8">
          <h3 className="text-lg font-semibold text-secondary-800 mb-3">
            My Team Content 
            {userTeam && (
              <span className="ml-2 text-sm font-normal text-[var(--team-primary)]">
                ({userTeam.name})
              </span>
            )}
          </h3>
          <p className="text-sm text-secondary-600 mb-4">
            These features are always enabled for your team to ensure the best experience
          </p>
          <div className="space-y-2">
            <label className="flex items-center space-x-3 text-secondary-700">
              <input type="checkbox" checked disabled className="w-4 h-4 text-primary-600 rounded" />
              <span>Game Recaps & Analysis</span>
            </label>
            <label className="flex items-center space-x-3 text-secondary-700">
              <input type="checkbox" checked disabled className="w-4 h-4 text-primary-600 rounded" />
              <span>Recruiting News & Updates</span>
            </label>
            <label className="flex items-center space-x-3 text-secondary-700">
              <input type="checkbox" checked disabled className="w-4 h-4 text-primary-600 rounded" />
              <span>Season Analysis & Commentary</span>
            </label>
          </div>
        </div>

        {/* Extended Coverage Section */}
        <div className="mb-8">
          <h3 className="text-lg font-semibold text-secondary-800 mb-3">Extended Coverage</h3>
          <p className="text-sm text-secondary-600 mb-4">
            Control what additional content is generated beyond your team
          </p>
          <div className="space-y-3">
            <label className="flex items-center justify-between p-3 bg-secondary-50 rounded-lg hover:bg-secondary-100 transition-colors">
              <div className="flex items-center space-x-3">
                <input 
                  type="checkbox" 
                  checked={settings.extendedCoverage.rivalTeamNews}
                  onChange={(e) => updateExtendedCoverage('rivalTeamNews', e.target.checked)}
                  className="w-4 h-4 text-primary-600 rounded"
                />
                <div>
                  <span className="font-medium text-secondary-800">Rival Team News</span>
                  <p className="text-xs text-secondary-600">Generate content for your rivals ({rivals.length} teams)</p>
                </div>
              </div>
              {rivals.length > 0 && (
                <span className="text-xs text-secondary-500">
                  {rivals.map(r => r.name).join(', ')}
                </span>
              )}
            </label>
            
            <label className="flex items-center justify-between p-3 bg-secondary-50 rounded-lg hover:bg-secondary-100 transition-colors">
              <div className="flex items-center space-x-3">
                <input 
                  type="checkbox" 
                  checked={settings.extendedCoverage.conferenceRoundups}
                  onChange={(e) => updateExtendedCoverage('conferenceRoundups', e.target.checked)}
                  className="w-4 h-4 text-primary-600 rounded"
                />
                <div>
                  <span className="font-medium text-secondary-800">Conference Roundups</span>
                  <p className="text-xs text-secondary-600">Weekly {userTeam?.conference || 'conference'} news and standings</p>
                </div>
              </div>
            </label>
            
            <label className="flex items-center justify-between p-3 bg-secondary-50 rounded-lg hover:bg-secondary-100 transition-colors">
              <div className="flex items-center space-x-3">
                <input 
                  type="checkbox" 
                  checked={settings.extendedCoverage.nationalStorylines}
                  onChange={(e) => updateExtendedCoverage('nationalStorylines', e.target.checked)}
                  className="w-4 h-4 text-primary-600 rounded"
                />
                <div>
                  <span className="font-medium text-secondary-800">National Storylines</span>
                  <p className="text-xs text-secondary-600">Top 25 rankings, playoff race, major upsets</p>
                </div>
              </div>
            </label>
            
            <label className="flex items-center justify-between p-3 bg-secondary-50 rounded-lg hover:bg-secondary-100 transition-colors">
              <div className="flex items-center space-x-3">
                <input 
                  type="checkbox" 
                  checked={settings.extendedCoverage.opponentPreviews}
                  onChange={(e) => updateExtendedCoverage('opponentPreviews', e.target.checked)}
                  className="w-4 h-4 text-primary-600 rounded"
                />
                <div>
                  <span className="font-medium text-secondary-800">Opponent Previews</span>
                  <p className="text-xs text-secondary-600">Scouting reports for upcoming games</p>
                </div>
              </div>
              {upcomingOpponents.length > 0 && (
                <span className="text-xs text-secondary-500">
                  Next: {upcomingOpponents[0]}
                </span>
              )}
            </label>
          </div>
        </div>

        {/* Smart Features Section */}
        <div className="mb-8">
          <h3 className="text-lg font-semibold text-secondary-800 mb-3">Smart Features</h3>
          <p className="text-sm text-secondary-600 mb-4">
            Automatically adjust content based on your season context
          </p>
          <div className="space-y-3">
            <label className="flex items-center justify-between p-3 bg-secondary-50 rounded-lg hover:bg-secondary-100 transition-colors">
              <div className="flex items-center space-x-3">
                <input 
                  type="checkbox" 
                  checked={settings.smartFeatures.autoEnableOpponentContent}
                  onChange={(e) => updateSmartFeatures('autoEnableOpponentContent', e.target.checked)}
                  className="w-4 h-4 text-primary-600 rounded"
                />
                <div>
                  <span className="font-medium text-secondary-800">Auto-Enable Opponent Content</span>
                  <p className="text-xs text-secondary-600">Generate content for teams you're about to play</p>
                </div>
              </div>
            </label>
            
            <label className="flex items-center justify-between p-3 bg-secondary-50 rounded-lg hover:bg-secondary-100 transition-colors">
              <div className="flex items-center space-x-3">
                <input 
                  type="checkbox" 
                  checked={settings.smartFeatures.autoEnableRankingContent}
                  onChange={(e) => updateSmartFeatures('autoEnableRankingContent', e.target.checked)}
                  className="w-4 h-4 text-primary-600 rounded"
                />
                <div>
                  <span className="font-medium text-secondary-800">Ranking-Based Content</span>
                  <p className="text-xs text-secondary-600">
                    More national coverage when ranked
                    {isTeamRanked && <span className="text-[var(--team-primary)]"> (Currently #{currentSeason?.ranking})</span>}
                  </p>
                </div>
              </div>
            </label>
            
            <label className="flex items-center justify-between p-3 bg-secondary-50 rounded-lg hover:bg-secondary-100 transition-colors">
              <div className="flex items-center space-x-3">
                <input 
                  type="checkbox" 
                  checked={settings.smartFeatures.autoEnablePlayoffContent}
                  onChange={(e) => updateSmartFeatures('autoEnablePlayoffContent', e.target.checked)}
                  className="w-4 h-4 text-primary-600 rounded"
                />
                <div>
                  <span className="font-medium text-secondary-800">Playoff Race Coverage</span>
                  <p className="text-xs text-secondary-600">Enhanced coverage during playoff contention</p>
                </div>
              </div>
            </label>
          </div>
        </div>

        {/* Team-Specific Overrides */}
        <div>
          <button
            onClick={() => setShowTeamOverrides(!showTeamOverrides)}
            className="flex items-center justify-between w-full p-3 bg-secondary-100 rounded-lg hover:bg-secondary-200 transition-colors"
          >
            <span className="font-medium text-secondary-800">
              Team-Specific Overrides ({Object.keys(settings.teamSpecificSettings).length})
            </span>
            <span className="text-secondary-600">
              {showTeamOverrides ? '‚àí' : '+'}
            </span>
          </button>
          
          {showTeamOverrides && (
            <div className="mt-4 space-y-4">
              <div className="flex items-center space-x-2 mb-2">
                <label className="text-sm text-secondary-600">Filter by conference:</label>
                <select
                  value={selectedConference}
                  onChange={(e) => setSelectedConference(e.target.value)}
                  className="input input-sm"
                >
                  <option value="all">All Conferences</option>
                  {conferences.map(conf => (
                    <option key={conf} value={conf}>{conf}</option>
                  ))}
                </select>
              </div>
              
              <div className="max-h-64 overflow-y-auto space-y-2">
                {filteredTeams.map(team => {
                  const isUserTeam = team.id === userTeam?.id;
                  const hasOverride = !!settings.teamSpecificSettings[team.id];
                  const isEnabled = hasOverride && settings.teamSpecificSettings[team.id].generateContent;
                  
                  return (
                    <div 
                      key={team.id} 
                      className={`p-2 rounded border ${
                        isUserTeam ? 'border-[var(--team-primary)] bg-[var(--team-primary)]/5' : 
                        hasOverride ? 'border-secondary-300 bg-secondary-50' : 
                        'border-secondary-200'
                      }`}
                    >
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-2">
                          <input
                            type="checkbox"
                            checked={isUserTeam || isEnabled}
                            disabled={isUserTeam}
                            onChange={(e) => {
                              if (e.target.checked) {
                                setTeamSpecificSetting(team.id, true);
                              } else {
                                removeTeamSpecificSetting(team.id);
                              }
                            }}
                            className="w-4 h-4 text-primary-600 rounded"
                          />
                          <span className="text-sm font-medium">{team.name}</span>
                          <span className="text-xs text-secondary-500">{team.conference}</span>
                        </div>
                        {isUserTeam && (
                          <span className="text-xs text-[var(--team-primary)] font-medium">Your Team</span>
                        )}
                        {team.isRival && (
                          <span className="text-xs text-error font-medium">Rival</span>
                        )}
                        {upcomingOpponents.includes(team.name) && (
                          <span className="text-xs text-warning font-medium">Upcoming</span>
                        )}
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Quick Actions */}
      <div className="bg-white rounded-lg border border-secondary-200 p-4">
        <h3 className="text-sm font-semibold text-secondary-700 mb-3">Quick Actions</h3>
        <div className="flex flex-wrap gap-2">
          <button
            onClick={() => {
              rivals.forEach(rival => setTeamSpecificSetting(rival.id, true));
            }}
            className="btn btn-secondary btn-xs"
          >
            Enable All Rivals
          </button>
          <button
            onClick={() => {
              const conferenceTeams = teams.filter(t => t.conference === userTeam?.conference && t.id !== userTeam?.id);
              conferenceTeams.forEach(team => setTeamSpecificSetting(team.id, true));
            }}
            className="btn btn-secondary btn-xs"
          >
            Enable Conference Teams
          </button>
          <button
            onClick={() => {
              Object.keys(settings.teamSpecificSettings).forEach(teamId => {
                if (teamId !== userTeam?.id) {
                  removeTeamSpecificSetting(teamId);
                }
              });
            }}
            className="btn btn-secondary btn-xs"
          >
            Clear All Overrides
          </button>
        </div>
      </div>
    </div>
  );
};
</file>

<file path="src/components/CoachRoom.tsx">
import React, { useState } from 'react';
import { useCoachStore } from '../stores/coachStore';
import { useSeasonStore } from '../stores/seasonStore';
import type { Coach } from '../types/index';

export const CoachRoom: React.FC = () => {
  const { coaches, currentCoachName, addCoach, updateCoach, setCurrentCoach } = useCoachStore();
  const currentCoach = useCoachStore(state => state.getCurrentCoach());
  const currentSeason = useSeasonStore(state => state.getCurrentSeason());
  
  const [isEditing, setIsEditing] = useState(false);
  const [formData, setFormData] = useState<Partial<Coach>>(currentCoach || {
    name: '',
    startYear: currentSeason?.year || 2024,
    record: '0-0',
    style: 'Spread',
    hotSeat: false,
  });

  const coachingStyles = [
    'Spread',
    'Pro Style',
    'Air Raid',
    'Option',
    'Power Run',
    'West Coast',
    'Multiple',
    '3-3-5 Defense',
    '4-2-5 Defense',
    '3-4 Defense',
    '4-3 Defense'
  ];

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    const recordParts = formData.record!.split('-');
    const wins = parseInt(recordParts[0]) || 0;
    const losses = parseInt(recordParts[1]) || 0;
    
    const coachData: Coach = {
      id: formData.name!.toLowerCase().replace(/\s+/g, '-'),
      coachName: formData.name!,
      name: formData.name!,
      startYear: formData.startYear!,
      endYear: formData.endYear,
      record: formData.record!,
      wins,
      losses,
      championships: 0, // Can be updated later
      style: formData.style!,
      hotSeat: formData.hotSeat!,
      reasonLeft: formData.reasonLeft,
    };

    if (currentCoach) {
      updateCoach(currentCoach.name, coachData);
    } else {
      addCoach(coachData);
      setCurrentCoach(coachData.name);
    }
    
    setIsEditing(false);
    setFormData(coachData);
  };

  const calculateWinPercentage = (record: string) => {
    const [wins, losses] = record.split('-').map(Number);
    const total = wins + losses;
    return total > 0 ? ((wins / total) * 100).toFixed(1) : '0.0';
  };

  const getHotSeatStatus = (coach: Coach) => {
    const winPct = parseFloat(calculateWinPercentage(coach.record));
    const yearsCoached = (currentSeason?.year || 2024) - coach.startYear;
    
    if (coach.hotSeat) return { status: 'Hot Seat', color: 'text-red-600' };
    if (winPct >= 70 && yearsCoached >= 2) return { status: 'Secure', color: 'text-green-600' };
    if (winPct >= 50) return { status: 'Stable', color: 'text-primary-600' };
    return { status: 'Pressure Building', color: 'text-amber-600' };
  };

  if (!currentCoach && !isEditing) {
    return (
      <div className="text-center py-12">
        <h2 className="text-2xl font-semibold text-secondary-700 mb-4">
          No Coach Assigned
        </h2>
        <p className="text-secondary-600 mb-4">
          Add your current coach to track their progress
        </p>
        <button 
          onClick={() => setIsEditing(true)}
          className="btn btn-primary btn-md"
        >
          Add Coach
        </button>
      </div>
    );
  }

  if (isEditing) {
    return (
      <div className="max-w-2xl mx-auto">
        <h2 className="text-2xl font-bold text-primary-800 mb-6">
          {currentCoach ? 'Edit Coach' : 'Add New Coach'}
        </h2>
        
        <form onSubmit={handleSubmit} className="bg-white rounded-lg border border-secondary-200 p-6 space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="label">Coach Name *</label>
              <input
                type="text"
                required
                className="input"
                value={formData.name}
                onChange={(e) => setFormData({ ...formData, name: e.target.value })}
              />
            </div>
            
            <div>
              <label className="label">Start Year *</label>
              <input
                type="number"
                required
                min="2020"
                max="2050"
                className="input"
                value={formData.startYear}
                onChange={(e) => setFormData({ ...formData, startYear: parseInt(e.target.value) })}
              />
            </div>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="label">Overall Record *</label>
              <input
                type="text"
                required
                pattern="\d+-\d+"
                placeholder="0-0"
                className="input"
                value={formData.record}
                onChange={(e) => setFormData({ ...formData, record: e.target.value })}
              />
            </div>
            
            <div>
              <label className="label">Coaching Style *</label>
              <select
                required
                className="input"
                value={formData.style}
                onChange={(e) => setFormData({ ...formData, style: e.target.value })}
              >
                {coachingStyles.map(style => (
                  <option key={style} value={style}>{style}</option>
                ))}
              </select>
            </div>
          </div>

          <div className="flex items-center space-x-3">
            <input
              type="checkbox"
              id="hotSeat"
              className="w-4 h-4 text-primary-600 rounded"
              checked={formData.hotSeat || false}
              onChange={(e) => setFormData({ ...formData, hotSeat: e.target.checked })}
            />
            <label htmlFor="hotSeat" className="text-sm font-medium text-secondary-700">
              Currently on the hot seat
            </label>
          </div>

          {formData.endYear !== undefined && (
            <div>
              <label className="label">Reason for Leaving</label>
              <input
                type="text"
                className="input"
                placeholder="Fired, retired, took another job..."
                value={formData.reasonLeft || ''}
                onChange={(e) => setFormData({ ...formData, reasonLeft: e.target.value })}
              />
            </div>
          )}

          <div className="flex justify-end space-x-3 mt-6">
            <button
              type="button"
              onClick={() => {
                setIsEditing(false);
                setFormData(currentCoach || {});
              }}
              className="btn btn-secondary btn-md"
            >
              Cancel
            </button>
            <button
              type="submit"
              className="btn btn-primary btn-md"
            >
              {currentCoach ? 'Update Coach' : 'Add Coach'}
            </button>
          </div>
        </form>
      </div>
    );
  }

  const status = getHotSeatStatus(currentCoach!);
  const yearsCoached = (currentSeason?.year || 2024) - currentCoach!.startYear;

  return (
    <div className="space-y-6">
      {/* Coach Overview Card */}
      <div className="bg-white rounded-lg shadow-sm border border-secondary-200 p-6">
        <div className="flex justify-between items-start mb-6">
          <div>
            <h1 className="text-3xl font-bold text-primary-800">
              {currentCoach!.name}
            </h1>
            <p className="text-secondary-600">
              Head Coach ‚Ä¢ {currentCoach!.style}
            </p>
          </div>
          <button
            onClick={() => setIsEditing(true)}
            className="btn btn-secondary btn-sm"
          >
            Edit
          </button>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div className="bg-secondary-50 rounded-lg p-4">
            <p className="stat-label">Overall Record</p>
            <p className="stat-value">{currentCoach!.record}</p>
            <p className="text-sm text-secondary-600">
              {calculateWinPercentage(currentCoach!.record)}% Win Rate
            </p>
          </div>
          
          <div className="bg-secondary-50 rounded-lg p-4">
            <p className="stat-label">Years Coached</p>
            <p className="stat-value">{yearsCoached}</p>
            <p className="text-sm text-secondary-600">
              Since {currentCoach!.startYear}
            </p>
          </div>
          
          <div className="bg-secondary-50 rounded-lg p-4">
            <p className="stat-label">Job Security</p>
            <p className={`stat-value ${status.color}`}>
              {status.status}
            </p>
          </div>
          
          <div className="bg-secondary-50 rounded-lg p-4">
            <p className="stat-label">Coaching Style</p>
            <p className="text-lg font-semibold text-secondary-800">
              {currentCoach!.style}
            </p>
          </div>
        </div>
      </div>

      {/* Previous Coaches */}
      {coaches.length > 1 && (
        <div className="bg-white rounded-lg shadow-sm border border-secondary-200 p-6">
          <h2 className="text-xl font-semibold text-secondary-800 mb-4">
            Coaching History
          </h2>
          <div className="space-y-3">
            {coaches.filter(c => c.name !== currentCoachName).map((coach) => (
              <div key={coach.name} className="flex items-center justify-between py-3 border-b border-secondary-100 last:border-0">
                <div>
                  <p className="font-medium text-secondary-900">
                    {coach.name}
                  </p>
                  <p className="text-sm text-secondary-600">
                    {coach.startYear}-{coach.endYear || 'Present'} ‚Ä¢ {coach.record} ‚Ä¢ {coach.style}
                  </p>
                  {coach.reasonLeft && (
                    <p className="text-sm text-secondary-500 italic">
                      {coach.reasonLeft}
                    </p>
                  )}
                </div>
                <button
                  onClick={() => setCurrentCoach(coach.name)}
                  className="text-primary-600 hover:text-primary-800 text-sm"
                >
                  Set as Current
                </button>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Hot Seat Meter */}
      {currentCoach!.hotSeat && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-6">
          <h3 className="text-lg font-semibold text-red-800 mb-2">
            üî• Hot Seat Warning
          </h3>
          <p className="text-red-700">
            The administration is closely watching performance. Improvement is needed to secure job status.
          </p>
          <div className="mt-4">
            <p className="text-sm font-medium text-red-800 mb-1">Pressure Level</p>
            <div className="w-full bg-red-200 rounded-full h-3">
              <div 
                className="bg-red-600 h-3 rounded-full"
                style={{ width: '75%' }}
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
};
</file>

<file path="src/components/DepthChart.tsx">
import React, { useState } from 'react';
import { usePlayerStore } from '../stores/playerStore';
import { useTeamStore } from '../stores/teamStore';
import type { Player } from '../types/index';

// Define position groups and their typical depth positions
const positionGroups = {
  'Offense': {
    'Quarterbacks': ['QB1', 'QB2', 'QB3'],
    'Running Backs': ['RB1', 'RB2', 'RB3', 'FB1'],
    'Offensive Line': ['LT1', 'LT2', 'LG1', 'LG2', 'C1', 'C2', 'RG1', 'RG2', 'RT1', 'RT2'],
    'Wide Receivers': ['WR1', 'WR2', 'WR3', 'WR4', 'WR5', 'SLOT1', 'SLOT2'],
    'Tight Ends': ['TE1', 'TE2', 'TE3']
  },
  'Defense': {
    'Defensive Line': ['LE1', 'LE2', 'DT1', 'DT2', 'DT3', 'DT4', 'RE1', 'RE2'],
    'Linebackers': ['LOLB1', 'LOLB2', 'MLB1', 'MLB2', 'ROLB1', 'ROLB2'],
    'Defensive Backs': ['CB1', 'CB2', 'CB3', 'CB4', 'FS1', 'FS2', 'SS1', 'SS2']
  },
  'Special Teams': {
    'Specialists': ['K1', 'K2', 'P1', 'P2', 'LS1', 'KR1', 'KR2', 'PR1', 'PR2']
  }
};

// Map generic positions to depth chart positions
const positionMapping: Record<string, string[]> = {
  'QB': ['QB1', 'QB2', 'QB3'],
  'RB': ['RB1', 'RB2', 'RB3'],
  'FB': ['FB1'],
  'OL': ['LT1', 'LT2', 'LG1', 'LG2', 'C1', 'C2', 'RG1', 'RG2', 'RT1', 'RT2'],
  'WR': ['WR1', 'WR2', 'WR3', 'WR4', 'WR5', 'SLOT1', 'SLOT2'],
  'TE': ['TE1', 'TE2', 'TE3'],
  'DL': ['LE1', 'LE2', 'DT1', 'DT2', 'DT3', 'DT4', 'RE1', 'RE2'],
  'LB': ['LOLB1', 'LOLB2', 'MLB1', 'MLB2', 'ROLB1', 'ROLB2'],
  'DB': ['CB1', 'CB2', 'CB3', 'CB4', 'FS1', 'FS2', 'SS1', 'SS2'],
  'K': ['K1', 'K2'],
  'P': ['P1', 'P2'],
  'LS': ['LS1']
};

export const DepthChart: React.FC = () => {
  const players = usePlayerStore(state => state.players);
  const updatePlayer = usePlayerStore(state => state.updatePlayer);
  const userTeam = useTeamStore(state => state.getUserTeam());
  
  const [editingPosition, setEditingPosition] = useState<string | null>(null);
  const [selectedGroup, setSelectedGroup] = useState<'Offense' | 'Defense' | 'Special Teams'>('Offense');
  
  // Get player by depth position
  const getPlayerByDepthPosition = (depthPosition: string): Player | undefined => {
    return players.find(p => p.depthPosition === depthPosition);
  };
  
  // Get available players for a position
  const getAvailablePlayersForPosition = (basePosition: string): Player[] => {
    // Map depth positions back to base positions
    const basePositionMap: Record<string, string> = {
      'QB1': 'QB', 'QB2': 'QB', 'QB3': 'QB',
      'RB1': 'RB', 'RB2': 'RB', 'RB3': 'RB',
      'FB1': 'FB',
      'LT1': 'OL', 'LT2': 'OL', 'LG1': 'OL', 'LG2': 'OL', 
      'C1': 'OL', 'C2': 'OL', 'RG1': 'OL', 'RG2': 'OL', 
      'RT1': 'OL', 'RT2': 'OL',
      'WR1': 'WR', 'WR2': 'WR', 'WR3': 'WR', 'WR4': 'WR', 
      'WR5': 'WR', 'SLOT1': 'WR', 'SLOT2': 'WR',
      'TE1': 'TE', 'TE2': 'TE', 'TE3': 'TE',
      'LE1': 'DL', 'LE2': 'DL', 'DT1': 'DL', 'DT2': 'DL',
      'DT3': 'DL', 'DT4': 'DL', 'RE1': 'DL', 'RE2': 'DL',
      'LOLB1': 'LB', 'LOLB2': 'LB', 'MLB1': 'LB', 'MLB2': 'LB',
      'ROLB1': 'LB', 'ROLB2': 'LB',
      'CB1': 'DB', 'CB2': 'DB', 'CB3': 'DB', 'CB4': 'DB',
      'FS1': 'DB', 'FS2': 'DB', 'SS1': 'DB', 'SS2': 'DB',
      'K1': 'K', 'K2': 'K', 'P1': 'P', 'P2': 'P', 'LS1': 'LS',
      'KR1': 'RB', 'KR2': 'WR', 'PR1': 'WR', 'PR2': 'RB'
    };
    
    const position = basePositionMap[basePosition] || basePosition;
    return players.filter(p => p.position === position);
  };
  
  // Handle player assignment
  const handlePlayerAssignment = (depthPosition: string, playerId: string) => {
    // Clear the previous player from this position
    const currentPlayer = getPlayerByDepthPosition(depthPosition);
    if (currentPlayer) {
      updatePlayer(currentPlayer.id, { depthPosition: undefined });
    }
    
    // Clear the new player's previous position if they had one
    const newPlayer = players.find(p => p.id === playerId);
    if (newPlayer && newPlayer.depthPosition) {
      // Don't clear, just reassign
    }
    
    // Assign the new player to this position
    if (playerId && playerId !== 'none') {
      updatePlayer(playerId, { depthPosition });
    }
    
    setEditingPosition(null);
  };
  
  const renderPositionSlot = (depthPosition: string, positionLabel: string) => {
    const player = getPlayerByDepthPosition(depthPosition);
    const isEditing = editingPosition === depthPosition;
    const availablePlayers = getAvailablePlayersForPosition(depthPosition);
    
    return (
      <div key={depthPosition} className="border border-secondary-200 rounded-lg p-3 bg-white">
        <div className="flex items-center justify-between mb-2">
          <span className="text-sm font-semibold text-secondary-700">{positionLabel}</span>
          {!isEditing && (
            <button
              onClick={() => setEditingPosition(depthPosition)}
              className="text-xs text-[var(--team-primary)] hover:text-[var(--team-primary)]/80"
            >
              Edit
            </button>
          )}
        </div>
        
        {isEditing ? (
          <div className="space-y-2">
            <select
              className="select select-sm w-full"
              defaultValue={player?.id || 'none'}
              onChange={(e) => handlePlayerAssignment(depthPosition, e.target.value)}
            >
              <option value="none">-- Empty --</option>
              {availablePlayers.map(p => (
                <option key={p.id} value={p.id}>
                  {p.name} ({p.overall || 'N/A'} OVR)
                  {p.depthPosition && p.depthPosition !== depthPosition && ` - Currently ${p.depthPosition}`}
                </option>
              ))}
            </select>
            <button
              onClick={() => setEditingPosition(null)}
              className="btn btn-xs btn-ghost"
            >
              Cancel
            </button>
          </div>
        ) : (
          <div>
            {player ? (
              <div>
                <p className="font-medium text-primary-800">{player.name}</p>
                <p className="text-xs text-secondary-600">
                  #{player.jerseyNumber || '--'} ‚Ä¢ {player.class} ‚Ä¢ {player.overall || 'N/A'} OVR
                </p>
              </div>
            ) : (
              <p className="text-sm text-secondary-400 italic">Empty</p>
            )}
          </div>
        )}
      </div>
    );
  };
  
  return (
    <div className="max-w-7xl mx-auto">
      <div className="bg-gradient-to-r from-[var(--team-primary)] to-[var(--team-secondary)] text-white p-6 rounded-t-lg">
        <h1 className="text-3xl font-bold drop-shadow-md">
          {userTeam ? `${userTeam.name} Depth Chart` : 'Team Depth Chart'}
        </h1>
        <p className="text-white/90 mt-2">
          Organize your roster by position and depth
        </p>
      </div>
      
      {/* Group Selector */}
      <div className="bg-white border-x border-b border-secondary-200 p-4">
        <div className="flex space-x-4">
          {(['Offense', 'Defense', 'Special Teams'] as const).map(group => (
            <button
              key={group}
              onClick={() => setSelectedGroup(group)}
              className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                selectedGroup === group
                  ? 'bg-[var(--team-primary)] text-white'
                  : 'bg-secondary-100 text-secondary-700 hover:bg-secondary-200'
              }`}
            >
              {group}
            </button>
          ))}
        </div>
      </div>
      
      {/* Depth Chart Grid */}
      <div className="bg-secondary-50 border-x border-b border-secondary-200 rounded-b-lg p-6">
        <div className="space-y-8">
          {Object.entries(positionGroups[selectedGroup]).map(([groupName, positions]) => (
            <div key={groupName}>
              <h3 className="text-lg font-bold text-primary-800 mb-4">{groupName}</h3>
              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                {positions.map(pos => {
                  // Create a more readable label
                  const label = pos.replace(/[0-9]/g, '').replace('SLOT', 'Slot');
                  const depth = pos.match(/[0-9]/)?.[0] || '';
                  const displayLabel = depth === '1' ? label : `${label} ${depth}`;
                  
                  return renderPositionSlot(pos, displayLabel);
                })}
              </div>
            </div>
          ))}
        </div>
        
        {/* Quick Stats */}
        <div className="mt-8 p-4 bg-white rounded-lg border border-secondary-200">
          <h3 className="font-semibold text-secondary-700 mb-2">Depth Chart Summary</h3>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
            <div>
              <span className="text-secondary-600">Total Starters:</span>
              <span className="ml-2 font-medium text-primary-800">
                {players.filter(p => p.depthPosition?.includes('1')).length}
              </span>
            </div>
            <div>
              <span className="text-secondary-600">Backups:</span>
              <span className="ml-2 font-medium text-primary-800">
                {players.filter(p => p.depthPosition && !p.depthPosition.includes('1')).length}
              </span>
            </div>
            <div>
              <span className="text-secondary-600">Unassigned:</span>
              <span className="ml-2 font-medium text-primary-800">
                {players.filter(p => !p.depthPosition).length}
              </span>
            </div>
            <div>
              <span className="text-secondary-600">Total Roster:</span>
              <span className="ml-2 font-medium text-primary-800">
                {players.length}
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};
</file>

<file path="src/components/FanForum.tsx">
import React, { useMemo, useState, useEffect } from 'react';
import { useGameStore } from '../stores/gameStore';
import { useRecruitStore } from '../stores/recruitStore';
import { useSeasonStore } from '../stores/seasonStore';
import { useTeamStore } from '../stores/teamStore';
import { useCoachStore } from '../stores/coachStore';
import { usePlayerStore } from '../stores/playerStore';
import { generateForumPosts, getForumName, generateForumUsername, type ForumPost } from '../utils/AIContentGenerator';
import type { Game, Team } from '../types/index';
import { ThreadRow } from './ThreadRow';
import { useAISettingsStore } from '../stores/aiSettingsStore';
import { filterTeamsByAISettings } from '../utils/aiContextDetection';
import { Link } from 'react-router-dom';

interface ForumThread extends ForumPost {
  posts: ForumReply[];
}

interface ForumReply {
  id: string;
  author: string;
  content: string;
  timestamp: string;
  likes: number;
  isUserPost?: boolean;
  parentId?: string;
  replies?: ForumReply[];
  depth?: number;
}

interface ForumStats {
  totalThreads: number;
  totalPosts: number;
  onlineUsers: number;
  registeredUsers: number;
}

export const FanForum: React.FC = () => {
  const games = useGameStore(state => state.games);
  const recruits = useRecruitStore(state => state.recruits);
  const currentSeason = useSeasonStore(state => state.getCurrentSeason());
  const userTeam = useTeamStore(state => state.getUserTeam());
  const coaches = useCoachStore(state => state.coaches);
  const players = usePlayerStore(state => state.players);
  const teams = useTeamStore(state => state.teams);
  const { settings } = useAISettingsStore();
  
  const [selectedThread, setSelectedThread] = useState<ForumThread | null>(null);
  const [userReply, setUserReply] = useState('');
  const [forumThreads, setForumThreads] = useState<ForumThread[]>([]);
  const [sortBy, setSortBy] = useState<'latest' | 'replies' | 'views'>('latest');
  const [currentPage, setCurrentPage] = useState(1);
  const [threadPage, setThreadPage] = useState(1);
  const [replyingTo, setReplyingTo] = useState<ForumReply | null>(null);
  const [nestedReplyContent, setNestedReplyContent] = useState('');
  const [showNewThreadModal, setShowNewThreadModal] = useState(false);
  const [newThreadTitle, setNewThreadTitle] = useState('');
  const [newThreadContent, setNewThreadContent] = useState('');
  const [newThreadCategory, setNewThreadCategory] = useState<ForumPost['category']>('general');
  const postsPerPage = 20;
  const [forumStats, setForumStats] = useState<ForumStats>({
    totalThreads: 0,
    totalPosts: 0,
    onlineUsers: Math.floor(Math.random() * 200) + 50,
    registeredUsers: Math.floor(Math.random() * 5000) + 10000
  });
  
  // Add state for selected forum team
  const [selectedTeam, setSelectedTeam] = useState<Team | null>(null);
  
  // Generate initial forum posts
  const generatedPosts = useMemo(() => {
    if (!currentSeason || !selectedTeam || coaches.length === 0) return [];
    
    // Check if this team should have AI-generated content
    const aiSettings = useAISettingsStore.getState();
    const shouldGenerateContent = aiSettings.shouldGenerateContentForTeam(
      selectedTeam.id,
      userTeam?.id || null,
      selectedTeam.isRival,
      games.some(g => g.opponent === selectedTeam.name && new Date(g.date) > new Date()),
      currentSeason.ranking !== undefined
    );
    
    if (!shouldGenerateContent) {
      return []; // Forum exists but no AI content
    }
    
    const seasonGames = games.filter(g => currentSeason.games.includes(g.id));
    return generateForumPosts(seasonGames, recruits, currentSeason, selectedTeam, coaches[0], players);
  }, [games, recruits, currentSeason, selectedTeam, userTeam, coaches, players]);
  
  // Initialize forum threads with generated posts
  useEffect(() => {
    const threads = generatedPosts.map(post => ({
      ...post,
      posts: generateInitialReplies(post, userTeam!)
    }));
    setForumThreads(threads);
    
    // Update forum stats
    const totalPosts = threads.reduce((sum, t) => sum + t.replies + 1, 0);
    setForumStats(prev => ({
      ...prev,
      totalThreads: threads.length,
      totalPosts
    }));
  }, [generatedPosts, userTeam]);
  
  // Update forum activity when game data changes
  useEffect(() => {
    if (forumThreads.length > 0 && games.length > 0) {
      const latestGame = games[games.length - 1];
      const gameThread = forumThreads.find(t => t.category === 'game-thread');
      
      if (gameThread && !gameThread.posts.some(p => p.content.includes(latestGame.opponent))) {
        // Add new AI responses about the latest game
        const newReplies = generateGameReactions(latestGame, userTeam!);
        setForumThreads(threads => 
          threads.map(t => 
            t.id === gameThread.id 
              ? { ...t, posts: [...t.posts, ...newReplies], replies: t.replies + newReplies.length }
              : t
          )
        );
      }
    }
  }, [games, forumThreads, userTeam]);
  
  // Handle creating a new thread
  const handleCreateThread = () => {
    if (!newThreadTitle.trim() || !newThreadContent.trim() || !userTeam) return;
    
    const newThread: ForumThread = {
      id: `thread-user-${Date.now()}`,
      title: newThreadTitle,
      author: 'You',
      content: newThreadContent,
      replies: 0,
      views: 1,
      lastActivity: 'Just now',
      category: newThreadCategory,
      isPinned: false,
      posts: []
    };
    
    // Add the new thread
    setForumThreads(prev => [newThread, ...prev]);
    
    // Update forum stats
    setForumStats(prev => ({
      ...prev,
      totalThreads: prev.totalThreads + 1,
      totalPosts: prev.totalPosts + 1
    }));
    
    // Clear form and close modal
    setNewThreadTitle('');
    setNewThreadContent('');
    setNewThreadCategory('general');
    setShowNewThreadModal(false);
    
    // Generate AI responses to the new thread after a delay
    setTimeout(() => {
      const responses = generateInitialThreadResponses(newThread, userTeam);
      if (responses.length > 0) {
        setForumThreads(threads => 
          threads.map(t => t.id === newThread.id 
            ? { ...t, posts: responses, replies: responses.length }
            : t
          )
        );
      }
    }, Math.random() * 5000 + 3000); // 3-8 seconds delay
  };
  
  const handlePostReply = (parentReply?: ForumReply) => {
    const content = parentReply ? nestedReplyContent : userReply;
    if (!selectedThread || !content.trim() || !userTeam) return;
    
    const newUserPost: ForumReply = {
      id: `reply-${Date.now()}`,
      author: 'You',
      content: parentReply ? `@${parentReply.author} ${content}` : content,
      timestamp: 'Just now',
      likes: 0,
      isUserPost: true,
      parentId: parentReply?.id,
      depth: (parentReply?.depth || 0) + 1
    };
    
    // Update the thread with user's reply
    let updatedPosts = [...selectedThread.posts];
    
    if (parentReply) {
      // Add nested reply
      updatedPosts = addNestedReply(updatedPosts, parentReply.id, newUserPost);
    } else {
      // Add top-level reply
      updatedPosts.push(newUserPost);
    }
    
    const updatedThread = {
      ...selectedThread,
      posts: updatedPosts,
      replies: selectedThread.replies + 1,
      lastActivity: 'Just now'
    };
    
    setSelectedThread(updatedThread);
    setForumThreads(threads => 
      threads.map(t => t.id === selectedThread.id ? updatedThread : t)
    );
    
    // Generate AI responses based on user's post
    setTimeout(() => {
      const aiResponses = generateAIResponses(content, selectedThread, userTeam, parentReply);
      if (aiResponses.length > 0) {
        let postsWithResponses = [...updatedThread.posts];
        
        aiResponses.forEach(response => {
          if (parentReply) {
            // Add AI responses as nested replies
            postsWithResponses = addNestedReply(postsWithResponses, parentReply.id, response);
          } else {
            // Sometimes AI responds to the user's top-level post
            if (Math.random() > 0.5 && newUserPost) {
              response.parentId = newUserPost.id;
              response.depth = 1;
              response.content = `@You ${response.content}`;
            }
            postsWithResponses.push(response);
          }
        });
        
        const threadWithResponses = {
          ...updatedThread,
          posts: postsWithResponses,
          replies: updatedThread.replies + aiResponses.length,
          lastActivity: 'Just now'
        };
        
        setSelectedThread(threadWithResponses);
        setForumThreads(threads => 
          threads.map(t => t.id === selectedThread.id ? threadWithResponses : t)
        );
      }
    }, Math.random() * 3000 + 2000); // Random delay 2-5 seconds
    
    if (parentReply) {
      setNestedReplyContent('');
      setReplyingTo(null);
    } else {
      setUserReply('');
    }
  };
  
  // Initialize selected team to user team
  useEffect(() => {
    if (userTeam && !selectedTeam) {
      setSelectedTeam(userTeam);
    }
  }, [userTeam, selectedTeam]);
  
  const forumName = selectedTeam ? getForumName(selectedTeam) : 'Fan Forum';
  
  // Helper function to add nested reply
  const addNestedReply = (posts: ForumReply[], parentId: string, newReply: ForumReply): ForumReply[] => {
    return posts.map(post => {
      if (post.id === parentId) {
        return {
          ...post,
          replies: [...(post.replies || []), newReply]
        };
      } else if (post.replies) {
        return {
          ...post,
          replies: addNestedReply(post.replies, parentId, newReply)
        };
      }
      return post;
    });
  };
  
  // Render replies recursively
  const renderReplies = (replies: ForumReply[], allPosts: ForumReply[], depth = 0): JSX.Element[] => {
    return replies.map(post => {
      const nestedReplies = allPosts.filter(p => p.parentId === post.id);
      const isReplying = replyingTo?.id === post.id;
      
      return (
        <div key={post.id}>
          <div 
            className={`border-l-2 ${post.isUserPost ? 'border-[var(--team-primary)]' : 'border-secondary-200'} pl-4 ${depth > 0 ? `ml-${Math.min(depth * 8, 24)}` : ''}`}
            style={depth > 0 ? { marginLeft: `${Math.min(depth * 2, 6)}rem` } : {}}
          >
            <div className="flex items-start justify-between mb-2">
              <div>
                <p className="font-semibold text-[var(--team-primary)]">
                  {post.author}
                  {post.isUserPost && <span className="ml-2 text-xs text-[var(--team-secondary)]">(You)</span>}
                </p>
                <p className="text-xs text-secondary-500">{post.timestamp}</p>
              </div>
              <div className="flex items-center space-x-2">
                <button 
                  onClick={() => setReplyingTo(isReplying ? null : post)}
                  className="text-xs text-secondary-500 hover:text-[var(--team-primary)]"
                >
                  Reply
                </button>
                <button className="text-xs text-secondary-500 hover:text-[var(--team-primary)]">
                  üëç {post.likes > 0 && post.likes}
                </button>
              </div>
            </div>
            <p className="text-secondary-700 mb-2">{post.content}</p>
            
            {/* Inline reply form */}
            {isReplying && (
              <div className="mt-3 mb-3 bg-secondary-50 p-3 rounded">
                <textarea
                  className="input h-16 resize-none mb-2 text-sm"
                  placeholder={`Reply to ${post.author}...`}
                  value={nestedReplyContent}
                  onChange={(e) => setNestedReplyContent(e.target.value)}
                  autoFocus
                />
                <div className="flex space-x-2">
                  <button
                    onClick={() => handlePostReply(post)}
                    disabled={!nestedReplyContent.trim()}
                    className="btn bg-[var(--team-primary)] hover:bg-[var(--team-primary)]/90 text-white btn-xs"
                  >
                    Reply
                  </button>
                  <button
                    onClick={() => {
                      setReplyingTo(null);
                      setNestedReplyContent('');
                    }}
                    className="btn btn-ghost btn-xs"
                  >
                    Cancel
                  </button>
                </div>
              </div>
            )}
          </div>
          
          {/* Render nested replies */}
          {nestedReplies.length > 0 && (
            <div className="mt-2">
              {renderReplies(nestedReplies, allPosts, depth + 1)}
            </div>
          )}
        </div>
      );
    });
  };
  
  // Group teams by conference for easier selection
  const teamsByConference = useMemo(() => {
    const grouped: Record<string, Team[]> = {};
    teams.forEach(team => {
      if (!grouped[team.conference]) {
        grouped[team.conference] = [];
      }
      grouped[team.conference].push(team);
    });
    return grouped;
  }, [teams]);
  
  // Sort threads based on selected option
  const sortedThreads = useMemo(() => {
    const sorted = [...forumThreads];
    switch (sortBy) {
      case 'replies':
        return sorted.sort((a, b) => b.replies - a.replies);
      case 'views':
        return sorted.sort((a, b) => b.views - a.views);
      case 'latest':
      default:
        return sorted; // Already sorted by latest activity
    }
  }, [forumThreads, sortBy]);
  
  return (
    <div className="max-w-7xl mx-auto">
      {/* Team Selector */}
      <div className="bg-white rounded-t-lg border border-secondary-200 p-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <label className="text-sm font-medium text-secondary-700">Select Forum:</label>
            <select
              value={selectedTeam?.id || ''}
              onChange={(e) => {
                const team = teams.find(t => t.id === e.target.value);
                setSelectedTeam(team || null);
                setCurrentPage(1);
                setSelectedThread(null);
              }}
              className="input input-sm w-64"
            >
              <option value="">Choose a team...</option>
              {Object.entries(teamsByConference).map(([conference, confTeams]) => (
                <optgroup key={conference} label={conference}>
                  {confTeams.sort((a, b) => a.name.localeCompare(b.name)).map(team => (
                    <option key={team.id} value={team.id}>
                      {team.name} {team.id === userTeam?.id ? '(Your Team)' : ''}
                    </option>
                  ))}
                </optgroup>
              ))}
            </select>
          </div>
          {selectedTeam && !generatedPosts.length && (
            <span className="text-sm text-secondary-500">
              AI content not enabled for this team. <Link to="/ai-settings" className="text-[var(--team-primary)] hover:underline">Enable in settings</Link>
            </span>
          )}
        </div>
      </div>
      
      {selectedTeam ? (
        <>
          {/* Forum Header */}
          <div className="bg-gradient-to-r from-[var(--team-primary)] to-[var(--team-secondary)] text-white p-6 shadow-lg">
            <h1 className="text-3xl font-bold mb-2 drop-shadow-md">
              {forumName}
            </h1>
            <p className="text-white/90">
              The premier {selectedTeam.mascot} community ‚Ä¢ Est. 1998
            </p>
          </div>
      
      {/* Forum Stats Bar */}
      <div className="bg-white border-x border-b border-secondary-200 p-4">
        <div className="flex justify-between items-center">
          <div className="flex space-x-6 text-sm">
            <span className="text-secondary-600">
              <strong className="text-[var(--team-primary)]">{forumStats.totalThreads.toLocaleString()}</strong> Threads
            </span>
            <span className="text-secondary-600">
              <strong className="text-[var(--team-primary)]">{forumStats.totalPosts.toLocaleString()}</strong> Posts
            </span>
            <span className="text-secondary-600">
              <strong className="text-[var(--team-primary)]">{forumStats.registeredUsers.toLocaleString()}</strong> Members
            </span>
          </div>
          <div className="flex items-center space-x-2">
            <span className="text-sm text-green-600">‚óè {forumStats.onlineUsers} Online</span>
          </div>
        </div>
      </div>
      
      {/* Thread List or Thread View */}
      {!selectedThread ? (
        <div className="bg-white border-x border-b border-secondary-200 rounded-b-lg">
          {/* Action Bar */}
          <div className="border-b border-secondary-200 p-4">
            <div className="flex justify-between items-center">
              <button 
                onClick={() => setShowNewThreadModal(true)}
                className="btn bg-[var(--team-primary)] hover:bg-[var(--team-primary)]/90 text-white btn-sm"
              >
                + New Thread
              </button>
              <div className="flex items-center space-x-4">
                <span className="text-sm text-secondary-600">Sort by:</span>
                <select 
                  value={sortBy}
                  onChange={(e) => setSortBy(e.target.value as any)}
                  className="select select-sm"
                >
                  <option value="latest">Latest Activity</option>
                  <option value="replies">Most Replies</option>
                  <option value="views">Most Views</option>
                </select>
              </div>
            </div>
          </div>
          
          {/* Pinned Threads */}
          {sortedThreads.filter(t => t.isPinned).length > 0 && (
            <div className="border-b border-secondary-200">
              <div className="px-4 py-2 bg-secondary-50">
                <span className="text-xs font-semibold text-secondary-600 uppercase">Pinned</span>
              </div>
              {sortedThreads.filter(t => t.isPinned).map(thread => (
                <ThreadRow key={thread.id} thread={thread} onClick={() => setSelectedThread(thread)} />
              ))}
            </div>
          )}
          
          {/* Regular Threads */}
          <div>
            {sortedThreads.filter(t => !t.isPinned).map(thread => (
              <ThreadRow key={thread.id} thread={thread} onClick={() => setSelectedThread(thread)} />
            ))}
          </div>
          
          {/* Pagination */}
          <div className="p-4 border-t border-secondary-200 flex justify-between items-center">
            <div className="text-sm text-secondary-600">
              Showing 1-{sortedThreads.length} of {sortedThreads.length} threads
            </div>
            <div className="flex space-x-2">
              <button className="btn btn-sm btn-secondary" disabled>Previous</button>
              <button className="btn btn-sm btn-secondary" disabled>Next</button>
            </div>
          </div>
        </div>
      ) : (
        /* Thread Detail View */
        <div className="card p-6">
          <button
            onClick={() => setSelectedThread(null)}
            className="btn btn-ghost btn-sm mb-6"
          >
            ‚Üê Back to Forum
          </button>
          
          {/* Thread Header */}
          <div className="border-b border-secondary-200 pb-4 mb-6">
            <h2 className="text-2xl font-bold text-[var(--team-primary)] mb-2">
              {selectedThread.title}
            </h2>
            <div className="flex items-center text-sm text-secondary-500 space-x-4">
              <span>{selectedThread.replies} replies</span>
              <span>{selectedThread.views} views</span>
            </div>
          </div>
          
          {/* Original Post */}
          <div className="bg-secondary-50 rounded-lg p-4 mb-6">
            <div className="flex items-start justify-between mb-3">
              <div>
                <p className="font-semibold text-[var(--team-primary)]">{selectedThread.author}</p>
                <p className="text-xs text-secondary-500">Original Poster</p>
              </div>
              <span className="text-xs text-secondary-500">{selectedThread.lastActivity}</span>
            </div>
            <p className="text-secondary-700">{selectedThread.content}</p>
          </div>
          
          {/* Pagination Info */}
          <div className="flex justify-between items-center mb-4">
            <p className="text-sm text-secondary-600">
              Showing {((threadPage - 1) * postsPerPage) + 1}-{Math.min(threadPage * postsPerPage, selectedThread.posts.length)} of {selectedThread.posts.length} replies
            </p>
            <div className="flex space-x-2">
              {Array.from({ length: Math.ceil(selectedThread.posts.length / postsPerPage) }, (_, i) => i + 1).map(page => (
                <button
                  key={page}
                  onClick={() => setThreadPage(page)}
                  className={`px-3 py-1 text-sm rounded ${
                    page === threadPage 
                      ? 'bg-[var(--team-primary)] text-white' 
                      : 'bg-secondary-100 text-secondary-700 hover:bg-secondary-200'
                  }`}
                >
                  {page}
                </button>
              ))}
            </div>
          </div>
          
          {/* Replies */}
          <div className="space-y-4 mb-6">
            {renderReplies(selectedThread.posts
              .slice((threadPage - 1) * postsPerPage, threadPage * postsPerPage)
              .filter(post => !post.parentId), // Only show top-level posts
              selectedThread.posts
            )}
          </div>
          
          {/* Reply Form */}
          <div className="border-t border-secondary-200 pt-6">
            <h3 className="font-semibold text-[var(--team-primary)] mb-3">Post a Reply</h3>
            <textarea
              className="input h-24 resize-none mb-3"
              placeholder="Share your thoughts..."
              value={userReply}
              onChange={(e) => setUserReply(e.target.value)}
            />
            <button
              onClick={handlePostReply}
              disabled={!userReply.trim()}
              className="btn btn-primary btn-md"
            >
              Post Reply
            </button>
          </div>
        </div>
      )}
      
      {/* New Thread Modal */}
      {showNewThreadModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-2xl w-full mx-4">
            <h2 className="text-2xl font-bold text-[var(--team-primary)] mb-4">Create New Thread</h2>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-secondary-700 mb-1">
                  Category
                </label>
                <select 
                  value={newThreadCategory}
                  onChange={(e) => setNewThreadCategory(e.target.value as ForumPost['category'])}
                  className="select w-full"
                >
                  <option value="general">General Discussion</option>
                  <option value="game-thread">Game Thread</option>
                  <option value="recruiting">Recruiting</option>
                  <option value="coaching">Coaching</option>
                  <option value="off-topic">Off Topic</option>
                </select>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-secondary-700 mb-1">
                  Thread Title
                </label>
                <input
                  type="text"
                  className="input w-full"
                  placeholder="Enter a descriptive title..."
                  value={newThreadTitle}
                  onChange={(e) => setNewThreadTitle(e.target.value)}
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-secondary-700 mb-1">
                  Post Content
                </label>
                <textarea
                  className="input h-32 resize-none w-full"
                  placeholder="What's on your mind?"
                  value={newThreadContent}
                  onChange={(e) => setNewThreadContent(e.target.value)}
                />
              </div>
            </div>
            
            <div className="flex justify-end space-x-3 mt-6">
              <button
                onClick={() => {
                  setShowNewThreadModal(false);
                  setNewThreadTitle('');
                  setNewThreadContent('');
                  setNewThreadCategory('general');
                }}
                className="btn btn-secondary"
              >
                Cancel
              </button>
              <button
                onClick={handleCreateThread}
                disabled={!newThreadTitle.trim() || !newThreadContent.trim()}
                className="btn bg-[var(--team-primary)] hover:bg-[var(--team-primary)]/90 text-white"
              >
                Create Thread
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  ) : (
    <div className="bg-white rounded-b-lg border-x border-b border-secondary-200 p-12 text-center">
      <p className="text-secondary-600">Select a team above to view their forum</p>
    </div>
  )}
    </div>
  );
};

// Helper functions for generating dynamic content
function generateInitialReplies(thread: ForumPost, team: Team): ForumReply[] {
  const replies: ForumReply[] = [];
  // Generate ALL replies as stated in the thread
  const replyCount = thread.replies;
  
  for (let i = 0; i < replyCount; i++) {
    const daysAgo = Math.floor(i / 10); // Spread replies over time
    const hoursAgo = Math.floor(Math.random() * 24);
    const minutesAgo = Math.floor(Math.random() * 60);
    
    let timestamp: string;
    if (i < 3) { // Most recent replies
      timestamp = `${minutesAgo} minute${minutesAgo !== 1 ? 's' : ''} ago`;
    } else if (i < 10) {
      timestamp = `${hoursAgo} hour${hoursAgo !== 1 ? 's' : ''} ago`;
    } else {
      timestamp = `${daysAgo} day${daysAgo !== 1 ? 's' : ''} ago`;
    }
    
    replies.push({
      id: `reply-${thread.id}-${i}`,
      author: generateForumUsername(team, i + Math.floor(Math.random() * 100)),
      content: generateReplyContent(thread.category, thread.title, i),
      timestamp,
      likes: Math.floor(Math.random() * 50) * (i < 10 ? 1 : 0.5)
    });
  }
  
  return replies;
}

function generateReplyContent(category: string, threadTitle: string, index: number): string {
  const threadLower = threadTitle.toLowerCase();
  
  // Dynamic replies based on thread content
  if (category === 'game-thread') {
    if (threadLower.includes('domination') || threadLower.includes('destroyed')) {
      const blowoutWinReplies = [
        'Complete domination from start to finish!',
        'That\'s how you make a statement!',
        'Other teams better take notice.',
        'Most complete game we\'ve played all year.',
        'This is the team we expected to see!',
        'Playoff committee watching? üëÄ',
        'Keep playing like this and we\'re unstoppable.'
      ];
      return blowoutWinReplies[index % blowoutWinReplies.length];
    } else if (threadLower.includes('cardiac') || threadLower.includes('thrilling')) {
      const closeWinReplies = [
        'My heart is still racing! What a finish!',
        'These close games are aging me 10 years.',
        'Ugly wins count the same as pretty ones!',
        'Champions find ways to win these games.',
        'That\'s what separates good teams from great ones.',
        'I need a drink after that one... wow.',
        'Character win right there. Love this team!'
      ];
      return closeWinReplies[index % closeWinReplies.length];
    } else if (threadLower.includes('embarrassing') || threadLower.includes('pathetic')) {
      const blowoutLossReplies = [
        'Absolutely unacceptable performance.',
        'Someone needs to be held accountable for this.',
        'I\'ve seen enough. Changes need to be made.',
        'This is not the standard we expect.',
        'Worst game I\'ve seen in years.',
        'The other team wanted it more. Plain and simple.',
        'Back to the drawing board. This ain\'t it.'
      ];
      return blowoutLossReplies[index % blowoutLossReplies.length];
    } else if (threadLower.includes('gut-wrenching') || threadLower.includes('so close')) {
      const closeLossReplies = [
        'That one is going to sting for a while.',
        'We had our chances. Just couldn\'t finish.',
        'One or two plays away from winning that game.',
        'Proud of the effort, disappointed in the result.',
        'We\'ll bounce back. This team has heart.',
        'Learning experience for a young team.',
        'Credit to them, they made plays when it mattered.'
      ];
      return closeLossReplies[index % closeLossReplies.length];
    }
  } else if (category === 'recruiting' && threadLower.includes('commits')) {
    const commitReplies = [
      'BOOM! Love this pickup!',
      'Welcome to the family!',
      'This class is getting LOADED!',
      'Recruiting momentum is real!',
      'Trust the process! Great eval by the staff.',
      'Future is bright with kids like this!',
      'Championship recruiting right here!'
    ];
    return commitReplies[index % commitReplies.length];
  } else if (category === 'coaching' && threadLower.includes('hot seat')) {
    const hotSeatReplies = [
      'The clock is ticking...',
      'He\'s had enough time. Results matter.',
      'I\'m willing to give him one more year.',
      'Who would we even hire if we let him go?',
      'The buyout is too expensive right now.',
      'Players have quit on him. It\'s obvious.',
      'Administration needs to make a decision.'
    ];
    return hotSeatReplies[index % hotSeatReplies.length];
  } else if (category === 'general' && threadLower.includes('bowl')) {
    const bowlReplies = [
      'Bowl streak stays alive!',
      'Any bowl game is a good season.',
      'Let\'s aim higher than just a bowl.',
      'Extra practices will help the young guys.',
      'Momentum heading into next season!',
      'Bowl game = successful season in my book.',
      'Now let\'s finish strong!'
    ];
    return bowlReplies[index % bowlReplies.length];
  }
  
  // Default contextual replies
  const defaultReplies: Record<string, string[]> = {
    'game-thread': [
      'What a game! Proud of our guys.',
      'We need to clean up those mistakes.',
      'Defense played their hearts out.',
      'Offensive line was the difference today.',
      'Special teams need work, but we\'ll take the W.',
      'One game at a time. Stay focused.',
      'This team is growing every week.'
    ],
    'recruiting': [
      'In coaches we trust!',
      'Building something special here.',
      'Love the direction of this class.',
      'Competition breeds excellence.',
      'Can\'t wait to see these kids on campus.',
      'Recruiting wins championships.',
      'The future is bright!'
    ],
    'general': [
      'This season has been a rollercoaster.',
      'Proud to be a fan of this team.',
      'We\'re heading in the right direction.',
      'One game at a time, folks.',
      'The best is yet to come!',
      'Through thick and thin, I bleed our colors.',
      'Can\'t wait for next game!'
    ],
    'coaching': [
      'Coaches earned their paychecks today.',
      'Still some questionable play calls.',
      'Development has been impressive.',
      'Staff is doing more with less.',
      'Recruiting is picking up steam.',
      'In-game adjustments were key.',
      'Building a culture takes time.'
    ],
    'off-topic': [
      'Best fanbase in the country!',
      'See you all at the tailgate!',
      'Weather looks perfect for game day.',
      'Anyone selling extra tickets?',
      'Love this community!',
      'Game day can\'t come soon enough!',
      'Go team!'
    ]
  };
  
  const categoryReplies = defaultReplies[category] || defaultReplies['general'];
  return categoryReplies[index % categoryReplies.length];
}

function generateGameReactions(game: Game, team: Team): ForumReply[] {
  const reactions: ForumReply[] = [];
  const won = game.result === 'W';
  const close = Math.abs(game.score.for - game.score.against) <= 7;
  
  reactions.push({
    id: `reaction-${Date.now()}-1`,
    author: generateForumUsername(team, 20),
    content: won 
      ? `What a game! ${game.score.for}-${game.score.against} over ${game.opponent}. ${close ? 'My heart can\'t take these close ones!' : 'Total domination!'}`
      : `Tough loss to ${game.opponent}. ${close ? 'We were so close!' : 'We got outplayed today.'}`,
    timestamp: '10 minutes ago',
    likes: Math.floor(Math.random() * 20) + 5
  });
  
  if (game.stats.turnovers && game.stats.turnovers > 2) {
    reactions.push({
      id: `reaction-${Date.now()}-2`,
      author: generateForumUsername(team, 21),
      content: `${game.stats.turnovers} turnovers! You can't win games like that. Fundamentals!`,
      timestamp: '8 minutes ago',
      likes: Math.floor(Math.random() * 15) + 3
    });
  }
  
  return reactions;
}

function generateAIResponses(userPost: string, thread: ForumThread, team: Team, parentReply?: ForumReply): ForumReply[] {
  const responses: ForumReply[] = [];
  const postLower = userPost.toLowerCase();
  
  // If responding to a nested reply, consider the parent's content too
  const parentContent = parentReply?.content.toLowerCase() || '';
  const isResponseToNegative = parentContent.includes('terrible') || parentContent.includes('fire') || parentContent.includes('pathetic');
  const isResponseToPositive = parentContent.includes('great') || parentContent.includes('domination') || parentContent.includes('special');
  
  // Analyze sentiment and content
  const isPositive = postLower.includes('great') || postLower.includes('awesome') || postLower.includes('love') || postLower.includes('agree');
  const isNegative = postLower.includes('terrible') || postLower.includes('hate') || postLower.includes('fire') || postLower.includes('disagree');
  const isQuestion = postLower.includes('?');
  
  // Generate 0-3 responses based on content and context
  let responseCount = 0;
  if (parentReply) {
    // Higher chance of response to nested comments, especially if disagreeing
    responseCount = (isNegative && isResponseToPositive) || (isPositive && isResponseToNegative) ? 
      Math.floor(Math.random() * 2) + 1 : 
      Math.random() > 0.6 ? 1 : 0;
  } else {
    responseCount = isQuestion ? 2 : Math.random() > 0.5 ? 1 : 0;
  }
  
  for (let i = 0; i < responseCount; i++) {
    const author = generateForumUsername(team, Math.floor(Math.random() * 50) + 30);
    let content = '';
    
    if (parentReply) {
      // Contextual responses for nested replies
      if (isNegative && isResponseToPositive) {
        content = [
          'Whoa, pump the brakes. One game doesn\'t make a season.',
          'I get the negativity, but let\'s see how the rest plays out.',
          'Some people are never happy. We just won!',
          'This is why our fanbase has a bad rep. Always complaining.'
        ][Math.floor(Math.random() * 4)];
      } else if (isPositive && isResponseToNegative) {
        content = [
          'Thank you! Someone with perspective.',
          'Exactly. The doom and gloom is exhausting.',
          'Finally, a voice of reason in this thread.',
          'This. People need to chill out and support the team.'
        ][Math.floor(Math.random() * 4)];
      } else if (postLower.includes('@' + parentReply.author.toLowerCase())) {
        // Direct response to parent author
        content = [
          'I see your point, but respectfully disagree.',
          'That\'s one way to look at it, I suppose.',
          'You make some valid points there.',
          'Interesting perspective. Hadn\'t considered that.'
        ][Math.floor(Math.random() * 4)];
      } else {
        content = [
          'Both of you have good points honestly.',
          'This is getting heated. We\'re all ' + team.mascot + ' fans here!',
          'Can we all just agree that we want the team to succeed?',
          'Good discussion. Love seeing different viewpoints.'
        ][Math.floor(Math.random() * 4)];
      }
    } else {
      // Original response logic for top-level replies
      if (isPositive) {
        content = [
          'Totally agree! This team is special.',
          'Finally someone who gets it! Go ' + team.mascot + '!',
          'Couldn\'t have said it better myself.',
          'This is our year! I can feel it.'
        ][Math.floor(Math.random() * 4)];
      } else if (isNegative) {
        content = [
          'I hear you, but let\'s give it some time.',
          'Disagree. We\'re heading in the right direction.',
          'Every team has ups and downs. Stay positive!',
          'Fair points, but I think you\'re being too harsh.'
        ][Math.floor(Math.random() * 4)];
      } else if (isQuestion) {
        content = [
          'Good question. I think it depends on next week\'s game.',
          'I\'ve been wondering the same thing.',
          'From what I\'ve heard, the coaches are working on it.',
          'Time will tell. Too early to say for sure.'
        ][Math.floor(Math.random() * 4)];
      } else {
        content = [
          'Interesting take. I see where you\'re coming from.',
          'Valid points all around.',
          'This is why I love this forum. Great discussion!',
          'I\'m cautiously optimistic about where we\'re headed.'
        ][Math.floor(Math.random() * 4)];
      }
    }
    
    responses.push({
      id: `ai-response-${Date.now()}-${i}-${Math.random()}`,
      author,
      content,
      timestamp: 'Just now',
      likes: 0,
      parentId: parentReply?.id,
      depth: parentReply ? (parentReply.depth || 0) + 1 : 0
    });
  }
  
  return responses;
}

// Generate initial responses to user-created threads
function generateInitialThreadResponses(thread: ForumThread, team: Team): ForumReply[] {
  const responses: ForumReply[] = [];
  const titleLower = thread.title.toLowerCase();
  const contentLower = thread.content.toLowerCase();
  
  // Determine response count based on thread content
  let responseCount = 0;
  
  // Hot topics get more responses
  if (thread.category === 'coaching' && (titleLower.includes('fire') || titleLower.includes('hot seat'))) {
    responseCount = Math.floor(Math.random() * 5) + 3; // 3-7 responses
  } else if (thread.category === 'recruiting' && (titleLower.includes('commit') || titleLower.includes('5 star'))) {
    responseCount = Math.floor(Math.random() * 4) + 2; // 2-5 responses
  } else if (contentLower.includes('?')) {
    responseCount = Math.floor(Math.random() * 3) + 2; // 2-4 responses for questions
  } else {
    responseCount = Math.floor(Math.random() * 3) + 1; // 1-3 responses for general
  }
  
  // Generate diverse responses
  for (let i = 0; i < responseCount; i++) {
    const delay = i * 10; // Stagger timestamps
    const author = generateForumUsername(team, Math.floor(Math.random() * 100));
    let content = '';
    
    // Generate contextual responses based on category and content
    if (thread.category === 'game-thread') {
      if (contentLower.includes('win') || contentLower.includes('won')) {
        content = [
          'Great win! The team showed real character out there.',
          'This is the kind of performance we need every week!',
          'Loved the energy today. Keep it rolling!',
          `${team.mascot} football is BACK!`
        ][Math.floor(Math.random() * 4)];
      } else if (contentLower.includes('loss') || contentLower.includes('lost')) {
        content = [
          'Tough loss, but we\'ll bounce back.',
          'Can\'t win them all. On to the next one.',
          'Disappointed but not discouraged. Still a lot of season left.',
          'We need to learn from this and move forward.'
        ][Math.floor(Math.random() * 4)];
      } else {
        content = [
          'Interesting take. What did you think of the play calling?',
          'I was at the game. The atmosphere was electric!',
          'Good analysis. The team is definitely improving.',
          'Agreed. This game showed our potential.'
        ][Math.floor(Math.random() * 4)];
      }
    } else if (thread.category === 'recruiting') {
      content = [
        'Trust the process. This staff knows what they\'re doing.',
        'Love the direction of our recruiting!',
        'We need more depth at that position for sure.',
        'Recruiting is the lifeblood of the program. Great topic!',
        `${team.mascot} recruiting has been on fire lately!`
      ][Math.floor(Math.random() * 5)];
    } else if (thread.category === 'coaching') {
      if (titleLower.includes('fire') || contentLower.includes('fire')) {
        content = [
          'Way too early for this talk. Give them time.',
          'I\'m as frustrated as anyone, but firing coaches isn\'t the answer.',
          'Who would we even hire? Be realistic.',
          'The hot seat talk is premature. Let the season play out.'
        ][Math.floor(Math.random() * 4)];
      } else {
        content = [
          'The coaching has definitely improved this season.',
          'I like the adjustments they\'ve been making.',
          'Staff is doing more with less IMO.',
          'Player development has been impressive.'
        ][Math.floor(Math.random() * 4)];
      }
    } else if (thread.category === 'off-topic') {
      content = [
        'Love this community! Go ' + team.mascot + '!',
        'Great topic! Count me in.',
        'This is what makes our fanbase special.',
        'Thanks for starting this thread!',
        'Always down for some ' + team.mascot + ' talk!'
      ][Math.floor(Math.random() * 5)];
    } else { // general
      if (contentLower.includes('?')) {
        content = [
          'Great question! I think it depends on several factors.',
          'I\'ve been wondering the same thing actually.',
          'From what I\'ve heard, the coaches are aware of this.',
          'Good point. Here\'s my take on it...',
          'This has been discussed before, but it\'s worth revisiting.'
        ][Math.floor(Math.random() * 5)];
      } else {
        content = [
          'Totally agree with this. Well said!',
          'Interesting perspective. Thanks for sharing.',
          'This is why I love this forum. Great insights!',
          'You make some excellent points here.',
          'Couldn\'t have said it better myself!'
        ][Math.floor(Math.random() * 5)];
      }
    }
    
    responses.push({
      id: `init-response-${Date.now()}-${i}`,
      author: author,
      content: content,
      timestamp: delay === 0 ? '2 minutes ago' : `${delay + 2} minutes ago`,
      likes: Math.floor(Math.random() * 15)
    });
  }
  
  return responses;
}
</file>

<file path="src/components/Footer.tsx">
import React from 'react';
import { useTeamStore } from '../stores/teamStore';

export const Footer: React.FC = () => {
  const userTeam = useTeamStore(state => state.getUserTeam());
  
  return (
    <footer className={`${userTeam ? 'bg-gradient-to-r from-[var(--team-primary)] to-[var(--team-secondary)]' : 'bg-secondary-800'} text-white mt-auto`}>
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
          {/* About Section */}
          <div>
            <h3 className="text-lg font-semibold mb-4">About Dynasty Tracker</h3>
            <p className="text-sm text-white/80">
              The ultimate companion app for tracking your College Football 25 dynasty mode progress.
            </p>
          </div>
          
          {/* Quick Links */}
          <div>
            <h3 className="text-lg font-semibold mb-4">Quick Links</h3>
            <ul className="space-y-2 text-sm">
              <li><a href="/" className="text-white/80 hover:text-white transition-colors">Dashboard</a></li>
              <li><a href="/schedule" className="text-white/80 hover:text-white transition-colors">Schedule</a></li>
              <li><a href="/recruits" className="text-white/80 hover:text-white transition-colors">Recruiting</a></li>
              <li><a href="/teams" className="text-white/80 hover:text-white transition-colors">Teams</a></li>
            </ul>
          </div>
          
          {/* Community */}
          <div>
            <h3 className="text-lg font-semibold mb-4">Community</h3>
            <ul className="space-y-2 text-sm">
              <li><a href="/news" className="text-white/80 hover:text-white transition-colors">News Hub</a></li>
              <li><a href="/forum" className="text-white/80 hover:text-white transition-colors">Fan Forum</a></li>
              <li><a href="/timeline" className="text-white/80 hover:text-white transition-colors">Dynasty Timeline</a></li>
            </ul>
          </div>
          
          {/* Team Info */}
          <div>
            <h3 className="text-lg font-semibold mb-4">
              {userTeam ? `${userTeam.name} Dynasty` : 'Your Dynasty'}
            </h3>
            <p className="text-sm text-white/80">
              {userTeam ? (
                <>
                  Currently tracking the {userTeam.mascot}<br />
                  Conference: {userTeam.conference}<br />
                  Stadium: {userTeam.stadium}
                </>
              ) : (
                'Select a team to start tracking your dynasty'
              )}
            </p>
          </div>
        </div>
        
        <div className="mt-8 pt-8 border-t border-white/20 text-center">
          <p className="text-sm text-white/60">
            ¬© 2024 CFB Dynasty Tracker. Not affiliated with EA Sports or College Football 25.
          </p>
          <p className="text-xs text-white/40 mt-2">
            Made with ‚ù§Ô∏è for dynasty mode enthusiasts
          </p>
        </div>
      </div>
    </footer>
  );
};
</file>

<file path="src/components/GameForm.tsx">
import React, { useState } from 'react';
import type { Game } from '../types/index';
import { useGameStore } from '../stores/gameStore';
import { useSeasonStore } from '../stores/seasonStore';
import { useTeamStore } from '../stores/teamStore';

interface GameFormProps {
  onClose: () => void;
  editingGame?: Game;
  defaultWeek?: number;
}

export const GameForm: React.FC<GameFormProps> = ({ onClose, editingGame, defaultWeek }) => {
  const addGame = useGameStore(state => state.addGame);
  const updateGame = useGameStore(state => state.updateGame);
  const currentSeason = useSeasonStore(state => state.getCurrentSeason());
  const teams = useTeamStore(state => state.teams);
  
  const [formData, setFormData] = useState<Partial<Game>>(editingGame || {
    date: new Date().toISOString().split('T')[0],
    week: defaultWeek || 1,
    opponent: '',
    location: 'Home',
    result: 'W',
    score: { for: 0, against: 0 },
    conferenceGame: false,
    rivalry: false,
    stats: {},
    opponentStats: {},
    notes: '',
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    const gameData: Game = {
      id: editingGame?.id || `game-${Date.now()}`,
      date: formData.date!,
      week: formData.week!,
      opponent: formData.opponent!,
      location: formData.location!,
      result: formData.result!,
      score: formData.score!,
      conferenceGame: formData.conferenceGame,
      rivalry: formData.rivalry,
      stats: formData.stats || {},
      opponentStats: formData.opponentStats || {},
      notes: formData.notes,
    };

    if (editingGame) {
      updateGame(editingGame.id, gameData);
    } else {
      addGame(gameData);
      // Update season with new game
      if (currentSeason) {
        const seasonStore = useSeasonStore.getState();
        const updatedGames = [...currentSeason.games, gameData.id];
        const wins = gameData.result === 'W' ? 1 : 0;
        const losses = gameData.result === 'L' ? 1 : 0;
        
        seasonStore.updateSeason(currentSeason.id, {
          games: updatedGames,
          overallRecord: {
            wins: currentSeason.overallRecord.wins + wins,
            losses: currentSeason.overallRecord.losses + losses,
          },
          conferenceRecord: gameData.conferenceGame ? {
            wins: currentSeason.conferenceRecord.wins + wins,
            losses: currentSeason.conferenceRecord.losses + losses,
          } : currentSeason.conferenceRecord,
        });
      }
    }
    
    onClose();
  };

  return (
    <div className="modal-overlay">
      <div className="modal-content">
        <h2 className="text-2xl font-bold text-primary-800 mb-6">
          {editingGame ? 'Edit Game' : 'Add New Game'}
        </h2>
        
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="label">Date</label>
              <input
                type="date"
                required
                className="input"
                value={formData.date}
                onChange={(e) => setFormData({ ...formData, date: e.target.value })}
              />
            </div>
            
            <div>
              <label className="label">Week</label>
              <input
                type="number"
                required
                min="1"
                max="16"
                className="input"
                value={formData.week}
                onChange={(e) => setFormData({ ...formData, week: parseInt(e.target.value) })}
              />
            </div>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="label">Opponent</label>
              <select
                required
                className="input"
                value={formData.opponent}
                onChange={(e) => setFormData({ ...formData, opponent: e.target.value })}
              >
                <option value="">Select opponent</option>
                {teams.filter(t => t.id !== 'kansas-state').map(team => (
                  <option key={team.id} value={team.name}>
                    {team.name}
                  </option>
                ))}
              </select>
            </div>
            
            <div>
              <label className="label">Location</label>
              <select
                required
                className="input"
                value={formData.location}
                onChange={(e) => setFormData({ ...formData, location: e.target.value as Game['location'] })}
              >
                <option value="Home">Home</option>
                <option value="Away">Away</option>
                <option value="Neutral">Neutral</option>
              </select>
            </div>
          </div>

          <div className="grid grid-cols-3 gap-4">
            <div>
              <label className="label">Result</label>
              <select
                required
                className="input"
                value={formData.result}
                onChange={(e) => setFormData({ ...formData, result: e.target.value as Game['result'] })}
              >
                <option value="W">Win</option>
                <option value="L">Loss</option>
              </select>
            </div>
            
            <div>
              <label className="label">Our Score</label>
              <input
                type="number"
                required
                min="0"
                className="input"
                value={formData.score?.for || 0}
                onChange={(e) => setFormData({ 
                  ...formData, 
                  score: { ...formData.score!, for: parseInt(e.target.value) }
                })}
              />
            </div>
            
            <div>
              <label className="label">Their Score</label>
              <input
                type="number"
                required
                min="0"
                className="input"
                value={formData.score?.against || 0}
                onChange={(e) => setFormData({ 
                  ...formData, 
                  score: { ...formData.score!, against: parseInt(e.target.value) }
                })}
              />
            </div>
          </div>

          <div className="flex items-center space-x-6">
            <label className="flex items-center space-x-2">
              <input
                type="checkbox"
                className="w-4 h-4 text-primary-600 rounded"
                checked={formData.conferenceGame || false}
                onChange={(e) => setFormData({ ...formData, conferenceGame: e.target.checked })}
              />
              <span className="text-sm font-medium">Conference Game</span>
            </label>
            
            <label className="flex items-center space-x-2">
              <input
                type="checkbox"
                className="w-4 h-4 text-primary-600 rounded"
                checked={formData.rivalry || false}
                onChange={(e) => setFormData({ ...formData, rivalry: e.target.checked })}
              />
              <span className="text-sm font-medium">Rivalry Game</span>
            </label>
          </div>

          <div>
            <h3 className="font-semibold text-secondary-800 mb-2">Our Stats (Optional)</h3>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="label">Passing Yards</label>
                <input
                  type="number"
                  className="input"
                  value={formData.stats?.passingYards || ''}
                  onChange={(e) => setFormData({ 
                    ...formData, 
                    stats: { ...formData.stats, passingYards: parseInt(e.target.value) || undefined }
                  })}
                />
              </div>
              
              <div>
                <label className="label">Passing TDs</label>
                <input
                  type="number"
                  className="input"
                  value={formData.stats?.passingTDs || ''}
                  onChange={(e) => setFormData({ 
                    ...formData, 
                    stats: { ...formData.stats, passingTDs: parseInt(e.target.value) || undefined }
                  })}
                />
              </div>
              
              <div>
                <label className="label">Rushing Yards</label>
                <input
                  type="number"
                  className="input"
                  value={formData.stats?.rushingYards || ''}
                  onChange={(e) => setFormData({ 
                    ...formData, 
                    stats: { ...formData.stats, rushingYards: parseInt(e.target.value) || undefined }
                  })}
                />
              </div>
              
              <div>
                <label className="label">Rushing TDs</label>
                <input
                  type="number"
                  className="input"
                  value={formData.stats?.rushingTDs || ''}
                  onChange={(e) => setFormData({ 
                    ...formData, 
                    stats: { ...formData.stats, rushingTDs: parseInt(e.target.value) || undefined }
                  })}
                />
              </div>
              
              <div>
                <label className="label">Turnovers</label>
                <input
                  type="number"
                  className="input"
                  value={formData.stats?.turnovers || ''}
                  onChange={(e) => setFormData({ 
                    ...formData, 
                    stats: { ...formData.stats, turnovers: parseInt(e.target.value) || undefined }
                  })}
                />
              </div>
              
              <div>
                <label className="label">Interceptions Thrown</label>
                <input
                  type="number"
                  className="input"
                  value={formData.stats?.interceptions || ''}
                  onChange={(e) => setFormData({ 
                    ...formData, 
                    stats: { ...formData.stats, interceptions: parseInt(e.target.value) || undefined }
                  })}
                />
              </div>
            </div>
          </div>

          <div>
            <h3 className="font-semibold text-secondary-800 mb-2">Opponent Stats (Optional)</h3>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="label">Passing Yards</label>
                <input
                  type="number"
                  className="input"
                  value={formData.opponentStats?.passingYards || ''}
                  onChange={(e) => setFormData({ 
                    ...formData, 
                    opponentStats: { ...formData.opponentStats, passingYards: parseInt(e.target.value) || undefined }
                  })}
                />
              </div>
              
              <div>
                <label className="label">Passing TDs</label>
                <input
                  type="number"
                  className="input"
                  value={formData.opponentStats?.passingTDs || ''}
                  onChange={(e) => setFormData({ 
                    ...formData, 
                    opponentStats: { ...formData.opponentStats, passingTDs: parseInt(e.target.value) || undefined }
                  })}
                />
              </div>
              
              <div>
                <label className="label">Rushing Yards</label>
                <input
                  type="number"
                  className="input"
                  value={formData.opponentStats?.rushingYards || ''}
                  onChange={(e) => setFormData({ 
                    ...formData, 
                    opponentStats: { ...formData.opponentStats, rushingYards: parseInt(e.target.value) || undefined }
                  })}
                />
              </div>
              
              <div>
                <label className="label">Rushing TDs</label>
                <input
                  type="number"
                  className="input"
                  value={formData.opponentStats?.rushingTDs || ''}
                  onChange={(e) => setFormData({ 
                    ...formData, 
                    opponentStats: { ...formData.opponentStats, rushingTDs: parseInt(e.target.value) || undefined }
                  })}
                />
              </div>
              
              <div>
                <label className="label">Turnovers</label>
                <input
                  type="number"
                  className="input"
                  value={formData.opponentStats?.turnovers || ''}
                  onChange={(e) => setFormData({ 
                    ...formData, 
                    opponentStats: { ...formData.opponentStats, turnovers: parseInt(e.target.value) || undefined }
                  })}
                />
              </div>
              
              <div>
                <label className="label">Interceptions Thrown</label>
                <input
                  type="number"
                  className="input"
                  value={formData.opponentStats?.interceptions || ''}
                  onChange={(e) => setFormData({ 
                    ...formData, 
                    opponentStats: { ...formData.opponentStats, interceptions: parseInt(e.target.value) || undefined }
                  })}
                />
              </div>
            </div>
          </div>

          <div>
            <label className="label">Notes</label>
            <textarea
              className="input h-24 resize-none"
              placeholder="Game highlights, key plays, injuries, etc."
              value={formData.notes || ''}
              onChange={(e) => setFormData({ ...formData, notes: e.target.value })}
            />
          </div>

          <div className="flex justify-end space-x-3 mt-6">
            <button
              type="button"
              onClick={onClose}
              className="btn btn-secondary btn-md"
            >
              Cancel
            </button>
            <button
              type="submit"
              className="btn btn-primary btn-md"
            >
              {editingGame ? 'Update Game' : 'Add Game'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};
</file>

<file path="src/components/GameList.tsx">
import React, { useState } from 'react';
import { useGameStore } from '../stores/gameStore';
import { useSeasonStore } from '../stores/seasonStore';
import { GameForm } from './GameForm';
import type { Game } from '../types/index';

export const GameList: React.FC = () => {
  const games = useGameStore(state => state.games);
  const currentSeason = useSeasonStore(state => state.getCurrentSeason());
  const [showForm, setShowForm] = useState(false);
  const [editingGame, setEditingGame] = useState<Game | undefined>();

  const seasonGames = currentSeason 
    ? games.filter(game => currentSeason.games.includes(game.id))
    : games;

  const sortedGames = [...seasonGames].sort((a, b) => 
    new Date(b.date).getTime() - new Date(a.date).getTime()
  );

  const handleEdit = (game: Game) => {
    setEditingGame(game);
    setShowForm(true);
  };

  const handleCloseForm = () => {
    setShowForm(false);
    setEditingGame(undefined);
  };

  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold text-primary-800">Games</h2>
        <button 
          onClick={() => setShowForm(true)}
          className="btn btn-primary btn-md"
        >
          Add Game
        </button>
      </div>

      {sortedGames.length === 0 ? (
        <div className="text-center py-12 bg-white rounded-lg border border-secondary-200">
          <p className="text-secondary-600 mb-4">No games recorded yet</p>
          <button 
            onClick={() => setShowForm(true)}
            className="btn btn-primary btn-md"
          >
            Add Your First Game
          </button>
        </div>
      ) : (
        <div className="bg-white rounded-lg border border-secondary-200 overflow-hidden">
          <table className="w-full">
            <thead className="bg-secondary-50 border-b border-secondary-200">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-secondary-700 uppercase tracking-wider">
                  Week
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-secondary-700 uppercase tracking-wider">
                  Date
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-secondary-700 uppercase tracking-wider">
                  Opponent
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-secondary-700 uppercase tracking-wider">
                  Location
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-secondary-700 uppercase tracking-wider">
                  Result
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-secondary-700 uppercase tracking-wider">
                  Score
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-secondary-700 uppercase tracking-wider">
                  Stats
                </th>
                <th className="px-6 py-3 text-right text-xs font-medium text-secondary-700 uppercase tracking-wider">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody className="divide-y divide-secondary-200">
              {sortedGames.map((game) => (
                <tr key={game.id} className="hover:bg-secondary-50">
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-secondary-900">
                    {game.week}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-secondary-600">
                    {new Date(game.date).toLocaleDateString()}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-secondary-900">
                    <div className="flex items-center space-x-2">
                      <span>{game.opponent}</span>
                      {game.rivalry && (
                        <span className="badge badge-error text-xs">Rivalry</span>
                      )}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-secondary-600">
                    {game.location}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                      game.result === 'W' 
                        ? 'bg-green-100 text-green-800' 
                        : 'bg-red-100 text-red-800'
                    }`}>
                      {game.result}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-secondary-900">
                    {game.score.for} - {game.score.against}
                  </td>
                  <td className="px-6 py-4 text-sm text-secondary-600">
                    <div className="flex flex-wrap gap-1">
                      {game.stats.passingYards && (
                        <span className="text-xs">Pass: {game.stats.passingYards}yds</span>
                      )}
                      {game.stats.rushingYards && (
                        <span className="text-xs">Rush: {game.stats.rushingYards}yds</span>
                      )}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <button
                      onClick={() => handleEdit(game)}
                      className="text-primary-600 hover:text-primary-900"
                    >
                      Edit
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {showForm && (
        <GameForm 
          onClose={handleCloseForm}
          editingGame={editingGame}
        />
      )}
    </div>
  );
};
</file>

<file path="src/components/Layout.tsx">
import React from 'react';
import { Link, useLocation } from 'react-router-dom';
import { useTeamStore } from '../stores/teamStore';
import { Footer } from './Footer';

interface LayoutProps {
  children: React.ReactNode;
}

export const Layout: React.FC<LayoutProps> = ({ children }) => {
  const location = useLocation();
  const userTeam = useTeamStore(state => state.getUserTeam());

  const navItems = [
    { path: '/', label: 'Dashboard', icon: 'üìä' },
    { path: '/news', label: 'News', icon: 'üì∞' },
    { path: '/forum', label: 'Forum', icon: 'üí¨' },
    { path: '/schedule', label: 'Schedule', icon: 'üìÖ' },
    { path: '/games', label: 'Games', icon: 'üèà' },
    { path: '/players', label: 'Players', icon: 'üë•' },
    { path: '/coaches', label: 'Coaches', icon: 'üéØ' },
    { path: '/teams', label: 'Teams', icon: 'üèüÔ∏è' },
    { path: '/recruits', label: 'Recruits', icon: '‚≠ê' },
    { path: '/timeline', label: 'Timeline', icon: 'üìñ' },
  ];

  return (
    <div className="min-h-screen bg-secondary-50 flex flex-col">
      {/* Header */}
      <header className={`${userTeam ? 'bg-gradient-to-r from-[var(--team-primary)] to-[var(--team-secondary)]' : 'bg-white'} border-b border-secondary-200 sticky top-0 z-50`}>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center">
              <h1 className={`text-2xl font-bold ${userTeam ? 'text-white drop-shadow-md' : 'text-primary-800'}`}>
                {userTeam ? `${userTeam.name} Dynasty Tracker` : 'CFB Dynasty Tracker'}
              </h1>
            </div>
            <div className="flex items-center space-x-4">
              <span className={`text-sm ${userTeam ? 'text-white/90' : 'text-secondary-600'}`}>Season 2024</span>
              <Link 
                to="/ai-settings" 
                className={`btn btn-sm ${userTeam ? 'bg-white/20 text-white hover:bg-white/30 border-white/30' : 'btn-secondary'} flex items-center space-x-2`}
              >
                <span>ü§ñ</span>
                <span>AI Settings</span>
              </Link>
            </div>
          </div>
        </div>
      </header>

      <div className="flex">
        {/* Sidebar Navigation */}
        <nav className="w-64 bg-white border-r border-secondary-200 min-h-[calc(100vh-4rem)]">
          <div className="p-4">
            <ul className="space-y-2">
              {navItems.map((item) => {
                const isActive = location.pathname === item.path;
                return (
                  <li key={item.path}>
                    <Link
                      to={item.path}
                      className={`flex items-center space-x-3 px-4 py-2 rounded-md transition-colors ${
                        isActive
                          ? userTeam 
                            ? 'bg-[var(--team-primary)]/10 text-[var(--team-primary)] font-medium'
                            : 'bg-primary-100 text-primary-800'
                          : 'text-secondary-600 hover:bg-secondary-100 hover:text-secondary-900'
                      }`}
                    >
                      <span className="text-xl">{item.icon}</span>
                      <span className="font-medium">{item.label}</span>
                    </Link>
                  </li>
                );
              })}
            </ul>
          </div>
        </nav>

        {/* Main Content */}
        <main className="flex-1 p-6">
          <div className="max-w-6xl mx-auto">{children}</div>
        </main>
      </div>
      
      {/* Footer */}
      <Footer />
    </div>
  );
};
</file>

<file path="src/components/NewsHub.tsx">
import React, { useEffect, useState } from 'react';
import { useGameStore } from '../stores/gameStore';
import { useRecruitStore } from '../stores/recruitStore';
import { useSeasonStore } from '../stores/seasonStore';
import { useTeamStore } from '../stores/teamStore';
import { usePlayerStore } from '../stores/playerStore';
import { generateNewsHeadlines, generateNewsTicker, newsWriters, type NewsArticle, type ArticleComment } from '../utils/AIContentGenerator';
import { aiService, fanArchetypes } from '../services/AIService';
import type { Game, Team, Season } from '../types/index';
import { useAISettingsStore } from '../stores/aiSettingsStore';
import { filterTeamsByAISettings } from '../utils/aiContextDetection';

export const NewsHub: React.FC = () => {
  const games = useGameStore(state => state.games);
  const recruits = useRecruitStore(state => state.recruits);
  const currentSeason = useSeasonStore(state => state.getCurrentSeason());
  const userTeam = useTeamStore(state => state.getUserTeam());
  const players = usePlayerStore(state => state.players);
  const teams = useTeamStore(state => state.teams);
  const { settings } = useAISettingsStore();
  
  const [newsArticles, setNewsArticles] = useState<NewsArticle[]>([]);
  const [tickerItems, setTickerItems] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  
  // Generate news articles
  useEffect(() => {
    const loadArticles = async () => {
      if (!currentSeason || !userTeam) {
        setNewsArticles([]);
        return;
      }
      
      setIsLoading(true);
      const seasonGames = games.filter(g => currentSeason.games.includes(g.id));
      
      // Get teams that should have AI content generated
      const aiActiveTeams = filterTeamsByAISettings(teams, userTeam.id, games, currentSeason);
      
      // Filter games to only include those involving AI-active teams
      const relevantGames = seasonGames.filter(game => {
        // Always include user team games
        if (game.opponent === userTeam.name) return true;
        
        // Check if opponent is AI-active
        const opponentTeam = teams.find(t => t.name === game.opponent);
        return opponentTeam && aiActiveTeams.some(t => t.id === opponentTeam.id);
      });
      
      // Filter recruits similarly
      const relevantRecruits = recruits.filter(recruit => {
        // Always include user team recruits
        if (recruit.status === 'Committed' && settings.coreContent.recruitingNews) return true;
        
        // For now, only show user team recruiting
        return false;
      });
      
      try {
        const articles = await generateNewsHeadlines(relevantGames, relevantRecruits, currentSeason, userTeam, players);
        setNewsArticles(articles);
      } catch (error) {
        console.error('Failed to generate articles:', error);
      }
      setIsLoading(false);
    };
    
    loadArticles();
  }, [games, recruits, currentSeason, userTeam, players, teams, settings]);
  
  // Generate ticker items
  useEffect(() => {
    const loadTicker = async () => {
      if (!currentSeason || !userTeam) {
        setTickerItems([]);
        return;
      }
      
      const seasonGames = games.filter(g => currentSeason.games.includes(g.id));
      try {
        const ticker = await generateNewsTicker(seasonGames, recruits, currentSeason, userTeam);
        setTickerItems(ticker);
      } catch (error) {
        console.error('Failed to generate ticker:', error);
      }
    };
    
    loadTicker();
  }, [games, recruits, currentSeason, userTeam]);
  
  const [selectedArticle, setSelectedArticle] = React.useState<NewsArticle | null>(null);
  const [currentTickerIndex, setCurrentTickerIndex] = useState(0);
  const [userComment, setUserComment] = useState('');
  const [articleComments, setArticleComments] = useState<Record<string, ArticleComment[]>>({});
  const [replyingTo, setReplyingTo] = useState<ArticleComment | null>(null);
  const [nestedReplyContent, setNestedReplyContent] = useState('');
  
  // Rotate ticker items
  useEffect(() => {
    if (tickerItems.length === 0) return;
    
    const interval = setInterval(() => {
      setCurrentTickerIndex((prev) => (prev + 1) % tickerItems.length);
    }, 4000);
    
    return () => clearInterval(interval);
  }, [tickerItems]);
  
  // Handle comment posting
  const handlePostComment = async (article: NewsArticle, parentComment?: ArticleComment) => {
    const content = parentComment ? nestedReplyContent : userComment;
    if (!content.trim() || !userTeam) return;
    
    const newUserComment: ArticleComment = {
      id: `comment-${Date.now()}`,
      articleId: article.id,
      author: 'You',
      content: parentComment ? `@${parentComment.author} ${content}` : content,
      timestamp: 'Just now',
      likes: 0,
      isUserComment: true,
      parentId: parentComment?.id,
      depth: (parentComment?.depth || 0) + 1
    };
    
    // Add user comment immediately
    if (parentComment) {
      setArticleComments(prev => ({
        ...prev,
        [article.id]: addNestedComment(prev[article.id] || [], parentComment.id, newUserComment)
      }));
    } else {
      setArticleComments(prev => ({
        ...prev,
        [article.id]: [...(prev[article.id] || []), newUserComment]
      }));
    }
    
    // Clear input
    if (parentComment) {
      setNestedReplyContent('');
      setReplyingTo(null);
    } else {
      setUserComment('');
    }
    
    // Generate AI responses based on article context and user comment
    const seasonGames = games.filter(g => currentSeason?.games.includes(g.id) || false);
    if (currentSeason && seasonGames.length > 0) {
      setTimeout(async () => {
        const responses = await generateArticleCommentResponses(
          content,
          article,
          userTeam,
          seasonGames,
          currentSeason,
          parentComment
        );
        
        if (responses.length > 0) {
          responses.forEach(response => {
            if (parentComment) {
              setArticleComments(prev => ({
                ...prev,
                [article.id]: addNestedComment(prev[article.id] || [], parentComment.id, response)
              }));
            } else {
              // Sometimes have the article author respond
              if (Math.random() > 0.7 && !parentComment) {
                response.author = article.author;
                response.isAuthorComment = true;
                response.content = generateAuthorResponse(content, article, userTeam);
              }
              setArticleComments(prev => ({
                ...prev,
                [article.id]: [...(prev[article.id] || []), response]
              }));
            }
          });
        }
      }, Math.random() * 3000 + 2000); // 2-5 seconds delay
    }
  };
  
  // Generate AI comment responses
  const generateArticleCommentResponses = async (
    userComment: string,
    article: NewsArticle,
    team: Team,
    recentGames: Game[],
    season: Season,
    parentComment?: ArticleComment
  ): Promise<ArticleComment[]> => {
    const responses: ArticleComment[] = [];
    const commentLower = userComment.toLowerCase();
    
    // Determine response likelihood based on article type and comment
    const responseCount = Math.random() > 0.4 ? Math.floor(Math.random() * 2) + 1 : 0;
    
    if (responseCount === 0) return responses;
    
    // Generate appropriate responses based on article context
    const result = await aiService.generateForumResponses(
      userComment,
      { // Create a pseudo-thread from the article
        id: article.id,
        title: article.headline,
        author: article.author,
        content: article.content,
        replies: 0,
        views: 0,
        lastActivity: 'now',
        category: article.type === 'game-recap' ? 'game-thread' : 
                  article.type === 'recruiting' ? 'recruiting' : 'general'
      },
      [],
      team,
      recentGames,
      season
    );
    
    result.responses.slice(0, responseCount).forEach((resp: any) => {
      responses.push({
        id: `comment-${Date.now()}-${Math.random()}`,
        articleId: article.id,
        author: resp.author,
        archetype: resp.archetype,
        content: parentComment ? `@${parentComment.author} ${resp.content}` : resp.content,
        timestamp: 'Just now',
        likes: Math.floor(Math.random() * 10),
        parentId: parentComment?.id,
        depth: parentComment ? (parentComment.depth || 0) + 1 : 0
      });
    });
    
    return responses;
  };
  
  // Helper function to add nested comment
  const addNestedComment = (comments: ArticleComment[], parentId: string, newComment: ArticleComment): ArticleComment[] => {
    return comments.map(comment => {
      if (comment.id === parentId) {
        return {
          ...comment,
          replies: [...(comment.replies || []), newComment]
        };
      } else if (comment.replies) {
        return {
          ...comment,
          replies: addNestedComment(comment.replies, parentId, newComment)
        };
      }
      return comment;
    });
  };
  
  // Generate author response
  const generateAuthorResponse = (userComment: string, article: NewsArticle, team: Team): string => {
    const writer = newsWriters.find(w => w.name === article.author);
    const commentLower = userComment.toLowerCase();
    
    if (writer?.personality === 'enthusiastic' && (commentLower.includes('great') || commentLower.includes('love'))) {
      return `Thanks for reading! Glad you enjoyed the piece. ${team.mascot} nation is the best!`;
    } else if (writer?.personality === 'critical' && commentLower.includes('disagree')) {
      return `I appreciate the feedback, but the numbers don't lie. Time will tell if I'm right.`;
    } else if (writer?.personality === 'analytical' && commentLower.includes('stats')) {
      return `Great observation! The advanced metrics actually support this even more than the basic stats show.`;
    } else if (commentLower.includes('?')) {
      return `Good question! I'll be covering that in more detail in my next piece. Stay tuned!`;
    }
    
    return `Thanks for reading and commenting! Always appreciate hearing from ${team.mascot} fans.`;
  };
  
  // Render comments recursively
  const renderComments = (comments: ArticleComment[], allComments: ArticleComment[], article: NewsArticle, depth = 0): JSX.Element[] => {
    return comments.map(comment => {
      const nestedComments = allComments.filter(c => c.parentId === comment.id);
      const isReplying = replyingTo?.id === comment.id;
      
      return (
        <div key={comment.id}>
          <div 
            className={`border-l-2 ${
              comment.isUserComment ? 'border-[var(--team-primary)]' : 
              comment.isAuthorComment ? 'border-accent-500' : 
              'border-secondary-200'
            } pl-4`}
            style={depth > 0 ? { marginLeft: `${Math.min(depth * 2, 6)}rem` } : {}}
          >
            <div className="flex items-start justify-between mb-2">
              <div>
                <p className="font-semibold text-primary-800">
                  {comment.author}
                  {comment.isUserComment && <span className="ml-2 text-xs text-[var(--team-primary)]">(You)</span>}
                  {comment.isAuthorComment && <span className="ml-2 text-xs text-accent-600 font-bold">Author</span>}
                  {comment.archetype && !comment.isAuthorComment && (
                    <span className="ml-2 text-xs text-secondary-500">
                      ‚Ä¢ {comment.archetype}
                    </span>
                  )}
                </p>
                <p className="text-xs text-secondary-500">{comment.timestamp}</p>
              </div>
              <div className="flex items-center space-x-2">
                <button 
                  onClick={() => setReplyingTo(isReplying ? null : comment)}
                  className="text-xs text-secondary-500 hover:text-[var(--team-primary)]"
                >
                  Reply
                </button>
                <button className="text-xs text-secondary-500 hover:text-[var(--team-primary)]">
                  üëç {comment.likes > 0 && comment.likes}
                </button>
              </div>
            </div>
            <p className="text-secondary-700 mb-2">{comment.content}</p>
            
            {/* Inline reply form */}
            {isReplying && (
              <div className="mt-3 mb-3 bg-secondary-50 p-3 rounded">
                <textarea
                  className="input h-16 resize-none mb-2 text-sm"
                  placeholder={`Reply to ${comment.author}...`}
                  value={nestedReplyContent}
                  onChange={(e) => setNestedReplyContent(e.target.value)}
                  autoFocus
                />
                <div className="flex space-x-2">
                  <button
                    onClick={() => handlePostComment(article, comment)}
                    disabled={!nestedReplyContent.trim()}
                    className="btn bg-[var(--team-primary)] hover:bg-[var(--team-primary)]/90 text-white btn-xs"
                  >
                    Reply
                  </button>
                  <button
                    onClick={() => {
                      setReplyingTo(null);
                      setNestedReplyContent('');
                    }}
                    className="btn btn-ghost btn-xs"
                  >
                    Cancel
                  </button>
                </div>
              </div>
            )}
          </div>
          
          {/* Render nested comments */}
          {nestedComments.length > 0 && (
            <div className="mt-2">
              {renderComments(nestedComments, allComments, article, depth + 1)}
            </div>
          )}
        </div>
      );
    });
  };
  
  if (!userTeam) {
    return (
      <div className="text-center py-12">
        <p className="text-secondary-600">Please select a team to view news</p>
      </div>
    );
  }
  
  return (
    <div className="max-w-6xl mx-auto">
      {/* News Ticker */}
      {tickerItems.length > 0 && (
        <div className="bg-gradient-to-r from-[var(--team-primary)] to-[var(--team-secondary)] text-white p-3 rounded-lg mb-6 overflow-hidden shadow-lg">
          <div className="flex items-center">
            <span className="font-bold mr-4 text-white bg-black/20 px-3 py-1 rounded">BREAKING</span>
            <div className="flex-1 overflow-hidden">
              <p className="whitespace-nowrap animate-pulse">
                {tickerItems[currentTickerIndex]}
              </p>
            </div>
          </div>
        </div>
      )}
      
      {/* Header */}
      <div className="mb-8">
        <h1 className="text-4xl font-bold text-[var(--team-primary)] mb-2">
          {userTeam.name} News Center
        </h1>
        <p className="text-secondary-600">
          Latest news, analysis, and recruiting updates for the {userTeam.mascot}
        </p>
      </div>
      
      {/* Loading State */}
      {isLoading && (
        <div className="text-center py-8">
          <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-[var(--team-primary)]"></div>
          <p className="text-secondary-600 mt-2">Generating news content...</p>
        </div>
      )}
      
      {/* News Grid */}
      {!selectedArticle && !isLoading ? (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {newsArticles.map((article, index) => (
            <div
              key={article.id}
              className={`card p-6 cursor-pointer transition-all border-2 border-transparent hover:border-[var(--team-primary)] hover:shadow-lg ${
                index === 0 ? 'md:col-span-2' : ''
              }`}
              onClick={() => setSelectedArticle(article)}
            >
              {/* Article Image for featured article */}
              {index === 0 && article.imageUrl && (
                <div className="mb-4 -mx-6 -mt-6">
                  <img 
                    src={article.imageUrl} 
                    alt={article.headline}
                    className="w-full h-64 object-cover rounded-t-lg"
                  />
                </div>
              )}
              
              {/* Article Type Badge */}
              <div className="flex items-center justify-between mb-3">
                <span className="badge badge-team-primary">
                  {article.type.split('-').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}
                </span>
                <span className="text-sm text-secondary-500">
                  {new Date(article.date).toLocaleDateString()}
                </span>
              </div>
              
              {/* Headline */}
              <h2 className={`font-bold text-primary-800 mb-2 ${
                index === 0 ? 'text-3xl' : 'text-xl'
              }`}>
                {article.headline}
              </h2>
              
              {/* Subheadline */}
              <p className={`text-secondary-600 ${
                index === 0 ? 'text-lg mb-4' : 'text-sm mb-3'
              }`}>
                {article.subheadline}
              </p>
              
              {/* Preview */}
              {index === 0 && (
                <p className="text-secondary-700 line-clamp-3">
                  {article.content}
                </p>
              )}
              
              {/* Author with Avatar */}
              <div className="flex items-center mt-3">
                <span className="text-lg mr-2">
                  {newsWriters.find(w => w.name === article.author)?.avatar || '‚úçÔ∏è'}
                </span>
                <div>
                  <p className="text-sm font-medium text-secondary-700">
                    {article.author}
                  </p>
                  {article.authorTitle && (
                    <p className="text-xs text-secondary-500">
                      {article.authorTitle}
                    </p>
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>
      ) : selectedArticle ? (
        /* Article Detail View */
        <div className="card p-8 max-w-4xl mx-auto">
          <button
            onClick={() => setSelectedArticle(null)}
            className="btn btn-ghost btn-sm mb-6"
          >
            ‚Üê Back to News
          </button>
          
          <div className="mb-4">
            <span className={`badge ${
              selectedArticle.type === 'game-recap' ? 'badge-primary' :
              selectedArticle.type === 'recruiting' ? 'badge-success' :
              selectedArticle.type === 'analysis' ? 'badge-warning' :
              'badge-secondary'
            }`}>
              {selectedArticle.type.split('-').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}
            </span>
          </div>
          
          <h1 className="text-3xl font-bold text-primary-800 mb-3">
            {selectedArticle.headline}
          </h1>
          
          <p className="text-lg text-secondary-600 mb-4">
            {selectedArticle.subheadline}
          </p>
          
          <div className="flex items-center justify-between mb-8">
            <div className="flex items-center">
              <span className="text-2xl mr-3">
                {newsWriters.find(w => w.name === selectedArticle.author)?.avatar || '‚úçÔ∏è'}
              </span>
              <div>
                <p className="font-medium text-secondary-700">
                  {selectedArticle.author}
                </p>
                <p className="text-sm text-secondary-500">
                  {selectedArticle.authorTitle} ‚Ä¢ {new Date(selectedArticle.date).toLocaleDateString()}
                </p>
              </div>
            </div>
            
            {/* Article Image */}
            {(selectedArticle.imageUrl || selectedArticle.imagePrompt) && (
              <div className="ml-4">
                {selectedArticle.imageUrl ? (
                  <img 
                    src={selectedArticle.imageUrl} 
                    alt={selectedArticle.headline}
                    className="w-20 h-20 rounded-lg object-cover"
                  />
                ) : (
                  <div className="w-20 h-20 bg-secondary-200 rounded-lg flex items-center justify-center">
                    <span className="text-secondary-400 text-xs text-center">
                      [Image: {selectedArticle.type}]
                    </span>
                  </div>
                )}
              </div>
            )}
          </div>
          
          <div className="prose prose-lg max-w-none">
            {selectedArticle.content.split('\n\n').map((paragraph, i) => (
              <p key={i} className="mb-4 text-secondary-700 leading-relaxed">
                {paragraph}
              </p>
            ))}
          </div>
          
          {/* Comments Section */}
          <div className="mt-12 border-t border-secondary-200 pt-8">
            <h3 className="text-xl font-bold text-[var(--team-primary)] mb-6">
              Comments ({articleComments[selectedArticle.id]?.length || 0})
            </h3>
            
            {/* Comment Form */}
            <div className="mb-8">
              <textarea
                className="input h-24 resize-none mb-3"
                placeholder="Share your thoughts on this article..."
                value={userComment}
                onChange={(e) => setUserComment(e.target.value)}
              />
              <button
                onClick={() => handlePostComment(selectedArticle)}
                disabled={!userComment.trim()}
                className="btn bg-[var(--team-primary)] hover:bg-[var(--team-primary)]/90 text-white btn-md"
              >
                Post Comment
              </button>
            </div>
            
            {/* Comments List */}
            <div className="space-y-4">
              {renderComments(
                articleComments[selectedArticle.id]?.filter(c => !c.parentId) || [],
                articleComments[selectedArticle.id] || [],
                selectedArticle
              )}
              
              {(!articleComments[selectedArticle.id] || articleComments[selectedArticle.id].length === 0) && (
                <p className="text-center text-secondary-500 py-8">
                  No comments yet. Be the first to share your thoughts!
                </p>
              )}
            </div>
          </div>
        </div>
      ) : null}
      
      {/* No Articles Message */}
      {newsArticles.length === 0 && !isLoading && (
        <div className="text-center py-12 bg-white rounded-lg border border-secondary-200">
          <p className="text-secondary-600 mb-4">
            No news articles available yet
          </p>
          <p className="text-sm text-secondary-500">
            Play some games and sign recruits to generate news!
          </p>
        </div>
      )}
    </div>
  );
};
</file>

<file path="src/components/PlayerForm.tsx">
import React, { useState } from 'react';
import type { Player } from '../types/index';
import { usePlayerStore } from '../stores/playerStore';

interface PlayerFormProps {
  onClose: () => void;
  editingPlayer?: Player;
}

export const PlayerForm: React.FC<PlayerFormProps> = ({ onClose, editingPlayer }) => {
  const addPlayer = usePlayerStore(state => state.addPlayer);
  const updatePlayer = usePlayerStore(state => state.updatePlayer);
  
  const [formData, setFormData] = useState<Partial<Player>>(editingPlayer || {
    name: '',
    position: 'QB',
    class: 'FR',
    jerseyNumber: undefined,
    hometown: '',
    awards: [],
    storyNotes: '',
  });

  const [newAward, setNewAward] = useState('');

  const positions = ['QB', 'RB', 'WR', 'TE', 'OL', 'DL', 'LB', 'CB', 'S', 'K', 'P'];
  const classes: Player['class'][] = ['FR', 'SO', 'JR', 'SR', 'RS'];

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    const playerData: Player = {
      id: editingPlayer?.id || `player-${Date.now()}`,
      name: formData.name!,
      position: formData.position!,
      class: formData.class!,
      jerseyNumber: formData.jerseyNumber,
      hometown: formData.hometown,
      statsBySeason: editingPlayer?.statsBySeason || {},
      awards: formData.awards,
      storyNotes: formData.storyNotes,
    };

    if (editingPlayer) {
      updatePlayer(editingPlayer.id, playerData);
    } else {
      addPlayer(playerData);
    }
    
    onClose();
  };

  const addAward = () => {
    if (newAward.trim()) {
      setFormData({
        ...formData,
        awards: [...(formData.awards || []), newAward.trim()]
      });
      setNewAward('');
    }
  };

  const removeAward = (index: number) => {
    setFormData({
      ...formData,
      awards: formData.awards?.filter((_, i) => i !== index)
    });
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
        <h2 className="text-2xl font-bold text-primary-800 mb-6">
          {editingPlayer ? 'Edit Player' : 'Add New Player'}
        </h2>
        
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="label">Name *</label>
              <input
                type="text"
                required
                className="input"
                value={formData.name}
                onChange={(e) => setFormData({ ...formData, name: e.target.value })}
              />
            </div>
            
            <div>
              <label className="label">Jersey Number</label>
              <input
                type="number"
                min="0"
                max="99"
                className="input"
                value={formData.jerseyNumber || ''}
                onChange={(e) => setFormData({ ...formData, jerseyNumber: e.target.value ? parseInt(e.target.value) : undefined })}
              />
            </div>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="label">Position *</label>
              <select
                required
                className="input"
                value={formData.position}
                onChange={(e) => setFormData({ ...formData, position: e.target.value })}
              >
                {positions.map(pos => (
                  <option key={pos} value={pos}>{pos}</option>
                ))}
              </select>
            </div>
            
            <div>
              <label className="label">Class *</label>
              <select
                required
                className="input"
                value={formData.class}
                onChange={(e) => setFormData({ ...formData, class: e.target.value as Player['class'] })}
              >
                {classes.map(cls => (
                  <option key={cls} value={cls}>{cls}</option>
                ))}
              </select>
            </div>
          </div>

          <div>
            <label className="label">Hometown</label>
            <input
              type="text"
              className="input"
              placeholder="City, State"
              value={formData.hometown || ''}
              onChange={(e) => setFormData({ ...formData, hometown: e.target.value })}
            />
          </div>

          {/* Awards Section */}
          <div>
            <label className="label">Awards & Honors</label>
            <div className="flex gap-2 mb-2">
              <input
                type="text"
                className="input flex-1"
                placeholder="e.g., All-Conference First Team"
                value={newAward}
                onChange={(e) => setNewAward(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addAward())}
              />
              <button
                type="button"
                onClick={addAward}
                className="btn btn-secondary btn-md"
              >
                Add
              </button>
            </div>
            {formData.awards && formData.awards.length > 0 && (
              <div className="flex flex-wrap gap-2">
                {formData.awards.map((award, idx) => (
                  <span key={idx} className="badge badge-primary text-sm flex items-center gap-1">
                    {award}
                    <button
                      type="button"
                      onClick={() => removeAward(idx)}
                      className="text-primary-800 hover:text-primary-900 ml-1"
                    >
                      √ó
                    </button>
                  </span>
                ))}
              </div>
            )}
          </div>

          <div>
            <label className="label">Story Notes</label>
            <textarea
              className="input h-24 resize-none"
              placeholder="Recruiting story, background, personality traits..."
              value={formData.storyNotes || ''}
              onChange={(e) => setFormData({ ...formData, storyNotes: e.target.value })}
            />
          </div>

          <div className="flex justify-end space-x-3 mt-6">
            <button
              type="button"
              onClick={onClose}
              className="btn btn-secondary btn-md"
            >
              Cancel
            </button>
            <button
              type="submit"
              className="btn btn-primary btn-md"
            >
              {editingPlayer ? 'Update Player' : 'Add Player'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};
</file>

<file path="src/components/PlayerManager.tsx">
import React, { useState } from 'react';
import { usePlayerStore } from '../stores/playerStore';
import { PlayerForm } from './PlayerForm';
import { DepthChart } from './DepthChart';
import type { Player } from '../types/index';

export const PlayerManager: React.FC = () => {
  const players = usePlayerStore(state => state.players);
  const [showForm, setShowForm] = useState(false);
  const [editingPlayer, setEditingPlayer] = useState<Player | undefined>();
  const [selectedPosition, setSelectedPosition] = useState<string>('All');
  const [selectedClass, setSelectedClass] = useState<string>('All');
  const [viewMode, setViewMode] = useState<'roster' | 'depth'>('roster');

  const positions = ['All', 'QB', 'RB', 'WR', 'TE', 'OL', 'DL', 'LB', 'CB', 'S', 'K', 'P'];
  const classes = ['All', 'FR', 'SO', 'JR', 'SR', 'RS'];

  const filteredPlayers = players.filter(player => {
    const positionMatch = selectedPosition === 'All' || player.position === selectedPosition;
    const classMatch = selectedClass === 'All' || player.class === selectedClass;
    return positionMatch && classMatch;
  });

  const handleEdit = (player: Player) => {
    setEditingPlayer(player);
    setShowForm(true);
  };

  const handleCloseForm = () => {
    setShowForm(false);
    setEditingPlayer(undefined);
  };

  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold text-primary-800">
          {viewMode === 'roster' ? 'Roster Management' : 'Depth Chart'}
        </h2>
        <div className="flex items-center space-x-3">
          <div className="btn-group">
            <button 
              onClick={() => setViewMode('roster')}
              className={`btn btn-sm ${viewMode === 'roster' ? 'btn-primary' : 'btn-secondary'}`}
            >
              Roster View
            </button>
            <button 
              onClick={() => setViewMode('depth')}
              className={`btn btn-sm ${viewMode === 'depth' ? 'btn-primary' : 'btn-secondary'}`}
            >
              Depth Chart
            </button>
          </div>
          {viewMode === 'roster' && (
            <button 
              onClick={() => setShowForm(true)}
              className="btn btn-primary btn-md"
            >
              Add Player
            </button>
          )}
        </div>
      </div>

      {viewMode === 'depth' ? (
        <DepthChart />
      ) : (
        <>
          {/* Filters */}
          <div className="bg-white rounded-lg border border-secondary-200 p-4 mb-6">
        <div className="flex flex-wrap gap-4">
          <div>
            <label className="label text-xs">Position</label>
            <select
              className="input h-9"
              value={selectedPosition}
              onChange={(e) => setSelectedPosition(e.target.value)}
            >
              {positions.map(pos => (
                <option key={pos} value={pos}>{pos}</option>
              ))}
            </select>
          </div>
          <div>
            <label className="label text-xs">Class</label>
            <select
              className="input h-9"
              value={selectedClass}
              onChange={(e) => setSelectedClass(e.target.value)}
            >
              {classes.map(cls => (
                <option key={cls} value={cls}>{cls}</option>
              ))}
            </select>
          </div>
          <div className="ml-auto">
            <p className="text-sm text-secondary-600">
              {filteredPlayers.length} players
            </p>
          </div>
        </div>
      </div>

      {filteredPlayers.length === 0 ? (
        <div className="text-center py-12 bg-white rounded-lg border border-secondary-200">
          <p className="text-secondary-600 mb-4">
            {selectedPosition !== 'All' || selectedClass !== 'All' 
              ? 'No players match your filters'
              : 'No players on roster yet'
            }
          </p>
          {selectedPosition === 'All' && selectedClass === 'All' && (
            <button 
              onClick={() => setShowForm(true)}
              className="btn btn-primary btn-md"
            >
              Add Your First Player
            </button>
          )}
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {filteredPlayers.map((player) => (
            <div key={player.id} className="card p-4 hover:shadow-md transition-shadow">
              <div className="flex justify-between items-start mb-3">
                <div>
                  <h3 className="font-semibold text-lg text-secondary-900">
                    {player.name}
                  </h3>
                  <p className="text-sm text-secondary-600">
                    #{player.jerseyNumber} ‚Ä¢ {player.position} ‚Ä¢ {player.class}
                  </p>
                </div>
                <button
                  onClick={() => handleEdit(player)}
                  className="text-primary-600 hover:text-primary-800 text-sm"
                >
                  Edit
                </button>
              </div>

              {player.hometown && (
                <p className="text-sm text-secondary-600 mb-2">
                  <span className="font-medium">From:</span> {player.hometown}
                </p>
              )}

              {/* Current Season Stats */}
              {player.statsBySeason && player.statsBySeason['2024'] && (
                <div className="border-t border-secondary-100 pt-2 mt-2">
                  <p className="text-xs font-medium text-secondary-700 mb-1">2024 Stats</p>
                  <div className="text-sm text-secondary-600">
                    {player.position === 'QB' && player.statsBySeason['2024'].passingYards && (
                      <p>{player.statsBySeason['2024'].passingYards} Pass Yds, {player.statsBySeason['2024'].passingTDs} TDs</p>
                    )}
                    {(player.position === 'RB' || player.position === 'WR') && player.statsBySeason['2024'].rushingYards && (
                      <p>{player.statsBySeason['2024'].rushingYards} Rush Yds, {player.statsBySeason['2024'].rushingTDs} TDs</p>
                    )}
                    {player.position === 'WR' && player.statsBySeason['2024'].receptions && (
                      <p>{player.statsBySeason['2024'].receptions} Rec, {player.statsBySeason['2024'].receivingYards} Yds</p>
                    )}
                    {(player.position === 'LB' || player.position === 'DL') && player.statsBySeason['2024'].tackles && (
                      <p>{player.statsBySeason['2024'].tackles} Tackles, {player.statsBySeason['2024'].sacks} Sacks</p>
                    )}
                  </div>
                </div>
              )}

              {/* Awards */}
              {player.awards && player.awards.length > 0 && (
                <div className="mt-2">
                  <div className="flex flex-wrap gap-1">
                    {player.awards.map((award, idx) => (
                      <span key={idx} className="badge badge-primary text-xs">
                        {award}
                      </span>
                    ))}
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>
      )}
        </>
      )}

      {showForm && (
        <PlayerForm 
          onClose={handleCloseForm}
          editingPlayer={editingPlayer}
        />
      )}
    </div>
  );
};
</file>

<file path="src/components/RecruitForm.tsx">
import React, { useState } from 'react';
import type { Recruit } from '../types/index';
import { useRecruitStore } from '../stores/recruitStore';
import { usePlayerStore } from '../stores/playerStore';

interface RecruitFormProps {
  onClose: () => void;
  editingRecruit?: Recruit;
  defaultYear?: number;
}

export const RecruitForm: React.FC<RecruitFormProps> = ({ onClose, editingRecruit, defaultYear }) => {
  const { addRecruit, updateRecruit, commitRecruit, signRecruit } = useRecruitStore();
  const players = usePlayerStore(state => state.players);
  
  const [formData, setFormData] = useState<Partial<Recruit>>(editingRecruit || {
    name: '',
    stars: 3,
    position: 'QB',
    state: '',
    status: 'Interested',
    signedYear: defaultYear || 2024,
  });

  const positions = ['QB', 'RB', 'WR', 'TE', 'OL', 'DL', 'LB', 'CB', 'S', 'K', 'P'];
  const statuses: Recruit['status'][] = ['Interested', 'Committed', 'Signed'];
  const states = [
    'AL', 'AK', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'FL', 'GA',
    'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MD',
    'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ',
    'NM', 'NY', 'NC', 'ND', 'OH', 'OK', 'OR', 'PA', 'RI', 'SC',
    'SD', 'TN', 'TX', 'UT', 'VT', 'VA', 'WA', 'WV', 'WI', 'WY'
  ];

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    const recruitData: Recruit = {
      id: editingRecruit?.id || `recruit-${Date.now()}`,
      name: formData.name!,
      stars: formData.stars!,
      position: formData.position!,
      state: formData.state!,
      status: formData.status!,
      signedYear: formData.signedYear!,
      playerId: formData.playerId,
    };

    if (editingRecruit) {
      updateRecruit(editingRecruit.id, recruitData);
    } else {
      addRecruit(recruitData);
    }
    
    onClose();
  };

  const handleQuickStatusChange = (status: Recruit['status']) => {
    if (!editingRecruit) return;
    
    if (status === 'Committed') {
      commitRecruit(editingRecruit.id);
    } else if (status === 'Signed' && formData.playerId) {
      signRecruit(editingRecruit.id, formData.playerId);
    }
    
    onClose();
  };

  return (
    <div className="modal-overlay">
      <div className="modal-content">
        <h2 className="text-2xl font-bold text-primary-800 mb-6">
          {editingRecruit ? 'Edit Recruit' : 'Add New Recruit'}
        </h2>
        
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="label">Name *</label>
              <input
                type="text"
                required
                className="input"
                value={formData.name}
                onChange={(e) => setFormData({ ...formData, name: e.target.value })}
              />
            </div>
            
            <div>
              <label className="label">Position *</label>
              <select
                required
                className="input"
                value={formData.position}
                onChange={(e) => setFormData({ ...formData, position: e.target.value })}
              >
                {positions.map(pos => (
                  <option key={pos} value={pos}>{pos}</option>
                ))}
              </select>
            </div>
          </div>

          <div>
            <label className="label">Star Rating *</label>
            <div className="flex space-x-2 mt-2 mb-4">
              {[2, 3, 4, 5].map(star => (
                <button
                  key={star}
                  type="button"
                  onClick={() => setFormData({ ...formData, stars: star as 2 | 3 | 4 | 5 })}
                  className={`px-3 py-2 rounded-md border-2 transition-colors ${
                    formData.stars === star
                      ? 'border-primary-500 bg-primary-50 text-primary-700'
                      : 'border-secondary-300 hover:border-secondary-400'
                  }`}
                >
                  {'‚≠ê'.repeat(star)}
                </button>
              ))}
            </div>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="label">State *</label>
              <select
                required
                className="input"
                value={formData.state}
                onChange={(e) => setFormData({ ...formData, state: e.target.value })}
              >
                <option value="">Select state</option>
                {states.map(state => (
                  <option key={state} value={state}>{state}</option>
                ))}
              </select>
            </div>

            <div>
              <label className="label">Class Year *</label>
              <input
                type="number"
                required
                min="2024"
                max="2030"
                className="input"
                value={formData.signedYear}
                onChange={(e) => setFormData({ ...formData, signedYear: parseInt(e.target.value) })}
              />
            </div>
          </div>

          <div>
            <label className="label">Status *</label>
            <select
              required
              className="input"
              value={formData.status}
              onChange={(e) => setFormData({ ...formData, status: e.target.value as Recruit['status'] })}
            >
              {statuses.map(status => (
                <option key={status} value={status}>{status}</option>
              ))}
            </select>
          </div>

          {formData.status === 'Signed' && (
            <div>
              <label className="label">Link to Player (Optional)</label>
              <select
                className="input"
                value={formData.playerId || ''}
                onChange={(e) => setFormData({ ...formData, playerId: e.target.value || undefined })}
              >
                <option value="">Not linked to roster</option>
                {players
                  .filter(p => p.class === 'FR')
                  .map(player => (
                    <option key={player.id} value={player.id}>
                      {player.name} - {player.position}
                    </option>
                  ))}
              </select>
              <p className="text-xs text-secondary-600 mt-1">
                Link this recruit to a freshman on your roster
              </p>
            </div>
          )}

          <div className="flex justify-between items-center mt-6">
            {editingRecruit && (
              <div className="flex space-x-2">
                {editingRecruit.status === 'Interested' && (
                  <button
                    type="button"
                    onClick={() => handleQuickStatusChange('Committed')}
                    className="btn btn-primary btn-sm"
                  >
                    Commit Now
                  </button>
                )}
                {editingRecruit.status === 'Committed' && (
                  <button
                    type="button"
                    onClick={() => handleQuickStatusChange('Signed')}
                    className="btn btn-success btn-sm"
                  >
                    Sign Now
                  </button>
                )}
              </div>
            )}
            
            <div className="flex space-x-3 ml-auto">
              <button
                type="button"
                onClick={onClose}
                className="btn btn-secondary btn-md"
              >
                Cancel
              </button>
              <button
                type="submit"
                className="btn btn-primary btn-md"
              >
                {editingRecruit ? 'Update Recruit' : 'Add Recruit'}
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>
  );
};
</file>

<file path="src/components/RecruitTracker.tsx">
import React, { useState } from 'react';
import { useRecruitStore } from '../stores/recruitStore';
import { useSeasonStore } from '../stores/seasonStore';
import { RecruitForm } from './RecruitForm';
import type { Recruit } from '../types/index';

export const RecruitTracker: React.FC = () => {
  const recruits = useRecruitStore(state => state.recruits);
  const currentSeason = useSeasonStore(state => state.getCurrentSeason());
  const currentYear = currentSeason?.year || 2024;
  
  const [showForm, setShowForm] = useState(false);
  const [editingRecruit, setEditingRecruit] = useState<Recruit | undefined>();
  const [selectedYear, setSelectedYear] = useState(currentYear);
  const [selectedStatus, setSelectedStatus] = useState<Recruit['status'] | 'All'>('All');

  const years = [currentYear, currentYear + 1, currentYear + 2, currentYear + 3];
  const statuses: (Recruit['status'] | 'All')[] = ['All', 'Interested', 'Committed', 'Signed'];

  const filteredRecruits = recruits.filter(recruit => {
    const yearMatch = recruit.signedYear === selectedYear;
    const statusMatch = selectedStatus === 'All' || recruit.status === selectedStatus;
    return yearMatch && statusMatch;
  });

  const handleEdit = (recruit: Recruit) => {
    setEditingRecruit(recruit);
    setShowForm(true);
  };

  const handleCloseForm = () => {
    setShowForm(false);
    setEditingRecruit(undefined);
  };

  const getStarEmojis = (stars: number) => '‚≠ê'.repeat(stars);

  const getStatusColor = (status: Recruit['status']) => {
    switch(status) {
      case 'Interested': return 'badge-warning';
      case 'Committed': return 'badge-primary';
      case 'Signed': return 'badge-success';
      default: return 'badge-secondary';
    }
  };

  const recruitStats = {
    total: filteredRecruits.length,
    committed: filteredRecruits.filter(r => r.status === 'Committed').length,
    signed: filteredRecruits.filter(r => r.status === 'Signed').length,
    avgStars: filteredRecruits.length > 0 
      ? (filteredRecruits.reduce((sum, r) => sum + r.stars, 0) / filteredRecruits.length).toFixed(1)
      : '0.0'
  };

  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold text-primary-800">Recruiting Board</h2>
        <button 
          onClick={() => setShowForm(true)}
          className="btn btn-primary btn-md"
        >
          Add Recruit
        </button>
      </div>

      {/* Filters */}
      <div className="bg-white rounded-lg border border-secondary-200 p-4 mb-6">
        <div className="flex flex-wrap gap-4">
          <div>
            <label className="label text-xs">Recruiting Class</label>
            <select
              className="input h-9"
              value={selectedYear}
              onChange={(e) => setSelectedYear(parseInt(e.target.value))}
            >
              {years.map(year => (
                <option key={year} value={year}>{year}</option>
              ))}
            </select>
          </div>
          <div>
            <label className="label text-xs">Status</label>
            <select
              className="input h-9"
              value={selectedStatus}
              onChange={(e) => setSelectedStatus(e.target.value as Recruit['status'] | 'All')}
            >
              {statuses.map(status => (
                <option key={status} value={status}>{status}</option>
              ))}
            </select>
          </div>
          <div className="ml-auto flex items-end space-x-4">
            <div className="text-center">
              <p className="text-2xl font-bold text-primary-800">{recruitStats.total}</p>
              <p className="text-xs text-secondary-600">Total</p>
            </div>
            <div className="text-center">
              <p className="text-2xl font-bold text-primary-600">{recruitStats.committed}</p>
              <p className="text-xs text-secondary-600">Committed</p>
            </div>
            <div className="text-center">
              <p className="text-2xl font-bold text-green-600">{recruitStats.signed}</p>
              <p className="text-xs text-secondary-600">Signed</p>
            </div>
            <div className="text-center">
              <p className="text-2xl font-bold text-amber-600">{recruitStats.avgStars}</p>
              <p className="text-xs text-secondary-600">Avg Stars</p>
            </div>
          </div>
        </div>
      </div>

      {filteredRecruits.length === 0 ? (
        <div className="text-center py-12 bg-white rounded-lg border border-secondary-200">
          <p className="text-secondary-600 mb-4">
            No recruits for {selectedYear} class
            {selectedStatus !== 'All' && ` with ${selectedStatus} status`}
          </p>
          <button 
            onClick={() => setShowForm(true)}
            className="btn btn-primary btn-md"
          >
            Add Your First Recruit
          </button>
        </div>
      ) : (
        <div className="bg-white rounded-lg border border-secondary-200 overflow-hidden">
          <table className="w-full">
            <thead className="bg-secondary-50 border-b border-secondary-200">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-secondary-700 uppercase tracking-wider">
                  Name
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-secondary-700 uppercase tracking-wider">
                  Position
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-secondary-700 uppercase tracking-wider">
                  Rating
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-secondary-700 uppercase tracking-wider">
                  State
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-secondary-700 uppercase tracking-wider">
                  Status
                </th>
                <th className="px-6 py-3 text-right text-xs font-medium text-secondary-700 uppercase tracking-wider">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody className="divide-y divide-secondary-200">
              {filteredRecruits.map((recruit) => (
                <tr key={recruit.id} className="hover:bg-secondary-50">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm font-medium text-secondary-900">
                      {recruit.name}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-secondary-600">
                    {recruit.position}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className="text-amber-500 font-mono">
                      {getStarEmojis(recruit.stars)}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-secondary-600">
                    {recruit.state}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`badge ${getStatusColor(recruit.status)}`}>
                      {recruit.status}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <button
                      onClick={() => handleEdit(recruit)}
                      className="text-primary-600 hover:text-primary-900"
                    >
                      Edit
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {showForm && (
        <RecruitForm 
          onClose={handleCloseForm}
          editingRecruit={editingRecruit}
          defaultYear={selectedYear}
        />
      )}
    </div>
  );
};
</file>

<file path="src/components/Schedule.tsx">
import React, { useState } from 'react';
import { useSeasonStore } from '../stores/seasonStore';
import { useGameStore } from '../stores/gameStore';
import { useTeamStore } from '../stores/teamStore';
import { GameForm } from './GameForm';
import type { Game } from '../types/index';

export const Schedule: React.FC = () => {
  const seasons = useSeasonStore(state => state.seasons);
  const currentSeason = useSeasonStore(state => state.getCurrentSeason());
  const games = useGameStore(state => state.games);
  const teams = useTeamStore(state => state.teams);
  
  const currentYear = new Date().getFullYear();
  const [selectedYear, setSelectedYear] = useState(currentSeason?.year || currentYear);
  const [showGameForm, setShowGameForm] = useState(false);
  const [editingGame, setEditingGame] = useState<Game | undefined>();
  const [selectedWeek, setSelectedWeek] = useState<number | undefined>();

  // Get or create season for selected year
  const selectedSeason = seasons.find(s => s.year === selectedYear);
  const seasonGames = selectedSeason 
    ? games.filter(g => selectedSeason.games.includes(g.id))
    : [];

  // Group games by week
  const gamesByWeek = seasonGames.reduce((acc, game) => {
    if (!acc[game.week]) acc[game.week] = [];
    acc[game.week].push(game);
    return acc;
  }, {} as Record<number, Game[]>);

  // Generate weeks 1-16 (regular season + conference championship + bowls)
  const weeks = Array.from({ length: 16 }, (_, i) => i + 1);

  const handleAddGame = (week: number) => {
    setSelectedWeek(week);
    setEditingGame(undefined);
    setShowGameForm(true);
  };

  const handleEditGame = (game: Game) => {
    setEditingGame(game);
    setSelectedWeek(game.week);
    setShowGameForm(true);
  };

  const handleCloseForm = () => {
    setShowGameForm(false);
    setEditingGame(undefined);
    setSelectedWeek(undefined);
  };

  const getWeekLabel = (week: number) => {
    if (week <= 12) return `Week ${week}`;
    if (week === 13) return 'Conference Championship';
    if (week === 14) return 'Bowl Week 1';
    if (week === 15) return 'Bowl Week 2';
    if (week === 16) return 'Playoff / National Championship';
    return `Week ${week}`;
  };

  const getGameDate = (week: number, year: number): string => {
    // Approximate dates - season starts in early September
    const seasonStart = new Date(year, 8, 1); // September 1st
    const weekOffset = (week - 1) * 7;
    const gameDate = new Date(seasonStart);
    gameDate.setDate(seasonStart.getDate() + weekOffset);
    
    // Adjust for bowl season
    if (week === 13) gameDate.setMonth(11, 7); // Early December
    if (week >= 14) gameDate.setMonth(11, 20 + (week - 14) * 7); // Late December+
    
    return gameDate.toLocaleDateString('en-US', { 
      month: 'short', 
      day: 'numeric',
      year: 'numeric'
    });
  };

  const createNewSeason = () => {
    const seasonStore = useSeasonStore.getState();
    const userTeam = useTeamStore.getState().getUserTeam();
    
    const newSeason = {
      id: `season-${selectedYear}`,
      year: selectedYear,
      teamName: userTeam?.name || 'My Team',
      conference: userTeam?.conference || 'Independent',
      games: [],
      conferenceRecord: { wins: 0, losses: 0 },
      overallRecord: { wins: 0, losses: 0 },
      coachId: 'coach-1',
      captains: [],
    };
    
    seasonStore.addSeason(newSeason);
    seasonStore.setCurrentSeason(newSeason.id);
  };

  const years = Array.from({ length: 10 }, (_, i) => currentYear - 5 + i);

  return (
    <div>
      {/* Header */}
      <div className="flex justify-between items-center mb-6">
        <div className="flex items-center space-x-4">
          <h2 className="text-2xl font-bold text-primary-800">Season Schedule</h2>
          <select
            className="input h-10 w-32"
            value={selectedYear}
            onChange={(e) => setSelectedYear(parseInt(e.target.value))}
          >
            {years.map(year => (
              <option key={year} value={year}>
                {year}
                {year === currentYear && ' (Current)'}
              </option>
            ))}
          </select>
        </div>
        
        {!selectedSeason && (
          <button
            onClick={createNewSeason}
            className="btn btn-primary btn-md"
          >
            Create {selectedYear} Season
          </button>
        )}
      </div>

      {!selectedSeason ? (
        <div className="text-center py-12 bg-white rounded-lg border border-secondary-200">
          <p className="text-secondary-600 mb-4">
            No season exists for {selectedYear}
          </p>
          <button
            onClick={createNewSeason}
            className="btn btn-primary btn-md"
          >
            Create New Season
          </button>
        </div>
      ) : (
        <>
          {/* Season Stats */}
          <div className="bg-white rounded-lg border border-secondary-200 p-4 mb-6">
            <div className="flex items-center justify-between">
              <div className="flex space-x-8">
                <div>
                  <p className="text-sm text-secondary-600">Overall Record</p>
                  <p className="text-xl font-bold text-primary-800">
                    {selectedSeason.overallRecord.wins}-{selectedSeason.overallRecord.losses}
                  </p>
                </div>
                <div>
                  <p className="text-sm text-secondary-600">Conference Record</p>
                  <p className="text-xl font-bold text-primary-800">
                    {selectedSeason.conferenceRecord.wins}-{selectedSeason.conferenceRecord.losses}
                  </p>
                </div>
                {selectedSeason.ranking && (
                  <div>
                    <p className="text-sm text-secondary-600">Ranking</p>
                    <p className="text-xl font-bold text-accent-600">
                      #{selectedSeason.ranking}
                    </p>
                  </div>
                )}
              </div>
              
              {selectedSeason.id === currentSeason?.id && (
                <span className="badge badge-primary">Current Season</span>
              )}
            </div>
          </div>

          {/* Schedule Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {weeks.map(week => {
              const weekGames = gamesByWeek[week] || [];
              const hasGame = weekGames.length > 0;
              const game = weekGames[0]; // Assuming one game per week
              
              return (
                <div
                  key={week}
                  className={`card p-4 ${
                    hasGame ? 'hover:shadow-md cursor-pointer' : ''
                  }`}
                  onClick={() => hasGame && handleEditGame(game)}
                >
                  <div className="flex justify-between items-start mb-2">
                    <div>
                      <p className="font-semibold text-primary-800">
                        {getWeekLabel(week)}
                      </p>
                      <p className="text-sm text-secondary-600">
                        {getGameDate(week, selectedYear)}
                      </p>
                    </div>
                    {!hasGame && (
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          handleAddGame(week);
                        }}
                        className="btn btn-ghost btn-sm"
                      >
                        + Add
                      </button>
                    )}
                  </div>

                  {hasGame ? (
                    <div>
                      <div className="flex items-center justify-between mb-1">
                        <p className="font-medium">
                          {game.location === 'Home' ? 'vs' : game.location === 'Away' ? '@' : 'vs'} {game.opponent}
                        </p>
                        <span className={`font-bold ${
                          game.result === 'W' ? 'text-green-600' : 'text-red-600'
                        }`}>
                          {game.result}
                        </span>
                      </div>
                      <p className="text-sm text-secondary-700">
                        {game.score.for} - {game.score.against}
                      </p>
                      <div className="flex flex-wrap gap-1 mt-2">
                        {game.conferenceGame && (
                          <span className="badge badge-primary text-xs">Conference</span>
                        )}
                        {game.rivalry && (
                          <span className="badge badge-error text-xs">Rivalry</span>
                        )}
                        {game.bowlGame && (
                          <span className="badge badge-success text-xs">{game.bowlGame}</span>
                        )}
                        {game.playoffGame && (
                          <span className="badge badge-warning text-xs">Playoff</span>
                        )}
                      </div>
                    </div>
                  ) : (
                    <div className="text-center py-4">
                      <p className="text-secondary-400 text-sm">No game scheduled</p>
                    </div>
                  )}
                </div>
              );
            })}
          </div>

          {/* Future Games Notice */}
          {seasonGames.some(g => new Date(g.date) > new Date()) && (
            <div className="mt-6 bg-primary-50 border border-primary-200 rounded-lg p-4">
              <p className="text-sm text-primary-800">
                <span className="font-medium">Note:</span> Future games are displayed based on their scheduled dates.
              </p>
            </div>
          )}
        </>
      )}

      {/* Game Form with Week Pre-selected */}
      {showGameForm && (
        <GameForm 
          onClose={handleCloseForm}
          editingGame={editingGame}
          defaultWeek={selectedWeek}
        />
      )}
    </div>
  );
};
</file>

<file path="src/components/SeasonDashboard.tsx">
import React from 'react';
import { useSeasonStore } from '../stores/seasonStore';
import { useGameStore } from '../stores/gameStore';
import { useTeamStore } from '../stores/teamStore';
import { usePlayerStore } from '../stores/playerStore';
import { useRecruitStore } from '../stores/recruitStore';
import { useCoachStore } from '../stores/coachStore';
import { 
  generateSampleGames, 
  generateSamplePlayers, 
  generateSampleRecruits, 
  generateSampleSeason,
  generateSampleCoach 
} from '../utils/sampleDataGenerator';

export const SeasonDashboard: React.FC = () => {
  const currentSeason = useSeasonStore(state => state.getCurrentSeason());
  const games = useGameStore(state => state.games);
  const userTeam = useTeamStore(state => state.getUserTeam());
  const addGame = useGameStore(state => state.addGame);
  const addPlayer = usePlayerStore(state => state.addPlayer);
  const addRecruit = useRecruitStore(state => state.addRecruit);
  const addSeason = useSeasonStore(state => state.addSeason);
  const setCurrentSeason = useSeasonStore(state => state.setCurrentSeason);
  const addCoach = useCoachStore(state => state.addCoach);
  const setCurrentCoach = useCoachStore(state => state.setCurrentCoach);
  
  const generateSampleData = () => {
    if (!userTeam) {
      alert('Please select a team first!');
      return;
    }
    
    // Generate and add coach
    const coach = generateSampleCoach();
    addCoach(coach);
    setCurrentCoach(coach.name);
    
    // Generate and add games
    const sampleGames = generateSampleGames(userTeam.name);
    sampleGames.forEach(game => addGame(game));
    
    // Generate and add season
    const season = generateSampleSeason(userTeam.id, sampleGames);
    addSeason(season);
    setCurrentSeason(season.year);
    
    // Generate and add players
    const players = generateSamplePlayers();
    players.forEach(player => addPlayer(player));
    
    // Generate and add recruits
    const recruits = generateSampleRecruits();
    recruits.forEach(recruit => addRecruit(recruit));
    
    alert('Sample data generated! Check out the News and Forum sections to see AI-generated content.');
  };

  if (!currentSeason) {
    return (
      <div className="text-center py-12">
        <h2 className="text-2xl font-semibold text-secondary-700 mb-4">
          No Active Season
        </h2>
        <p className="text-secondary-600 mb-4">
          Start a new season to begin tracking your dynasty
        </p>
        <button className="btn btn-primary btn-md">
          Start New Season
        </button>
      </div>
    );
  }

  const seasonGames = games.filter(game => 
    currentSeason.games.includes(game.id)
  );

  const recentGames = seasonGames
    .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
    .slice(0, 5);

  const nextGame = seasonGames
    .filter(game => new Date(game.date) > new Date())
    .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())[0];

  return (
    <div className="space-y-6">
      {/* Season Header */}
      <div className="bg-white rounded-lg shadow-sm border border-secondary-200 p-6">
        <div className="flex items-center justify-between mb-4">
          <div>
            <h1 className="text-3xl font-bold text-[var(--team-primary)]">
              {currentSeason.year} Season
            </h1>
            <p className="text-secondary-600">
              {userTeam?.name || currentSeason.teamName}
            </p>
          </div>
          <div className="flex items-center space-x-4">
            {currentSeason.ranking && (
              <div className="text-right">
                <p className="text-sm text-secondary-600">National Ranking</p>
                <p className="text-3xl font-bold text-[var(--team-secondary)]">
                  #{currentSeason.ranking}
                </p>
              </div>
            )}
            {games.length === 0 && (
              <button 
                onClick={generateSampleData}
                className="btn bg-[var(--team-primary)] hover:bg-[var(--team-primary)]/90 text-white btn-md"
              >
                Generate Sample Data
              </button>
            )}
          </div>
        </div>

        {/* Record Cards */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-6">
          <div className="bg-secondary-50 rounded-lg p-4">
            <p className="stat-label">Overall Record</p>
            <p className="stat-value text-[var(--team-primary)]">
              {currentSeason.overallRecord.wins}-{currentSeason.overallRecord.losses}
            </p>
          </div>
          <div className="bg-secondary-50 rounded-lg p-4">
            <p className="stat-label">Conference Record</p>
            <p className="stat-value text-[var(--team-primary)]">
              {currentSeason.conferenceRecord.wins}-{currentSeason.conferenceRecord.losses}
            </p>
          </div>
          <div className="bg-secondary-50 rounded-lg p-4">
            <p className="stat-label">Win Percentage</p>
            <p className="stat-value text-[var(--team-primary)]">
              {(
                (currentSeason.overallRecord.wins /
                  (currentSeason.overallRecord.wins + currentSeason.overallRecord.losses)) *
                100
              ).toFixed(0)}%
            </p>
          </div>
        </div>
      </div>

      {/* Next Game */}
      {nextGame && (
        <div className="bg-white rounded-lg shadow-sm border border-secondary-200 p-6">
          <h2 className="text-xl font-semibold text-[var(--team-primary)] mb-4">
            Next Game
          </h2>
          <div className="flex items-center justify-between">
            <div>
              <p className="text-lg font-medium">
                Week {nextGame.week} - {nextGame.location} vs {nextGame.opponent}
              </p>
              <p className="text-secondary-600">
                {new Date(nextGame.date).toLocaleDateString('en-US', {
                  weekday: 'long',
                  month: 'long',
                  day: 'numeric',
                })}
              </p>
            </div>
            {nextGame.rivalry && (
              <span className="badge badge-error">Rivalry Game</span>
            )}
          </div>
        </div>
      )}

      {/* Recent Games */}
      <div className="bg-white rounded-lg shadow-sm border border-secondary-200 p-6">
        <h2 className="text-xl font-semibold text-secondary-800 mb-4">
          Recent Games
        </h2>
        <div className="space-y-3">
          {recentGames.map((game) => (
            <div
              key={game.id}
              className="flex items-center justify-between py-3 border-b border-secondary-100 last:border-0"
            >
              <div className="flex items-center space-x-4">
                <div
                  className={`w-12 h-12 rounded-full flex items-center justify-center font-bold text-white ${
                    game.result === 'W' ? 'bg-success' : 'bg-error'
                  }`}
                >
                  {game.result}
                </div>
                <div>
                  <p className="font-medium">
                    Week {game.week} - {game.location} vs {game.opponent}
                  </p>
                  <p className="text-sm text-secondary-600">
                    {game.score.for} - {game.score.against}
                  </p>
                </div>
              </div>
              <div className="flex items-center space-x-2">
                {game.rivalry && (
                  <span className="badge badge-error text-xs">Rivalry</span>
                )}
                {game.conferenceGame && (
                  <span className="badge badge-primary text-xs">Conference</span>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Season Goals */}
      {currentSeason.preseasonGoals && currentSeason.preseasonGoals.length > 0 && (
        <div className="bg-white rounded-lg shadow-sm border border-secondary-200 p-6">
          <h2 className="text-xl font-semibold text-secondary-800 mb-4">
            Season Goals
          </h2>
          <ul className="space-y-2">
            {currentSeason.preseasonGoals.map((goal, index) => (
              <li key={index} className="flex items-center space-x-2">
                <span className="text-secondary-400">‚Ä¢</span>
                <span className="text-secondary-700">{goal}</span>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};
</file>

<file path="src/components/TeamForm.tsx">
import React, { useState } from 'react';
import type { Team } from '../types/index';
import { useTeamStore } from '../stores/teamStore';

interface TeamFormProps {
  onClose: () => void;
  editingTeam?: Team;
}

export const TeamForm: React.FC<TeamFormProps> = ({ onClose, editingTeam }) => {
  const addTeam = useTeamStore(state => state.addTeam);
  const updateTeam = useTeamStore(state => state.updateTeam);
  
  const [formData, setFormData] = useState<Partial<Team>>(editingTeam || {
    name: '',
    mascot: '',
    conference: 'Big 12',
    primaryColor: '#1E40AF',
    secondaryColor: '#FFFFFF',
    logo: '',
    stadium: '',
    isRival: false,
    rivalryName: '',
    historicalRecord: { wins: 0, losses: 0 },
  });

  const conferences = [
    'ACC', 'Big 12', 'Big Ten', 'Pac-12', 'SEC',
    'American', 'Conference USA', 'MAC', 'Mountain West', 'Sun Belt',
    'Independent'
  ];

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    const teamData: Team = {
      id: editingTeam?.id || `team-${Date.now()}`,
      name: formData.name!,
      mascot: formData.mascot!,
      conference: formData.conference!,
      primaryColor: formData.primaryColor!,
      secondaryColor: formData.secondaryColor!,
      logo: formData.logo,
      stadium: formData.stadium,
      isRival: formData.isRival!,
      rivalryName: formData.isRival ? formData.rivalryName : undefined,
      historicalRecord: formData.isRival ? formData.historicalRecord : undefined,
      lastPlayed: formData.lastPlayed,
      notes: formData.notes,
    };

    if (editingTeam) {
      updateTeam(editingTeam.id, teamData);
    } else {
      addTeam(teamData);
    }
    
    onClose();
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
        <h2 className="text-2xl font-bold text-primary-800 mb-6">
          {editingTeam ? 'Edit Team' : 'Add New Team'}
        </h2>
        
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="label">Team Name *</label>
              <input
                type="text"
                required
                className="input"
                value={formData.name}
                onChange={(e) => setFormData({ ...formData, name: e.target.value })}
              />
            </div>
            
            <div>
              <label className="label">Mascot *</label>
              <input
                type="text"
                required
                className="input"
                value={formData.mascot}
                onChange={(e) => setFormData({ ...formData, mascot: e.target.value })}
              />
            </div>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="label">Conference *</label>
              <select
                required
                className="input"
                value={formData.conference}
                onChange={(e) => setFormData({ ...formData, conference: e.target.value })}
              >
                {conferences.map(conf => (
                  <option key={conf} value={conf}>{conf}</option>
                ))}
              </select>
            </div>
            
            <div>
              <label className="label">Stadium</label>
              <input
                type="text"
                className="input"
                value={formData.stadium || ''}
                onChange={(e) => setFormData({ ...formData, stadium: e.target.value })}
              />
            </div>
          </div>

          <div className="grid grid-cols-3 gap-4">
            <div>
              <label className="label">Primary Color</label>
              <div className="flex items-center space-x-2">
                <input
                  type="color"
                  className="h-10 w-20"
                  value={formData.primaryColor}
                  onChange={(e) => setFormData({ ...formData, primaryColor: e.target.value })}
                />
                <input
                  type="text"
                  className="input flex-1"
                  value={formData.primaryColor}
                  onChange={(e) => setFormData({ ...formData, primaryColor: e.target.value })}
                />
              </div>
            </div>
            
            <div>
              <label className="label">Secondary Color</label>
              <div className="flex items-center space-x-2">
                <input
                  type="color"
                  className="h-10 w-20"
                  value={formData.secondaryColor}
                  onChange={(e) => setFormData({ ...formData, secondaryColor: e.target.value })}
                />
                <input
                  type="text"
                  className="input flex-1"
                  value={formData.secondaryColor}
                  onChange={(e) => setFormData({ ...formData, secondaryColor: e.target.value })}
                />
              </div>
            </div>

            <div>
              <label className="label">Logo (Emoji)</label>
              <input
                type="text"
                className="input"
                placeholder="ü¶Ö"
                maxLength={2}
                value={formData.logo || ''}
                onChange={(e) => setFormData({ ...formData, logo: e.target.value })}
              />
            </div>
          </div>

          <div className="border-t border-secondary-200 pt-4">
            <label className="flex items-center space-x-3 mb-4">
              <input
                type="checkbox"
                className="w-4 h-4 text-primary-600 rounded"
                checked={formData.isRival || false}
                onChange={(e) => setFormData({ ...formData, isRival: e.target.checked })}
              />
              <span className="text-sm font-medium text-secondary-700">
                This is a rival team
              </span>
            </label>

            {formData.isRival && (
              <div className="space-y-4 pl-7">
                <div>
                  <label className="label">Rivalry Name</label>
                  <input
                    type="text"
                    className="input"
                    placeholder="e.g., The Iron Bowl"
                    value={formData.rivalryName || ''}
                    onChange={(e) => setFormData({ ...formData, rivalryName: e.target.value })}
                  />
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="label">Historical Wins</label>
                    <input
                      type="number"
                      min="0"
                      className="input"
                      value={formData.historicalRecord?.wins || 0}
                      onChange={(e) => setFormData({ 
                        ...formData, 
                        historicalRecord: {
                          ...formData.historicalRecord!,
                          wins: parseInt(e.target.value) || 0
                        }
                      })}
                    />
                  </div>
                  
                  <div>
                    <label className="label">Historical Losses</label>
                    <input
                      type="number"
                      min="0"
                      className="input"
                      value={formData.historicalRecord?.losses || 0}
                      onChange={(e) => setFormData({ 
                        ...formData, 
                        historicalRecord: {
                          ...formData.historicalRecord!,
                          losses: parseInt(e.target.value) || 0
                        }
                      })}
                    />
                  </div>
                </div>
              </div>
            )}
          </div>

          <div>
            <label className="label">Notes</label>
            <textarea
              className="input h-20 resize-none"
              placeholder="Additional team information..."
              value={formData.notes || ''}
              onChange={(e) => setFormData({ ...formData, notes: e.target.value })}
            />
          </div>

          <div className="flex justify-end space-x-3 mt-6">
            <button
              type="button"
              onClick={onClose}
              className="btn btn-secondary btn-md"
            >
              Cancel
            </button>
            <button
              type="submit"
              className="btn btn-primary btn-md"
            >
              {editingTeam ? 'Update Team' : 'Add Team'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};
</file>

<file path="src/components/TeamList.tsx">
import React, { useState } from 'react';
import { useTeamStore } from '../stores/teamStore';
import { TeamForm } from './TeamForm';
import type { Team } from '../types/index';

export const TeamList: React.FC = () => {
  const { teams, userTeamId, setUserTeam } = useTeamStore();
  const [showForm, setShowForm] = useState(false);
  const [editingTeam, setEditingTeam] = useState<Team | undefined>();
  const [filter, setFilter] = useState<'all' | 'conference' | 'rivals'>('all');

  const userTeam = teams.find(t => t.id === userTeamId);
  
  const filteredTeams = teams.filter(team => {
    if (filter === 'all') return true;
    if (filter === 'conference') return team.conference === userTeam?.conference;
    if (filter === 'rivals') return team.isRival;
    return true;
  });

  const handleEdit = (team: Team) => {
    setEditingTeam(team);
    setShowForm(true);
  };

  const handleCloseForm = () => {
    setShowForm(false);
    setEditingTeam(undefined);
  };

  const conferences = [...new Set(teams.map(t => t.conference))].sort();

  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold text-primary-800">Team Management</h2>
        <button 
          onClick={() => setShowForm(true)}
          className="btn btn-primary btn-md"
        >
          Add Team
        </button>
      </div>

      {/* Filter Tabs */}
      <div className="flex space-x-1 mb-6 bg-white rounded-lg border border-secondary-200 p-1">
        <button
          onClick={() => setFilter('all')}
          className={`flex-1 py-2 px-4 rounded-md transition-colors ${
            filter === 'all' 
              ? 'bg-primary-100 text-primary-800 font-medium' 
              : 'text-secondary-600 hover:text-secondary-900'
          }`}
        >
          All Teams ({teams.length})
        </button>
        <button
          onClick={() => setFilter('conference')}
          className={`flex-1 py-2 px-4 rounded-md transition-colors ${
            filter === 'conference' 
              ? 'bg-primary-100 text-primary-800 font-medium' 
              : 'text-secondary-600 hover:text-secondary-900'
          }`}
        >
          Conference ({teams.filter(t => t.conference === userTeam?.conference).length})
        </button>
        <button
          onClick={() => setFilter('rivals')}
          className={`flex-1 py-2 px-4 rounded-md transition-colors ${
            filter === 'rivals' 
              ? 'bg-primary-100 text-primary-800 font-medium' 
              : 'text-secondary-600 hover:text-secondary-900'
          }`}
        >
          Rivals ({teams.filter(t => t.isRival).length})
        </button>
      </div>

      {filteredTeams.length === 0 ? (
        <div className="text-center py-12 bg-white rounded-lg border border-secondary-200">
          <p className="text-secondary-600 mb-4">No teams match your filter</p>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {filteredTeams.map((team) => (
            <div 
              key={team.id} 
              className={`card p-4 hover:shadow-md transition-shadow ${
                team.id === userTeamId ? 'ring-2 ring-primary-500' : ''
              }`}
            >
              <div className="flex justify-between items-start mb-3">
                <div className="flex items-center space-x-3">
                  {team.logo && (
                    <div 
                      className="w-12 h-12 rounded-full flex items-center justify-center text-2xl"
                      style={{ backgroundColor: team.primaryColor, color: team.secondaryColor }}
                    >
                      {team.logo}
                    </div>
                  )}
                  <div>
                    <h3 className="font-semibold text-lg text-secondary-900">
                      {team.name}
                    </h3>
                    <p className="text-sm text-secondary-600">
                      {team.mascot}
                    </p>
                  </div>
                </div>
                <button
                  onClick={() => handleEdit(team)}
                  className="text-primary-600 hover:text-primary-800 text-sm"
                >
                  Edit
                </button>
              </div>

              <div className="space-y-2 text-sm">
                <p className="text-secondary-600">
                  <span className="font-medium">Conference:</span> {team.conference}
                </p>
                
                {team.stadium && (
                  <p className="text-secondary-600">
                    <span className="font-medium">Stadium:</span> {team.stadium}
                  </p>
                )}

                {team.isRival && (
                  <div className="mt-2">
                    <span className="badge badge-error">
                      Rival {team.rivalryName ? `- ${team.rivalryName}` : ''}
                    </span>
                    {team.historicalRecord && (
                      <p className="text-xs text-secondary-600 mt-1">
                        Record: {team.historicalRecord.wins}W - {team.historicalRecord.losses}L
                      </p>
                    )}
                  </div>
                )}

                {team.id === userTeamId ? (
                  <div className="mt-2">
                    <span className="badge" style={{
                      backgroundColor: team.primaryColor,
                      color: 'white'
                    }}>
                      Your Team
                    </span>
                  </div>
                ) : (
                  <button
                    onClick={() => setUserTeam(team.id)}
                    className="text-xs font-medium mt-2 transition-colors"
                    style={{ color: team.primaryColor }}
                    onMouseEnter={(e) => {
                      e.currentTarget.style.textDecoration = 'underline';
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.textDecoration = 'none';
                    }}
                  >
                    Set as Your Team
                  </button>
                )}
              </div>
            </div>
          ))}
        </div>
      )}

      {showForm && (
        <TeamForm 
          onClose={handleCloseForm}
          editingTeam={editingTeam}
        />
      )}
    </div>
  );
};
</file>

<file path="src/components/ThreadRow.tsx">
import React from 'react';
import type { ForumPost } from '../utils/AIContentGenerator';
import type { Team } from '../types/index';

interface ThreadRowProps {
  thread: ForumPost;
  onClick: () => void;
  userTeam?: Team | null;
}

export const ThreadRow: React.FC<ThreadRowProps> = ({ thread, onClick, userTeam }) => {
  return (
    <div
      className="border-b border-secondary-200 p-4 cursor-pointer transition-colors"
      onClick={onClick}
      onMouseEnter={(e) => {
        if (userTeam) {
          e.currentTarget.style.backgroundColor = `rgba(var(--team-primary-rgb), 0.05)`;
        }
      }}
      onMouseLeave={(e) => {
        e.currentTarget.style.backgroundColor = 'transparent';
      }}
    >
      <div className="flex items-start justify-between">
        <div className="flex-1 min-w-0">
          <div className="flex items-center space-x-2 mb-1">
            {thread.isPinned && (
              <span className="text-[var(--team-primary)]" title="Pinned">üìå</span>
            )}
            <h3 className="font-semibold truncate" style={{ color: userTeam ? 'var(--team-primary)' : '#1f2937' }}>
              {thread.title}
            </h3>
          </div>
          <div className="flex items-center text-xs text-secondary-500 space-x-4">
            <span className="font-medium">{thread.author}</span>
            <span>‚Ä¢</span>
            <span>{thread.replies} replies</span>
            <span>‚Ä¢</span>
            <span>{thread.views.toLocaleString()} views</span>
            <span>‚Ä¢</span>
            <span>Last: {thread.lastActivity}</span>
          </div>
        </div>
        <div className="ml-4 flex-shrink-0">
          <span className={`badge text-xs ${
            userTeam ? 'badge-team-primary' : (
              thread.category === 'game-thread' ? 'badge-primary' :
              thread.category === 'recruiting' ? 'badge-success' :
              thread.category === 'coaching' ? 'badge-warning' :
              thread.category === 'off-topic' ? 'badge-accent' :
              'badge-secondary'
            )
          }`}>
            {thread.category === 'game-thread' ? 'Game' :
             thread.category === 'off-topic' ? 'OT' :
             thread.category.charAt(0).toUpperCase() + thread.category.slice(1)}
          </span>
        </div>
      </div>
    </div>
  );
};
</file>

<file path="src/components/Timeline.tsx">
import React from 'react';

export const Timeline: React.FC = () => {
  return (
    <div>
      <h2 className="text-2xl font-bold text-primary-800 mb-4">Timeline</h2>
      <p className="text-secondary-600">Timeline component - Coming soon!</p>
    </div>
  );
};
</file>

<file path="src/data/division1Teams.ts">
import type { Team } from '../types/index';

// All FBS Division 1 College Football Teams organized by conference
export const division1Teams: Team[] = [
  // ACC (Atlantic Coast Conference)
  { id: 'boston-college', name: 'Boston College', mascot: 'Eagles', conference: 'ACC', primaryColor: '#8B2332', secondaryColor: '#CEB888', stadium: 'Alumni Stadium', isRival: false },
  { id: 'clemson', name: 'Clemson', mascot: 'Tigers', conference: 'ACC', primaryColor: '#F56600', secondaryColor: '#522D80', stadium: 'Memorial Stadium', isRival: false },
  { id: 'duke', name: 'Duke', mascot: 'Blue Devils', conference: 'ACC', primaryColor: '#003087', secondaryColor: '#FFFFFF', stadium: 'Wallace Wade Stadium', isRival: false },
  { id: 'florida-state', name: 'Florida State', mascot: 'Seminoles', conference: 'ACC', primaryColor: '#782F40', secondaryColor: '#CEB888', stadium: 'Doak Campbell Stadium', isRival: false },
  { id: 'georgia-tech', name: 'Georgia Tech', mascot: 'Yellow Jackets', conference: 'ACC', primaryColor: '#003057', secondaryColor: '#B3A369', stadium: 'Bobby Dodd Stadium', isRival: false },
  { id: 'louisville', name: 'Louisville', mascot: 'Cardinals', conference: 'ACC', primaryColor: '#AD0000', secondaryColor: '#000000', stadium: 'L&N Stadium', isRival: false },
  { id: 'miami', name: 'Miami', mascot: 'Hurricanes', conference: 'ACC', primaryColor: '#005030', secondaryColor: '#F47321', stadium: 'Hard Rock Stadium', isRival: false },
  { id: 'north-carolina', name: 'North Carolina', mascot: 'Tar Heels', conference: 'ACC', primaryColor: '#7BAFD4', secondaryColor: '#FFFFFF', stadium: 'Kenan Memorial Stadium', isRival: false },
  { id: 'nc-state', name: 'NC State', mascot: 'Wolfpack', conference: 'ACC', primaryColor: '#CC0000', secondaryColor: '#000000', stadium: 'Carter-Finley Stadium', isRival: false },
  { id: 'pitt', name: 'Pittsburgh', mascot: 'Panthers', conference: 'ACC', primaryColor: '#003594', secondaryColor: '#FFB81C', stadium: 'Acrisure Stadium', isRival: false },
  { id: 'syracuse', name: 'Syracuse', mascot: 'Orange', conference: 'ACC', primaryColor: '#F76900', secondaryColor: '#002D62', stadium: 'JMA Wireless Dome', isRival: false },
  { id: 'virginia', name: 'Virginia', mascot: 'Cavaliers', conference: 'ACC', primaryColor: '#232D4B', secondaryColor: '#F84C1E', stadium: 'Scott Stadium', isRival: false },
  { id: 'virginia-tech', name: 'Virginia Tech', mascot: 'Hokies', conference: 'ACC', primaryColor: '#660000', secondaryColor: '#FF6600', stadium: 'Lane Stadium', isRival: false },
  { id: 'wake-forest', name: 'Wake Forest', mascot: 'Demon Deacons', conference: 'ACC', primaryColor: '#9E7E38', secondaryColor: '#000000', stadium: 'Allegacy Federal Credit Union Stadium', isRival: false },

  // Big 12
  { id: 'baylor', name: 'Baylor', mascot: 'Bears', conference: 'Big 12', primaryColor: '#003015', secondaryColor: '#FECB00', stadium: 'McLane Stadium', isRival: false },
  { id: 'byu', name: 'BYU', mascot: 'Cougars', conference: 'Big 12', primaryColor: '#002E5D', secondaryColor: '#FFFFFF', stadium: 'LaVell Edwards Stadium', isRival: false },
  { id: 'cincinnati', name: 'Cincinnati', mascot: 'Bearcats', conference: 'Big 12', primaryColor: '#E00122', secondaryColor: '#000000', stadium: 'Nippert Stadium', isRival: false },
  { id: 'houston', name: 'Houston', mascot: 'Cougars', conference: 'Big 12', primaryColor: '#C8102E', secondaryColor: '#FFFFFF', stadium: 'TDECU Stadium', isRival: false },
  { id: 'iowa-state', name: 'Iowa State', mascot: 'Cyclones', conference: 'Big 12', primaryColor: '#C8102E', secondaryColor: '#F1BE48', stadium: 'Jack Trice Stadium', isRival: false },
  { id: 'kansas', name: 'Kansas', mascot: 'Jayhawks', conference: 'Big 12', primaryColor: '#0051BA', secondaryColor: '#E8000D', stadium: 'David Booth Kansas Memorial Stadium', isRival: false },
  { id: 'kansas-state', name: 'Kansas State', mascot: 'Wildcats', conference: 'Big 12', primaryColor: '#512888', secondaryColor: '#FFFFFF', stadium: 'Bill Snyder Family Stadium', isRival: false },
  { id: 'oklahoma-state', name: 'Oklahoma State', mascot: 'Cowboys', conference: 'Big 12', primaryColor: '#FF7300', secondaryColor: '#000000', stadium: 'Boone Pickens Stadium', isRival: false },
  { id: 'tcu', name: 'TCU', mascot: 'Horned Frogs', conference: 'Big 12', primaryColor: '#4D1979', secondaryColor: '#FFFFFF', stadium: 'Amon G. Carter Stadium', isRival: false },
  { id: 'texas-tech', name: 'Texas Tech', mascot: 'Red Raiders', conference: 'Big 12', primaryColor: '#CC0000', secondaryColor: '#000000', stadium: 'Jones AT&T Stadium', isRival: false },
  { id: 'ucf', name: 'UCF', mascot: 'Knights', conference: 'Big 12', primaryColor: '#BA9B37', secondaryColor: '#000000', stadium: 'FBC Mortgage Stadium', isRival: false },
  { id: 'west-virginia', name: 'West Virginia', mascot: 'Mountaineers', conference: 'Big 12', primaryColor: '#002855', secondaryColor: '#EAAA00', stadium: 'Milan Puskar Stadium', isRival: false },

  // Big Ten
  { id: 'illinois', name: 'Illinois', mascot: 'Fighting Illini', conference: 'Big Ten', primaryColor: '#E84A27', secondaryColor: '#131F33', stadium: 'Memorial Stadium', isRival: false },
  { id: 'indiana', name: 'Indiana', mascot: 'Hoosiers', conference: 'Big Ten', primaryColor: '#990000', secondaryColor: '#EEEDEB', stadium: 'Memorial Stadium', isRival: false },
  { id: 'iowa', name: 'Iowa', mascot: 'Hawkeyes', conference: 'Big Ten', primaryColor: '#000000', secondaryColor: '#FFCD00', stadium: 'Kinnick Stadium', isRival: false },
  { id: 'maryland', name: 'Maryland', mascot: 'Terrapins', conference: 'Big Ten', primaryColor: '#E03A3E', secondaryColor: '#FFD520', stadium: 'SECU Stadium', isRival: false },
  { id: 'michigan', name: 'Michigan', mascot: 'Wolverines', conference: 'Big Ten', primaryColor: '#00274C', secondaryColor: '#FFCB05', stadium: 'Michigan Stadium', isRival: false },
  { id: 'michigan-state', name: 'Michigan State', mascot: 'Spartans', conference: 'Big Ten', primaryColor: '#18453B', secondaryColor: '#FFFFFF', stadium: 'Spartan Stadium', isRival: false },
  { id: 'minnesota', name: 'Minnesota', mascot: 'Golden Gophers', conference: 'Big Ten', primaryColor: '#7A0019', secondaryColor: '#FFCC33', stadium: 'Huntington Bank Stadium', isRival: false },
  { id: 'nebraska', name: 'Nebraska', mascot: 'Cornhuskers', conference: 'Big Ten', primaryColor: '#E41C38', secondaryColor: '#FDF3E7', stadium: 'Memorial Stadium', isRival: false },
  { id: 'northwestern', name: 'Northwestern', mascot: 'Wildcats', conference: 'Big Ten', primaryColor: '#4E2A84', secondaryColor: '#FFFFFF', stadium: 'Ryan Field', isRival: false },
  { id: 'ohio-state', name: 'Ohio State', mascot: 'Buckeyes', conference: 'Big Ten', primaryColor: '#BB0000', secondaryColor: '#666666', stadium: 'Ohio Stadium', isRival: false },
  { id: 'oregon', name: 'Oregon', mascot: 'Ducks', conference: 'Big Ten', primaryColor: '#036936', secondaryColor: '#FEE123', stadium: 'Autzen Stadium', isRival: false },
  { id: 'penn-state', name: 'Penn State', mascot: 'Nittany Lions', conference: 'Big Ten', primaryColor: '#041E42', secondaryColor: '#FFFFFF', stadium: 'Beaver Stadium', isRival: false },
  { id: 'purdue', name: 'Purdue', mascot: 'Boilermakers', conference: 'Big Ten', primaryColor: '#CEB888', secondaryColor: '#000000', stadium: 'Ross-Ade Stadium', isRival: false },
  { id: 'rutgers', name: 'Rutgers', mascot: 'Scarlet Knights', conference: 'Big Ten', primaryColor: '#CC0033', secondaryColor: '#5F6A72', stadium: 'SHI Stadium', isRival: false },
  { id: 'ucla', name: 'UCLA', mascot: 'Bruins', conference: 'Big Ten', primaryColor: '#2D68C4', secondaryColor: '#F2A900', stadium: 'Rose Bowl', isRival: false },
  { id: 'usc', name: 'USC', mascot: 'Trojans', conference: 'Big Ten', primaryColor: '#990000', secondaryColor: '#FFC72C', stadium: 'Los Angeles Memorial Coliseum', isRival: false },
  { id: 'washington', name: 'Washington', mascot: 'Huskies', conference: 'Big Ten', primaryColor: '#4B2E83', secondaryColor: '#B7A57A', stadium: 'Husky Stadium', isRival: false },
  { id: 'wisconsin', name: 'Wisconsin', mascot: 'Badgers', conference: 'Big Ten', primaryColor: '#C5050C', secondaryColor: '#FFFFFF', stadium: 'Camp Randall Stadium', isRival: false },

  // SEC
  { id: 'alabama', name: 'Alabama', mascot: 'Crimson Tide', conference: 'SEC', primaryColor: '#9E1B32', secondaryColor: '#FFFFFF', stadium: 'Bryant-Denny Stadium', isRival: false },
  { id: 'arkansas', name: 'Arkansas', mascot: 'Razorbacks', conference: 'SEC', primaryColor: '#9D2235', secondaryColor: '#FFFFFF', stadium: 'Donald W. Reynolds Razorback Stadium', isRival: false },
  { id: 'auburn', name: 'Auburn', mascot: 'Tigers', conference: 'SEC', primaryColor: '#0C2340', secondaryColor: '#F26522', stadium: 'Jordan-Hare Stadium', isRival: false },
  { id: 'florida', name: 'Florida', mascot: 'Gators', conference: 'SEC', primaryColor: '#0021A5', secondaryColor: '#FA4616', stadium: 'Ben Hill Griffin Stadium', isRival: false },
  { id: 'georgia', name: 'Georgia', mascot: 'Bulldogs', conference: 'SEC', primaryColor: '#BA0C2F', secondaryColor: '#000000', stadium: 'Sanford Stadium', isRival: false },
  { id: 'kentucky', name: 'Kentucky', mascot: 'Wildcats', conference: 'SEC', primaryColor: '#0033A0', secondaryColor: '#FFFFFF', stadium: 'Kroger Field', isRival: false },
  { id: 'lsu', name: 'LSU', mascot: 'Tigers', conference: 'SEC', primaryColor: '#461D7C', secondaryColor: '#FDD023', stadium: 'Tiger Stadium', isRival: false },
  { id: 'mississippi-state', name: 'Mississippi State', mascot: 'Bulldogs', conference: 'SEC', primaryColor: '#660000', secondaryColor: '#FFFFFF', stadium: 'Davis Wade Stadium', isRival: false },
  { id: 'missouri', name: 'Missouri', mascot: 'Tigers', conference: 'SEC', primaryColor: '#F1B82D', secondaryColor: '#000000', stadium: 'Faurot Field', isRival: false },
  { id: 'oklahoma', name: 'Oklahoma', mascot: 'Sooners', conference: 'SEC', primaryColor: '#841617', secondaryColor: '#FFC700', stadium: 'Gaylord Family Oklahoma Memorial Stadium', isRival: false },
  { id: 'ole-miss', name: 'Ole Miss', mascot: 'Rebels', conference: 'SEC', primaryColor: '#14213D', secondaryColor: '#CE1126', stadium: 'Vaught-Hemingway Stadium', isRival: false },
  { id: 'south-carolina', name: 'South Carolina', mascot: 'Gamecocks', conference: 'SEC', primaryColor: '#73000A', secondaryColor: '#000000', stadium: 'Williams-Brice Stadium', isRival: false },
  { id: 'tennessee', name: 'Tennessee', mascot: 'Volunteers', conference: 'SEC', primaryColor: '#FF8200', secondaryColor: '#FFFFFF', stadium: 'Neyland Stadium', isRival: false },
  { id: 'texas', name: 'Texas', mascot: 'Longhorns', conference: 'SEC', primaryColor: '#BF5700', secondaryColor: '#FFFFFF', stadium: 'Darrell K Royal-Texas Memorial Stadium', isRival: false },
  { id: 'texas-am', name: 'Texas A&M', mascot: 'Aggies', conference: 'SEC', primaryColor: '#500000', secondaryColor: '#FFFFFF', stadium: 'Kyle Field', isRival: false },
  { id: 'vanderbilt', name: 'Vanderbilt', mascot: 'Commodores', conference: 'SEC', primaryColor: '#866D4B', secondaryColor: '#000000', stadium: 'FirstBank Stadium', isRival: false },

  // Pac-12 (Note: Many teams have moved to other conferences, but including legacy Pac-12 teams)
  { id: 'arizona', name: 'Arizona', mascot: 'Wildcats', conference: 'Big 12', primaryColor: '#003366', secondaryColor: '#CC0033', stadium: 'Arizona Stadium', isRival: false },
  { id: 'arizona-state', name: 'Arizona State', mascot: 'Sun Devils', conference: 'Big 12', primaryColor: '#8C1D40', secondaryColor: '#FFC627', stadium: 'Mountain America Stadium', isRival: false },
  { id: 'california', name: 'California', mascot: 'Golden Bears', conference: 'ACC', primaryColor: '#003262', secondaryColor: '#FDB515', stadium: 'California Memorial Stadium', isRival: false },
  { id: 'colorado', name: 'Colorado', mascot: 'Buffaloes', conference: 'Big 12', primaryColor: '#CFB87C', secondaryColor: '#000000', stadium: 'Folsom Field', isRival: false },
  { id: 'oregon-state', name: 'Oregon State', mascot: 'Beavers', conference: 'Pac-12', primaryColor: '#DC4405', secondaryColor: '#000000', stadium: 'Reser Stadium', isRival: false },
  { id: 'stanford', name: 'Stanford', mascot: 'Cardinal', conference: 'ACC', primaryColor: '#8C1515', secondaryColor: '#FFFFFF', stadium: 'Stanford Stadium', isRival: false },
  { id: 'utah', name: 'Utah', mascot: 'Utes', conference: 'Big 12', primaryColor: '#CC0000', secondaryColor: '#000000', stadium: 'Rice-Eccles Stadium', isRival: false },
  { id: 'washington-state', name: 'Washington State', mascot: 'Cougars', conference: 'Pac-12', primaryColor: '#981E32', secondaryColor: '#5E6A71', stadium: 'Martin Stadium', isRival: false },

  // American Athletic Conference
  { id: 'charlotte', name: 'Charlotte', mascot: '49ers', conference: 'American', primaryColor: '#005035', secondaryColor: '#B9975B', stadium: 'Jerry Richardson Stadium', isRival: false },
  { id: 'east-carolina', name: 'East Carolina', mascot: 'Pirates', conference: 'American', primaryColor: '#592A8A', secondaryColor: '#FDC935', stadium: 'Dowdy-Ficklen Stadium', isRival: false },
  { id: 'fau', name: 'Florida Atlantic', mascot: 'Owls', conference: 'American', primaryColor: '#003366', secondaryColor: '#CC0000', stadium: 'FAU Stadium', isRival: false },
  { id: 'memphis', name: 'Memphis', mascot: 'Tigers', conference: 'American', primaryColor: '#003087', secondaryColor: '#8A8D8F', stadium: 'Simmons Bank Liberty Stadium', isRival: false },
  { id: 'navy', name: 'Navy', mascot: 'Midshipmen', conference: 'American', primaryColor: '#00205B', secondaryColor: '#C5B783', stadium: 'Navy-Marine Corps Memorial Stadium', isRival: false },
  { id: 'north-texas', name: 'North Texas', mascot: 'Mean Green', conference: 'American', primaryColor: '#00853E', secondaryColor: '#000000', stadium: 'DATCU Stadium', isRival: false },
  { id: 'rice', name: 'Rice', mascot: 'Owls', conference: 'American', primaryColor: '#00205B', secondaryColor: '#C1C6C8', stadium: 'Rice Stadium', isRival: false },
  { id: 'smu', name: 'SMU', mascot: 'Mustangs', conference: 'ACC', primaryColor: '#CC0035', secondaryColor: '#0033A0', stadium: 'Gerald J. Ford Stadium', isRival: false },
  { id: 'south-florida', name: 'South Florida', mascot: 'Bulls', conference: 'American', primaryColor: '#006747', secondaryColor: '#CFC493', stadium: 'Raymond James Stadium', isRival: false },
  { id: 'temple', name: 'Temple', mascot: 'Owls', conference: 'American', primaryColor: '#9D2235', secondaryColor: '#FFFFFF', stadium: 'Lincoln Financial Field', isRival: false },
  { id: 'tulane', name: 'Tulane', mascot: 'Green Wave', conference: 'American', primaryColor: '#006747', secondaryColor: '#418FDE', stadium: 'Yulman Stadium', isRival: false },
  { id: 'tulsa', name: 'Tulsa', mascot: 'Golden Hurricane', conference: 'American', primaryColor: '#003C7D', secondaryColor: '#D4AF37', stadium: 'H.A. Chapman Stadium', isRival: false },
  { id: 'uab', name: 'UAB', mascot: 'Blazers', conference: 'American', primaryColor: '#006341', secondaryColor: '#B5985A', stadium: 'Protective Stadium', isRival: false },
  { id: 'utsa', name: 'UTSA', mascot: 'Roadrunners', conference: 'American', primaryColor: '#0C2340', secondaryColor: '#F15A22', stadium: 'Alamodome', isRival: false },

  // Conference USA
  { id: 'fiu', name: 'FIU', mascot: 'Panthers', conference: 'Conference USA', primaryColor: '#081E3F', secondaryColor: '#B6862C', stadium: 'FIU Stadium', isRival: false },
  { id: 'jacksonville-state', name: 'Jacksonville State', mascot: 'Gamecocks', conference: 'Conference USA', primaryColor: '#CC0000', secondaryColor: '#000000', stadium: 'AmFirst Stadium', isRival: false },
  { id: 'kennesaw-state', name: 'Kennesaw State', mascot: 'Owls', conference: 'Conference USA', primaryColor: '#000000', secondaryColor: '#FDBB30', stadium: 'Fifth Third Stadium', isRival: false },
  { id: 'liberty', name: 'Liberty', mascot: 'Flames', conference: 'Conference USA', primaryColor: '#002D62', secondaryColor: '#C41230', stadium: 'Williams Stadium', isRival: false },
  { id: 'louisiana-tech', name: 'Louisiana Tech', mascot: 'Bulldogs', conference: 'Conference USA', primaryColor: '#002F8B', secondaryColor: '#E31E24', stadium: 'Joe Aillet Stadium', isRival: false },
  { id: 'middle-tennessee', name: 'Middle Tennessee', mascot: 'Blue Raiders', conference: 'Conference USA', primaryColor: '#0066CC', secondaryColor: '#000000', stadium: 'Johnny Floyd Stadium', isRival: false },
  { id: 'new-mexico-state', name: 'New Mexico State', mascot: 'Aggies', conference: 'Conference USA', primaryColor: '#891216', secondaryColor: '#000000', stadium: 'Aggie Memorial Stadium', isRival: false },
  { id: 'sam-houston', name: 'Sam Houston', mascot: 'Bearkats', conference: 'Conference USA', primaryColor: '#F68B1F', secondaryColor: '#002554', stadium: 'Bowers Stadium', isRival: false },
  { id: 'utep', name: 'UTEP', mascot: 'Miners', conference: 'Conference USA', primaryColor: '#FF6600', secondaryColor: '#002D62', stadium: 'Sun Bowl Stadium', isRival: false },
  { id: 'western-kentucky', name: 'Western Kentucky', mascot: 'Hilltoppers', conference: 'Conference USA', primaryColor: '#C60C30', secondaryColor: '#FFFFFF', stadium: 'Houchens Industries-L.T. Smith Stadium', isRival: false },

  // Mountain West
  { id: 'air-force', name: 'Air Force', mascot: 'Falcons', conference: 'Mountain West', primaryColor: '#003087', secondaryColor: '#8A8D8F', stadium: 'Falcon Stadium', isRival: false },
  { id: 'boise-state', name: 'Boise State', mascot: 'Broncos', conference: 'Mountain West', primaryColor: '#0033A0', secondaryColor: '#D64309', stadium: 'Albertsons Stadium', isRival: false },
  { id: 'colorado-state', name: 'Colorado State', mascot: 'Rams', conference: 'Mountain West', primaryColor: '#1E4D2B', secondaryColor: '#C8C372', stadium: 'Canvas Stadium', isRival: false },
  { id: 'fresno-state', name: 'Fresno State', mascot: 'Bulldogs', conference: 'Mountain West', primaryColor: '#DB0032', secondaryColor: '#002E6D', stadium: 'Valley Children\'s Stadium', isRival: false },
  { id: 'hawaii', name: 'Hawaii', mascot: 'Rainbow Warriors', conference: 'Mountain West', primaryColor: '#024731', secondaryColor: '#C8C8C8', stadium: 'Clarence T.C. Ching Athletics Complex', isRival: false },
  { id: 'nevada', name: 'Nevada', mascot: 'Wolf Pack', conference: 'Mountain West', primaryColor: '#003366', secondaryColor: '#807F84', stadium: 'Mackay Stadium', isRival: false },
  { id: 'new-mexico', name: 'New Mexico', mascot: 'Lobos', conference: 'Mountain West', primaryColor: '#BA0C2F', secondaryColor: '#63666A', stadium: 'University Stadium', isRival: false },
  { id: 'san-diego-state', name: 'San Diego State', mascot: 'Aztecs', conference: 'Mountain West', primaryColor: '#A6192E', secondaryColor: '#000000', stadium: 'Snapdragon Stadium', isRival: false },
  { id: 'san-jose-state', name: 'San Jose State', mascot: 'Spartans', conference: 'Mountain West', primaryColor: '#0055A2', secondaryColor: '#E5A823', stadium: 'CEFCU Stadium', isRival: false },
  { id: 'unlv', name: 'UNLV', mascot: 'Rebels', conference: 'Mountain West', primaryColor: '#CF0A2C', secondaryColor: '#666666', stadium: 'Allegiant Stadium', isRival: false },
  { id: 'utah-state', name: 'Utah State', mascot: 'Aggies', conference: 'Mountain West', primaryColor: '#0F2439', secondaryColor: '#A8A8A8', stadium: 'Maverik Stadium', isRival: false },
  { id: 'wyoming', name: 'Wyoming', mascot: 'Cowboys', conference: 'Mountain West', primaryColor: '#492F24', secondaryColor: '#FFC425', stadium: 'War Memorial Stadium', isRival: false },

  // Sun Belt
  { id: 'app-state', name: 'Appalachian State', mascot: 'Mountaineers', conference: 'Sun Belt', primaryColor: '#222222', secondaryColor: '#FFCC00', stadium: 'Kidd Brewer Stadium', isRival: false },
  { id: 'arkansas-state', name: 'Arkansas State', mascot: 'Red Wolves', conference: 'Sun Belt', primaryColor: '#CC092F', secondaryColor: '#000000', stadium: 'Centennial Bank Stadium', isRival: false },
  { id: 'coastal-carolina', name: 'Coastal Carolina', mascot: 'Chanticleers', conference: 'Sun Belt', primaryColor: '#006F71', secondaryColor: '#A27752', stadium: 'Brooks Stadium', isRival: false },
  { id: 'georgia-southern', name: 'Georgia Southern', mascot: 'Eagles', conference: 'Sun Belt', primaryColor: '#011E41', secondaryColor: '#A3AAAE', stadium: 'Paulson Stadium', isRival: false },
  { id: 'georgia-state', name: 'Georgia State', mascot: 'Panthers', conference: 'Sun Belt', primaryColor: '#0039A6', secondaryColor: '#CC0000', stadium: 'Center Parc Stadium', isRival: false },
  { id: 'james-madison', name: 'James Madison', mascot: 'Dukes', conference: 'Sun Belt', primaryColor: '#450084', secondaryColor: '#CBB778', stadium: 'Bridgeforth Stadium', isRival: false },
  { id: 'louisiana', name: 'Louisiana', mascot: 'Ragin\' Cajuns', conference: 'Sun Belt', primaryColor: '#E4002B', secondaryColor: '#000000', stadium: 'Cajun Field', isRival: false },
  { id: 'louisiana-monroe', name: 'Louisiana Monroe', mascot: 'Warhawks', conference: 'Sun Belt', primaryColor: '#840029', secondaryColor: '#EAAB00', stadium: 'Malone Stadium', isRival: false },
  { id: 'marshall', name: 'Marshall', mascot: 'Thundering Herd', conference: 'Sun Belt', primaryColor: '#00B140', secondaryColor: '#000000', stadium: 'Joan C. Edwards Stadium', isRival: false },
  { id: 'old-dominion', name: 'Old Dominion', mascot: 'Monarchs', conference: 'Sun Belt', primaryColor: '#003057', secondaryColor: '#7C878E', stadium: 'S.B. Ballard Stadium', isRival: false },
  { id: 'south-alabama', name: 'South Alabama', mascot: 'Jaguars', conference: 'Sun Belt', primaryColor: '#00205B', secondaryColor: '#BF0D3E', stadium: 'Hancock Whitney Stadium', isRival: false },
  { id: 'southern-miss', name: 'Southern Miss', mascot: 'Golden Eagles', conference: 'Sun Belt', primaryColor: '#000000', secondaryColor: '#FFAB00', stadium: 'M.M. Roberts Stadium', isRival: false },
  { id: 'texas-state', name: 'Texas State', mascot: 'Bobcats', conference: 'Sun Belt', primaryColor: '#501214', secondaryColor: '#8B6F47', stadium: 'Bobcat Stadium', isRival: false },
  { id: 'troy', name: 'Troy', mascot: 'Trojans', conference: 'Sun Belt', primaryColor: '#8B0A1A', secondaryColor: '#000000', stadium: 'Veterans Memorial Stadium', isRival: false },

  // MAC
  { id: 'akron', name: 'Akron', mascot: 'Zips', conference: 'MAC', primaryColor: '#041E42', secondaryColor: '#A89968', stadium: 'InfoCision Stadium', isRival: false },
  { id: 'ball-state', name: 'Ball State', mascot: 'Cardinals', conference: 'MAC', primaryColor: '#BA0C2F', secondaryColor: '#FFFFFF', stadium: 'Scheumann Stadium', isRival: false },
  { id: 'bgsu', name: 'Bowling Green', mascot: 'Falcons', conference: 'MAC', primaryColor: '#FE5000', secondaryColor: '#663300', stadium: 'Doyt L. Perry Stadium', isRival: false },
  { id: 'buffalo', name: 'Buffalo', mascot: 'Bulls', conference: 'MAC', primaryColor: '#005BBB', secondaryColor: '#FFFFFF', stadium: 'UB Stadium', isRival: false },
  { id: 'central-michigan', name: 'Central Michigan', mascot: 'Chippewas', conference: 'MAC', primaryColor: '#6A0032', secondaryColor: '#FFC82E', stadium: 'Kelly/Shorts Stadium', isRival: false },
  { id: 'eastern-michigan', name: 'Eastern Michigan', mascot: 'Eagles', conference: 'MAC', primaryColor: '#006633', secondaryColor: '#FFFFFF', stadium: 'Rynearson Stadium', isRival: false },
  { id: 'kent-state', name: 'Kent State', mascot: 'Golden Flashes', conference: 'MAC', primaryColor: '#002664', secondaryColor: '#EAAB00', stadium: 'Dix Stadium', isRival: false },
  { id: 'miami-oh', name: 'Miami (OH)', mascot: 'RedHawks', conference: 'MAC', primaryColor: '#B61E2E', secondaryColor: '#FFFFFF', stadium: 'Yager Stadium', isRival: false },
  { id: 'northern-illinois', name: 'Northern Illinois', mascot: 'Huskies', conference: 'MAC', primaryColor: '#BA0C2F', secondaryColor: '#000000', stadium: 'Huskie Stadium', isRival: false },
  { id: 'ohio', name: 'Ohio', mascot: 'Bobcats', conference: 'MAC', primaryColor: '#00694E', secondaryColor: '#000000', stadium: 'Peden Stadium', isRival: false },
  { id: 'toledo', name: 'Toledo', mascot: 'Rockets', conference: 'MAC', primaryColor: '#003E7E', secondaryColor: '#FFD700', stadium: 'Glass Bowl', isRival: false },
  { id: 'western-michigan', name: 'Western Michigan', mascot: 'Broncos', conference: 'MAC', primaryColor: '#6C4415', secondaryColor: '#FFCB05', stadium: 'Waldo Stadium', isRival: false },

  // Independents
  { id: 'army', name: 'Army', mascot: 'Black Knights', conference: 'Independent', primaryColor: '#000000', secondaryColor: '#B09A57', stadium: 'Michie Stadium', isRival: false },
  { id: 'notre-dame', name: 'Notre Dame', mascot: 'Fighting Irish', conference: 'Independent', primaryColor: '#0C2340', secondaryColor: '#C99700', stadium: 'Notre Dame Stadium', isRival: false },
  { id: 'umass', name: 'UMass', mascot: 'Minutemen', conference: 'Independent', primaryColor: '#881C1C', secondaryColor: '#000000', stadium: 'Warren McGuirk Alumni Stadium', isRival: false },
  { id: 'uconn', name: 'UConn', mascot: 'Huskies', conference: 'Independent', primaryColor: '#000E2F', secondaryColor: '#FFFFFF', stadium: 'Pratt & Whitney Stadium', isRival: false },
];
</file>

<file path="src/data/dummyData.ts">
import type { Game, Player, Team, Season, Coach, Recruit } from '../types/index';
import { division1Teams } from './division1Teams';

// Use real Division 1 teams
export const dummyTeams: Team[] = division1Teams;

// Player data
export const dummyPlayers: Player[] = [
  {
    id: 'player-1',
    name: 'Jake Thompson',
    position: 'QB',
    class: 'JR',
    jerseyNumber: 7,
    hometown: 'Dallas, TX',
    statsBySeason: {
      '2024': { passingYards: 3245, passingTDs: 28, interceptions: 8 },
      '2023': { passingYards: 2890, passingTDs: 22, interceptions: 12 }
    },
    awards: ['2024 All-Conference Second Team'],
  },
  {
    id: 'player-2',
    name: 'Marcus Johnson',
    position: 'RB',
    class: 'SR',
    jerseyNumber: 22,
    hometown: 'Houston, TX',
    statsBySeason: {
      '2024': { rushingYards: 1245, rushingTDs: 15, receptions: 28 },
      '2023': { rushingYards: 987, rushingTDs: 11, receptions: 22 }
    },
    awards: ['2024 All-Conference First Team', '2023 Freshman of the Year'],
  },
  {
    id: 'player-3',
    name: 'DeAndre Williams',
    position: 'WR',
    class: 'SO',
    jerseyNumber: 88,
    hometown: 'Miami, FL',
    statsBySeason: {
      '2024': { receptions: 67, receivingYards: 989, receivingTDs: 9 }
    },
  },
  {
    id: 'player-4',
    name: 'Chris Miller',
    position: 'LB',
    class: 'JR',
    jerseyNumber: 52,
    hometown: 'Chicago, IL',
    statsBySeason: {
      '2024': { tackles: 98, sacks: 7.5, forcedFumbles: 2 }
    },
  },
  {
    id: 'player-5',
    name: 'Tyler Anderson',
    position: 'OL',
    class: 'SR',
    jerseyNumber: 75,
    hometown: 'Denver, CO',
    statsBySeason: {},
    awards: ['2024 Team Captain'],
  },
];

// Game data - Full 2024 season (using real team names)
export const dummyGames: Game[] = [
  {
    id: 'game-1',
    date: '2024-09-02',
    week: 1,
    opponent: 'Rice',
    location: 'Home',
    result: 'W',
    score: { for: 45, against: 17 },
    stats: {
      passingYards: 342,
      passingTDs: 4,
      rushingYards: 189,
      rushingTDs: 2,
      turnovers: 1,
    },
    notes: 'Great season opener! Jake threw 4 TDs in his first game as starter.',
  },
  {
    id: 'game-2',
    date: '2024-09-09',
    week: 2,
    opponent: 'Texas Tech',
    location: 'Away',
    result: 'L',
    score: { for: 24, against: 31 },
    rivalry: true,
    conferenceGame: true,
    stats: {
      passingYards: 287,
      passingTDs: 2,
      rushingYards: 98,
      rushingTDs: 1,
      turnovers: 3,
      interceptions: 2,
    },
    notes: 'Tough loss to our rivals. Too many turnovers in the 4th quarter.',
  },
  {
    id: 'game-3',
    date: '2024-09-16',
    week: 3,
    opponent: 'Baylor',
    location: 'Home',
    result: 'W',
    score: { for: 38, against: 20 },
    conferenceGame: true,
    stats: {
      passingYards: 310,
      passingTDs: 3,
      rushingYards: 205,
      rushingTDs: 2,
      turnovers: 0,
    },
    notes: 'Bounce back win! Marcus had 150+ rushing yards.',
  },
  {
    id: 'game-4',
    date: '2024-09-23',
    week: 4,
    opponent: 'Arizona State',
    location: 'Neutral',
    result: 'W',
    score: { for: 42, against: 35 },
    stats: {
      passingYards: 398,
      passingTDs: 5,
      rushingYards: 145,
      rushingTDs: 1,
      turnovers: 1,
    },
    notes: 'High-scoring thriller! Jake had a career day with 5 passing TDs.',
  },
  {
    id: 'game-5',
    date: '2024-09-30',
    week: 5,
    opponent: 'Kansas',
    location: 'Home',
    result: 'W',
    score: { for: 52, against: 14 },
    conferenceGame: true,
    stats: {
      passingYards: 425,
      passingTDs: 5,
      rushingYards: 234,
      rushingTDs: 3,
      turnovers: 0,
    },
    notes: 'Dominant performance! Defense forced 4 turnovers.',
  },
  {
    id: 'game-6',
    date: '2024-10-07',
    week: 6,
    opponent: 'TCU',
    location: 'Away',
    result: 'W',
    score: { for: 31, against: 28 },
    conferenceGame: true,
    stats: {
      passingYards: 289,
      passingTDs: 2,
      rushingYards: 167,
      rushingTDs: 2,
      turnovers: 1,
    },
    notes: 'Close win on the road. Game-winning FG with 0:03 left!',
  },
  {
    id: 'game-7',
    date: '2024-10-14',
    week: 7,
    opponent: 'Air Force',
    location: 'Home',
    result: 'L',
    score: { for: 21, against: 24 },
    conferenceGame: false,
    stats: {
      passingYards: 198,
      passingTDs: 1,
      rushingYards: 89,
      rushingTDs: 2,
      turnovers: 2,
      interceptions: 1,
    },
    notes: 'Upset loss at home. Offense struggled in the red zone.',
  },
  {
    id: 'game-8',
    date: '2024-10-21',
    week: 8,
    opponent: 'Iowa State',
    location: 'Away',
    result: 'W',
    score: { for: 35, against: 17 },
    conferenceGame: true,
    stats: {
      passingYards: 312,
      passingTDs: 3,
      rushingYards: 198,
      rushingTDs: 2,
      turnovers: 0,
    },
    notes: 'Strong road win. Defense held them to 17 points.',
  },
  {
    id: 'game-9',
    date: '2024-10-28',
    week: 9,
    opponent: 'West Virginia',
    location: 'Home',
    result: 'W',
    score: { for: 45, against: 38 },
    conferenceGame: true,
    stats: {
      passingYards: 456,
      passingTDs: 5,
      rushingYards: 134,
      rushingTDs: 1,
      turnovers: 2,
    },
    notes: 'Shootout victory! Over 900 yards of total offense in the game.',
  },
  {
    id: 'game-10',
    date: '2024-11-04',
    week: 10,
    opponent: 'Cincinnati',
    location: 'Away',
    result: 'W',
    score: { for: 28, against: 14 },
    conferenceGame: true,
    stats: {
      passingYards: 267,
      passingTDs: 2,
      rushingYards: 178,
      rushingTDs: 2,
      turnovers: 1,
    },
    notes: 'Solid win to stay in conference championship hunt.',
  },
  {
    id: 'game-11',
    date: '2024-11-11',
    week: 11,
    opponent: 'UNLV',
    location: 'Home',
    result: 'W',
    score: { for: 41, against: 24 },
    conferenceGame: false,
    stats: {
      passingYards: 334,
      passingTDs: 4,
      rushingYards: 201,
      rushingTDs: 1,
      turnovers: 0,
    },
    notes: 'Senior day victory! Great send-off for the seniors.',
  },
  {
    id: 'game-12',
    date: '2024-11-18',
    week: 12,
    opponent: 'Oklahoma State',
    location: 'Away',
    result: 'L',
    score: { for: 31, against: 35 },
    conferenceGame: true,
    rivalry: true,
    stats: {
      passingYards: 389,
      passingTDs: 3,
      rushingYards: 112,
      rushingTDs: 1,
      turnovers: 2,
      interceptions: 1,
    },
    notes: 'Heartbreaking loss to end regular season. OT thriller.',
  },
  {
    id: 'game-13',
    date: '2024-12-07',
    week: 13,
    opponent: 'Texas Tech',
    location: 'Neutral',
    result: 'W',
    score: { for: 38, against: 31 },
    conferenceGame: true,
    rivalry: true,
    stats: {
      passingYards: 412,
      passingTDs: 4,
      rushingYards: 156,
      rushingTDs: 1,
      turnovers: 1,
    },
    notes: 'Conference Championship WIN! Revenge against Tech!',
  },
  {
    id: 'game-14',
    date: '2024-12-28',
    week: 14,
    opponent: 'UCLA',
    location: 'Neutral',
    result: 'W',
    score: { for: 42, against: 35 },
    bowlGame: 'Fiesta Bowl',
    stats: {
      passingYards: 445,
      passingTDs: 5,
      rushingYards: 189,
      rushingTDs: 1,
      turnovers: 0,
    },
    notes: 'Bowl victory! Jake throws for 5 TDs in his final game.',
  },
];

// Season data
export const dummySeason: Season = {
  id: 'season-2024',
  year: 2024,
  teamName: 'Kansas State Wildcats',
  conference: 'Big 12',
  games: ['game-1', 'game-2', 'game-3', 'game-4', 'game-5', 'game-6', 'game-7', 'game-8', 'game-9', 'game-10', 'game-11', 'game-12', 'game-13', 'game-14'],
  conferenceRecord: { wins: 7, losses: 2 },
  overallRecord: { wins: 11, losses: 3 },
  ranking: 15,
  coachId: 'coach-1',
  captains: ['player-2', 'player-5'],
  preseasonGoals: [
    'Win 10+ games',
    'Beat Texas Tech',
    'Win conference championship',
    'Make playoff'
  ],
};

// Coach data
export const dummyCoach: Coach = {
  name: 'Mike Peterson',
  startYear: 2022,
  record: '19-8',
  style: 'Spread Offense',
  hotSeat: false,
};

// Helper function to generate random game
export function generateRandomGame(weekNumber: number, seasonYear: number): Game {
  const opponents = dummyTeams.filter(t => t.id !== 'kansas-state');
  const opponent = opponents[Math.floor(Math.random() * opponents.length)];
  const isWin = Math.random() > 0.4;
  const homeScore = Math.floor(Math.random() * 35) + 14;
  const awayScore = Math.floor(Math.random() * 35) + 14;
  
  return {
    id: `game-gen-${Date.now()}-${Math.random()}`,
    date: new Date(seasonYear, 8 + Math.floor(weekNumber / 4), (weekNumber % 4) * 7 + 1).toISOString().split('T')[0],
    week: weekNumber,
    opponent: opponent.name,
    location: Math.random() > 0.5 ? 'Home' : 'Away',
    result: isWin ? 'W' : 'L',
    score: {
      for: isWin ? Math.max(homeScore, awayScore) : Math.min(homeScore, awayScore),
      against: isWin ? Math.min(homeScore, awayScore) : Math.max(homeScore, awayScore),
    },
    conferenceGame: opponent.conference === 'Big 12',
    rivalry: opponent.isRival,
    stats: {
      passingYards: Math.floor(Math.random() * 200) + 200,
      passingTDs: Math.floor(Math.random() * 4) + 1,
      rushingYards: Math.floor(Math.random() * 150) + 100,
      rushingTDs: Math.floor(Math.random() * 3),
      turnovers: Math.floor(Math.random() * 3),
      interceptions: Math.floor(Math.random() * 2),
    },
  };
}

// Helper function to generate a season of games
export function generateSeason(year: number): { games: Game[], season: Season } {
  const games: Game[] = [];
  for (let week = 1; week <= 12; week++) {
    games.push(generateRandomGame(week, year));
  }
  
  const wins = games.filter(g => g.result === 'W').length;
  const losses = games.filter(g => g.result === 'L').length;
  const confGames = games.filter(g => g.conferenceGame);
  const confWins = confGames.filter(g => g.result === 'W').length;
  const confLosses = confGames.filter(g => g.result === 'L').length;
  
  const season: Season = {
    id: `season-${year}`,
    year,
    teamName: 'Kansas State Wildcats',
    conference: 'Big 12',
    games: games.map(g => g.id),
    conferenceRecord: { wins: confWins, losses: confLosses },
    overallRecord: { wins, losses },
    ranking: wins >= 9 ? Math.floor(Math.random() * 15) + 10 : undefined,
    coachId: 'coach-1',
    captains: ['player-2', 'player-5'],
  };
  
  return { games, season };
}

// Recruit data
export const dummyRecruits: Recruit[] = [
  {
    id: 'recruit-1',
    name: 'Jaylen Smith',
    stars: 4,
    position: 'QB',
    state: 'TX',
    status: 'Committed',
    signedYear: 2025,
  },
  {
    id: 'recruit-2',
    name: 'Michael Johnson',
    stars: 5,
    position: 'WR',
    state: 'FL',
    status: 'Interested',
    signedYear: 2025,
  },
  {
    id: 'recruit-3',
    name: 'David Williams',
    stars: 3,
    position: 'OL',
    state: 'CA',
    status: 'Committed',
    signedYear: 2025,
  },
  {
    id: 'recruit-4',
    name: 'Anthony Davis',
    stars: 4,
    position: 'LB',
    state: 'GA',
    status: 'Interested',
    signedYear: 2025,
  },
  {
    id: 'recruit-5',
    name: 'Brandon Thomas',
    stars: 3,
    position: 'RB',
    state: 'OH',
    status: 'Signed',
    signedYear: 2024,
    playerId: 'player-3',
  },
  {
    id: 'recruit-6',
    name: 'Chris Martinez',
    stars: 4,
    position: 'CB',
    state: 'TX',
    status: 'Committed',
    signedYear: 2025,
  },
  {
    id: 'recruit-7',
    name: 'Jordan Lee',
    stars: 5,
    position: 'DL',
    state: 'AL',
    status: 'Interested',
    signedYear: 2026,
  },
  {
    id: 'recruit-8',
    name: 'Tyler Brown',
    stars: 3,
    position: 'S',
    state: 'PA',
    status: 'Interested',
    signedYear: 2026,
  },
];
</file>

<file path="src/services/AIService.ts">
import type { Game, Player, Recruit, Season, Team, Coach } from '../types/index';
import { newsWriters, type NewsWriter, type NewsArticle, type ForumPost } from '../utils/AIContentGenerator';
import { generateForumResponse as generateOpenAIResponse } from './OpenAIService';

// Fan archetypes for forum personalities
export const fanArchetypes = {
  'eternal-optimist': {
    name: 'Eternal Optimist',
    traits: ['always positive', 'sees silver linings', 'believes in the team'],
    responseStyle: 'enthusiastic and hopeful',
    topics: ['team potential', 'player development', 'bright future'],
    examplePhrases: [
      "This is our year!",
      "I love what I'm seeing from this team",
      "Trust the process, good things are coming",
      "Every loss is a learning opportunity"
    ]
  },
  'stats-nerd': {
    name: 'Stats Nerd',
    traits: ['data-driven', 'analytical', 'loves metrics'],
    responseStyle: 'technical with numbers and analysis',
    topics: ['advanced stats', 'efficiency metrics', 'statistical trends'],
    examplePhrases: [
      "The numbers tell an interesting story",
      "According to PFF grades",
      "Our SP+ rating suggests",
      "Regression to the mean indicates"
    ]
  },
  'old-timer': {
    name: 'Old Timer',
    traits: ['nostalgic', 'compares to past', 'traditional values'],
    responseStyle: 'reminiscent with historical references',
    topics: ['past glory days', 'how things used to be', 'tradition'],
    examplePhrases: [
      "Back in my day",
      "I remember when",
      "This reminds me of the '98 team",
      "We need to get back to fundamentals"
    ]
  },
  'doom-and-gloom': {
    name: 'Doom and Gloom',
    traits: ['pessimistic', 'critical', 'expects the worst'],
    responseStyle: 'negative and critical',
    topics: ['what went wrong', 'coaching mistakes', 'team weaknesses'],
    examplePhrases: [
      "Same old story",
      "Here we go again",
      "I've seen this movie before",
      "When will we learn?"
    ]
  },
  'recruiting-guru': {
    name: 'Recruiting Guru',
    traits: ['knows all prospects', 'tracks commitments', 'evaluates talent'],
    responseStyle: 'insider knowledge about recruits',
    topics: ['recruiting rankings', 'prospect evaluations', 'commitment predictions'],
    examplePhrases: [
      "Sources tell me",
      "This kid is the real deal",
      "Crystal ball prediction",
      "Fits our system perfectly"
    ]
  },
  'casual-fan': {
    name: 'Casual Fan',
    traits: ['moderate knowledge', 'emotional reactions', 'social aspect'],
    responseStyle: 'friendly and conversational',
    topics: ['game day experience', 'general observations', 'team support'],
    examplePhrases: [
      "Great game today!",
      "Anyone going to the tailgate?",
      "That was exciting!",
      "Go team!"
    ]
  },
  'rival-troll': {
    name: 'Rival Troll',
    traits: ['antagonistic', 'sarcastic', 'provocative'],
    responseStyle: 'mocking and confrontational',
    topics: ['rival comparisons', 'past failures', 'trash talk'],
    examplePhrases: [
      "Rent free in your heads",
      "Scoreboard",
      "Remember when you thought",
      "Cope harder"
    ]
  },
  'coach-critic': {
    name: 'Coach Critic',
    traits: ['questions decisions', 'armchair quarterback', 'tactical focus'],
    responseStyle: 'analytical but critical of coaching',
    topics: ['play calling', 'game management', 'personnel decisions'],
    examplePhrases: [
      "Why didn't we run there?",
      "Terrible clock management",
      "That's on the coaches",
      "Fire the coordinator"
    ]
  }
};

// Weekly analysis engine
export class WeeklyAnalysisEngine {
  constructor(private apiKey?: string) {}

  async analyzeWeeklyData(
    games: Game[],
    team: Team,
    season: Season,
    players: Player[],
    recruits: Recruit[]
  ): Promise<{
    keyTrends: string[];
    standoutPerformances: string[];
    concerns: string[];
    outlook: string;
  }> {
    // Analyze recent games (last 1-2 weeks)
    const recentGames = games.slice(-2);
    const keyTrends: string[] = [];
    const standoutPerformances: string[] = [];
    const concerns: string[] = [];
    
    // Analyze game trends
    const recentWins = recentGames.filter(g => g.result === 'W').length;
    const totalPoints = recentGames.reduce((sum, g) => sum + g.score.for, 0);
    const pointsAllowed = recentGames.reduce((sum, g) => sum + g.score.against, 0);
    const totalTurnovers = recentGames.reduce((sum, g) => sum + (g.stats.turnovers || 0), 0);
    
    if (recentWins === recentGames.length) {
      keyTrends.push(`${team.mascot} on ${recentGames.length}-game winning streak`);
    } else if (recentWins === 0) {
      keyTrends.push(`${team.mascot} struggling with ${recentGames.length}-game losing streak`);
    }
    
    if (totalPoints / recentGames.length > 35) {
      keyTrends.push('Offense hitting stride with explosive performances');
    }
    
    if (pointsAllowed / recentGames.length < 20) {
      keyTrends.push('Defense dominating opponents');
    }
    
    // Identify standout performances
    recentGames.forEach(game => {
      if (game.stats.passingYards && game.stats.passingYards > 300) {
        standoutPerformances.push(`QB threw for ${game.stats.passingYards} yards vs ${game.opponent}`);
      }
      if (game.stats.rushingYards && game.stats.rushingYards > 200) {
        standoutPerformances.push(`Ground game dominated with ${game.stats.rushingYards} rushing yards`);
      }
    });
    
    // Identify concerns
    if (totalTurnovers > 4) {
      concerns.push('Ball security issues with multiple turnovers');
    }
    
    if (season.conferenceRecord.losses > season.conferenceRecord.wins) {
      concerns.push('Struggling in conference play');
    }
    
    // Generate outlook
    const outlook = season.overallRecord.wins >= 8 
      ? 'Playoff hopes alive with strong finish needed'
      : season.overallRecord.wins >= 6
      ? 'Bowl eligibility within reach'
      : 'Building for the future with young talent';
    
    return { keyTrends, standoutPerformances, concerns, outlook };
  }

  async generateDynamicArticle(
    type: 'game-recap' | 'recruiting' | 'analysis',
    data: any,
    writer: NewsWriter,
    team: Team
  ): Promise<string> {
    // This would connect to OpenAI API if apiKey is provided
    // For now, we'll generate dynamic content based on the data
    
    if (type === 'game-recap') {
      return this.generateGameRecapArticle(data.game, team, writer);
    } else if (type === 'recruiting') {
      return this.generateRecruitingArticle(data.recruit, team, writer);
    } else {
      return this.generateAnalysisArticle(data, team, writer);
    }
  }

  private generateGameRecapArticle(game: Game, team: Team, writer: NewsWriter): string {
    const won = game.result === 'W';
    const margin = Math.abs(game.score.for - game.score.against);
    const paragraphs: string[] = [];
    
    // Opening paragraph
    if (writer.personality === 'enthusiastic' && won) {
      paragraphs.push(
        `What a performance! The ${team.mascot} put on an absolute clinic against ${game.opponent}, ` +
        `cruising to a ${game.score.for}-${game.score.against} victory that had the home crowd on their feet all night long. ` +
        `This was ${team.name} football at its finest, with all three phases clicking in perfect harmony.`
      );
    } else if (writer.personality === 'critical' && !won) {
      paragraphs.push(
        `Another week, another disappointment. The ${team.mascot} fell flat on their faces against ${game.opponent}, ` +
        `losing ${game.score.against}-${game.score.for} in a game that exposed every weakness this team has been trying to hide. ` +
        `The questions are mounting, and the answers are nowhere to be found.`
      );
    } else {
      paragraphs.push(
        `The ${team.mascot} ${won ? 'defeated' : 'fell to'} ${game.opponent} by a score of ` +
        `${won ? `${game.score.for}-${game.score.against}` : `${game.score.against}-${game.score.for}`} ` +
        `in a ${margin > 14 ? 'decisive' : 'hard-fought'} ${game.location.toLowerCase()} ${game.rivalry ? 'rivalry ' : ''}game. ` +
        `The ${won ? 'victory' : 'defeat'} ${won ? 'improves' : 'drops'} the ${team.mascot} record on the season.`
      );
    }
    
    // Game flow paragraph
    paragraphs.push(
      `The game started with both teams trading blows in the first quarter. ` +
      `${team.name} ${game.stats.turnovers > 0 ? `struggled with ball security, committing ${game.stats.turnovers} turnovers that ` : ''}` +
      `${won ? 'managed to overcome adversity and' : 'couldn\'t maintain consistency and'} ` +
      `${won ? 'pull away' : 'keep pace'} as the game progressed. ` +
      `The ${won ? 'turning point' : 'final nail in the coffin'} came in the ${won ? 'third' : 'fourth'} quarter when ` +
      `${won ? `the ${team.mascot} offense found its rhythm` : `${game.opponent} put the game out of reach`}.`
    );
    
    // Statistical breakdown
    const totalYards = (game.stats.passingYards || 0) + (game.stats.rushingYards || 0);
    paragraphs.push(
      `Statistically, the ${team.mascot} ${totalYards > 400 ? 'dominated' : totalYards > 300 ? 'performed adequately' : 'struggled'} ` +
      `on offense, accumulating ${game.stats.passingYards || 0} yards through the air and ${game.stats.rushingYards || 0} yards on the ground. ` +
      `${game.stats.passingTDs ? `The passing game accounted for ${game.stats.passingTDs} touchdowns, ` : ''}` +
      `${game.stats.rushingTDs ? `while the ground attack added ${game.stats.rushingTDs} more scores. ` : ''}` +
      `${game.stats.turnovers ? `However, ${game.stats.turnovers} turnovers proved ${won ? 'nearly' : ''} costly. ` : ''}` +
      `The defense ${won ? 'stepped up when it mattered most' : 'had its moments but couldn\'t make enough stops'}.`
    );
    
    // Looking ahead paragraph
    paragraphs.push(
      `With this ${won ? 'victory' : 'loss'}, the ${team.mascot} ${won ? 'build momentum' : 'must regroup'} ` +
      `as they prepare for their next challenge. ${writer.catchphrases[Math.floor(Math.random() * writer.catchphrases.length)]}, ` +
      `and this team ${won ? 'seems to be hitting their stride' : 'has work to do'} at the right time. ` +
      `The coaching staff will ${won ? 'look to build on this performance' : 'need to address the issues that plagued them'} ` +
      `in practice this week. ${won ? 'If they can maintain this level of play' : 'If they can clean up the mistakes'}, ` +
      `the ${team.mascot} ${won ? 'could be a force to be reckoned with' : 'still have a chance to salvage their season'}.`
    );
    
    // Add more paragraphs for a full-length article
    if (won && margin > 20) {
      paragraphs.push(
        `Individual performances worth noting included stellar play from both sides of the ball. ` +
        `The offensive line dominated the line of scrimmage, opening holes for the running backs and giving the quarterback ample time in the pocket. ` +
        `Multiple players had career days, and the depth of this roster was on full display as backups contributed meaningful snaps.`
      );
      
      paragraphs.push(
        `Special teams also played a crucial role in the victory. Field position was consistently in ${team.name}'s favor, ` +
        `and the coverage units were exceptional. This complete team effort is exactly what head coach had been preaching all week in practice. ` +
        `When all three phases are clicking like this, the ${team.mascot} are tough to beat.`
      );
    }
    
    // Injury/roster update paragraph
    paragraphs.push(
      `From a roster standpoint, the ${team.mascot} ${won ? 'emerged relatively healthy' : 'may have suffered some key injuries'} from this contest. ` +
      `The depth chart will be evaluated throughout the week as the medical staff assesses any bumps and bruises. ` +
      `With the season ${game.week > 8 ? 'entering the home stretch' : 'still in its early stages'}, ` +
      `maintaining health will be crucial for ${team.name}'s ${won ? 'continued success' : 'hopes of turning things around'}.`
    );
    
    // Fan reaction paragraph
    paragraphs.push(
      `The ${team.name} faithful ${won ? 'left the stadium buzzing with excitement' : 'filed out quietly, disappointment evident on their faces'}. ` +
      `${game.location === 'Home' ? `The home crowd of ${Math.floor(Math.random() * 20000) + 40000} ` : 'Those who made the trip '}` +
      `${won ? 'got their money\'s worth' : 'deserved better'} as they watched their ${team.mascot} ` +
      `${won ? 'put together a complete performance' : 'struggle to find answers'}. ` +
      `Social media ${won ? 'erupted with celebration' : 'was filled with frustration'} as fans ` +
      `${won ? 'praised the team\'s effort' : 'called for changes'}.`
    );
    
    // Closing thoughts
    paragraphs.push(
      `As the dust settles on this week ${game.week} ${won ? 'triumph' : 'setback'}, ` +
      `the ${team.mascot} must quickly shift their focus to next week's opponent. ` +
      `The season is a marathon, not a sprint, and every game presents new challenges and opportunities. ` +
      `${writer.personality === 'optimistic' ? 'This team has shown flashes of brilliance' : 'There\'s still time to right the ship'}, ` +
      `but consistency will be key moving forward. One thing is certain: ${team.name} fans will be watching closely ` +
      `to see how their team responds in the coming weeks.`
    );
    
    return paragraphs.join('\n\n');
  }

  private generateRecruitingArticle(recruit: Recruit, team: Team, writer: NewsWriter): string {
    const paragraphs: string[] = [];
    
    // Opening with excitement level based on star rating
    const excitement = recruit.stars >= 4 ? 'Major recruiting victory!' : 'Solid addition to the class!';
    paragraphs.push(
      `${excitement} The ${team.name} coaching staff has secured a commitment from ${recruit.stars}-star ${recruit.position} ` +
      `${recruit.name} out of ${recruit.hometown}, ${recruit.state}. The ${recruit.height}, ${recruit.weight} prospect ` +
      `chose the ${team.mascot} over several other prominent programs, citing the coaching staff's vision and ` +
      `the opportunity to compete for playing time as key factors in his decision.`
    );
    
    // Evaluation paragraph
    paragraphs.push(
      `${writer.catchphrases[1]} when evaluating ${recruit.name}'s skill set. ` +
      `${recruit.stars >= 4 ? 'Elite' : recruit.stars === 3 ? 'Solid' : 'Developmental'} ` +
      `athleticism combined with excellent football IQ makes him a perfect fit for the ${team.mascot} system. ` +
      `Scouts have praised his ${recruit.position === 'QB' ? 'arm strength and decision-making' : 
        recruit.position === 'RB' ? 'vision and burst through the hole' :
        recruit.position === 'WR' ? 'route running and hands' :
        recruit.position === 'OL' ? 'footwork and power at the point of attack' :
        recruit.position === 'DL' ? 'first step and ability to disrupt the backfield' :
        recruit.position === 'LB' ? 'sideline-to-sideline speed and tackling ability' :
        recruit.position === 'DB' ? 'coverage skills and ball awareness' :
        'versatility and competitive drive'}. ` +
      `At ${recruit.height} and ${recruit.weight}, he has ${recruit.stars >= 4 ? 'ideal' : 'good'} size for the position.`
    );
    
    // High school career paragraph
    paragraphs.push(
      `During his high school career at ${recruit.hometown} High School, ${recruit.name} put up impressive numbers ` +
      `and earned ${recruit.stars >= 4 ? 'numerous accolades including all-state honors' : 'all-district recognition'}. ` +
      `His junior season saw him ${
        recruit.position === 'QB' ? 'throw for over 3,000 yards and 35 touchdowns' :
        recruit.position === 'RB' ? 'rush for 1,500 yards and 20 touchdowns' :
        recruit.position === 'WR' ? 'haul in 65 catches for 1,200 yards and 15 touchdowns' :
        'dominate on both sides of the ball'
      }. ` +
      `College coaches took notice, and the recruiting battle intensified throughout his senior campaign.`
    );
    
    // Recruitment process paragraph
    paragraphs.push(
      `The recruitment of ${recruit.name} was a ${recruit.stars >= 4 ? 'highly competitive' : 'steady'} process that saw ` +
      `${recruit.stars >= 4 ? 'multiple Power 5 programs vying for his services' : 'several schools showing strong interest'}. ` +
      `The ${team.mascot} coaching staff made him a priority early in the process, ` +
      `${recruit.stars >= 4 ? 'offering him before his junior season' : 'extending an offer after impressive camp performances'}. ` +
      `Multiple visits to campus, including an official visit ${recruit.stars >= 4 ? 'for a marquee game' : 'during the season'}, ` +
      `helped solidify the relationship between ${recruit.name} and the program.`
    );
    
    // Impact on the class paragraph
    paragraphs.push(
      `This commitment ${recruit.stars >= 4 ? 'significantly bolsters' : 'adds depth to'} the ${team.mascot}'s ` +
      `${new Date().getFullYear()} recruiting class. ${recruit.name} becomes the ` +
      `${Math.floor(Math.random() * 10) + 10}th commitment in the class and the ` +
      `${Math.floor(Math.random() * 3) + 1}${recruit.stars >= 4 ? 'st' : 'rd'} at his position. ` +
      `His addition ${recruit.stars >= 4 ? 'could help attract other top targets' : 'fills a need'} as the ${team.mascot} ` +
      `look to ${recruit.stars >= 4 ? 'climb the national rankings' : 'build a balanced class'}.`
    );
    
    // Future outlook paragraph
    paragraphs.push(
      `Looking ahead, ${recruit.name} projects as a ${
        recruit.stars >= 4 ? 'potential early contributor who could see the field as a freshman' :
        recruit.stars === 3 ? 'player who will compete for playing time after a year of development' :
        'developmental prospect with upside'
      }. ` +
      `His skill set fits well with what the ${team.mascot} like to do ${
        ['QB', 'RB', 'WR'].includes(recruit.position) ? 'offensively' : 'defensively'
      }, ` +
      `and the coaching staff is excited about his potential impact. With early enrollment ${
        Math.random() > 0.5 ? 'planned for January' : 'not in the plans'
      }, ` +
      `${recruit.name} will ${Math.random() > 0.5 ? 'get a head start on learning the system' : 'arrive on campus this summer'}.`
    );
    
    // Coach and player quotes paragraph
    paragraphs.push(
      `"We're thrilled to welcome ${recruit.name.split(' ')[0]} to the ${team.mascot} family," said the ${team.name} coaching staff. ` +
      `"He embodies everything we look for in a student-athlete: talent, character, and a burning desire to compete at the highest level. ` +
      `We believe he's going to be a special player for us." ${recruit.name} echoed the excitement, stating, ` +
      `"I knew from my first visit that this was home. The coaches, the players, the facilities - everything about ${team.name} ` +
      `felt right. I can't wait to get to work and help bring championships to this program."`
    );
    
    // Closing paragraph
    paragraphs.push(
      `With ${recruit.name} now firmly in the fold, the ${team.mascot} coaching staff will continue their efforts on the recruiting trail. ` +
      `Several other targets remain on the board, and momentum from this commitment could prove valuable in those pursuits. ` +
      `As National Signing Day approaches, ${team.name} fans have plenty of reason for optimism about the future of their program. ` +
      `The addition of talented players like ${recruit.name} ensures that the ${team.mascot} will continue to compete ` +
      `at the highest level for years to come.`
    );
    
    return paragraphs.join('\n\n');
  }

  private generateAnalysisArticle(data: any, team: Team, writer: NewsWriter): string {
    const { season, keyTrends, outlook } = data;
    const paragraphs: string[] = [];
    
    // Opening with current state
    paragraphs.push(
      `${writer.catchphrases[0]} as we examine the ${team.mascot}'s season through ${season.games.length} games. ` +
      `With a record of ${season.overallRecord.wins}-${season.overallRecord.losses} ` +
      `(${season.conferenceRecord.wins}-${season.conferenceRecord.losses} in conference), ` +
      `the data reveals interesting patterns about this team's trajectory. ` +
      `${season.ranking ? `Currently ranked #${season.ranking} nationally, ` : 'While unranked, '}` +
      `the ${team.mascot} find themselves at a critical juncture of their season.`
    );
    
    // Trends analysis
    paragraphs.push(
      `Several key trends have emerged from our comprehensive analysis. ${keyTrends.join('. ')}. ` +
      `These patterns suggest a team that is ${
        season.overallRecord.wins > season.overallRecord.losses ? 'finding its identity' : 'searching for consistency'
      }. ` +
      `The advanced metrics paint a picture of a program ${
        season.ranking ? 'on the rise' : 'with room for growth'
      }, ` +
      `particularly when examining performance in ${
        season.conferenceRecord.wins > 2 ? 'conference play' : 'non-conference matchups'
      }.`
    );
    
    // Offensive analysis
    paragraphs.push(
      `Offensively, the ${team.mascot} have shown ${
        Math.random() > 0.5 ? 'explosive potential' : 'steady improvement'
      } throughout the season. ` +
      `Averaging ${Math.floor(Math.random() * 100) + 350} yards per game, the unit ranks ${
        Math.floor(Math.random() * 50) + 30
      }th nationally in total offense. ` +
      `The ${Math.random() > 0.5 ? 'passing' : 'rushing'} game has been particularly ${
        Math.random() > 0.5 ? 'effective' : 'inconsistent'
      }, ` +
      `accounting for ${Math.floor(Math.random() * 30) + 55}% of the total yardage. ` +
      `Red zone efficiency sits at ${Math.floor(Math.random() * 20) + 70}%, ` +
      `${Math.random() > 0.5 ? 'an area of strength' : 'leaving room for improvement'} as the season progresses.`
    );
    
    // Defensive analysis
    paragraphs.push(
      `Defensively, the statistics tell a ${
        Math.random() > 0.5 ? 'compelling story of improvement' : 'tale of inconsistency'
      }. ` +
      `The ${team.mascot} defense allows an average of ${Math.floor(Math.random() * 100) + 300} yards per game, ` +
      `ranking ${Math.floor(Math.random() * 50) + 40}th nationally. ` +
      `Third down defense has been ${Math.random() > 0.5 ? 'a strength' : 'an area of concern'}, ` +
      `with opponents converting ${Math.floor(Math.random() * 15) + 30}% of their attempts. ` +
      `The pass rush has generated ${Math.floor(Math.random() * 20) + 15} sacks through ${season.games.length} games, ` +
      `while the secondary has ${Math.floor(Math.random() * 10) + 5} interceptions.`
    );
    
    // Special teams and field position
    paragraphs.push(
      `An often overlooked aspect of the game, special teams and field position have played a crucial role in the ${team.mascot}'s ` +
      `${season.overallRecord.wins > season.overallRecord.losses ? 'success' : 'struggles'} this season. ` +
      `Starting field position differential of ${Math.random() > 0.5 ? '+' : '-'}${Math.floor(Math.random() * 10) + 3} yards ` +
      `has ${Math.random() > 0.5 ? 'provided an advantage' : 'been a challenge to overcome'}. ` +
      `The kicking game has converted ${Math.floor(Math.random() * 20) + 70}% of field goal attempts, ` +
      `while punt return units average ${Math.floor(Math.random() * 8) + 6} yards per return.`
    );
    
    // Strength of schedule
    paragraphs.push(
      `Context matters when evaluating performance, and the ${team.mascot}'s strength of schedule ranks ` +
      `${Math.floor(Math.random() * 50) + 25}th nationally. ` +
      `They've faced ${Math.floor(Math.random() * 3) + 2} ranked opponents thus far, ` +
      `posting a ${Math.floor(Math.random() * 2)}-${Math.floor(Math.random() * 3)} record in those contests. ` +
      `The remaining schedule includes ${Math.floor(Math.random() * 3) + 1} currently ranked teams, ` +
      `presenting both challenges and opportunities for resume-building victories.`
    );
    
    // Injury impact and depth
    paragraphs.push(
      `Roster health and depth have been ${Math.random() > 0.5 ? 'relatively stable' : 'tested'} throughout the campaign. ` +
      `The ${team.mascot} have had to navigate ${Math.random() > 0.5 ? 'minor' : 'significant'} injuries at key positions, ` +
      `forcing younger players into expanded roles. This adversity has ${
        Math.random() > 0.5 ? 'accelerated development' : 'exposed depth concerns'
      } ` +
      `that will need to be addressed through recruiting and player development. ` +
      `The silver lining is the experience gained by backups who may contribute more significantly next season.`
    );
    
    // Coaching and adjustments
    paragraphs.push(
      `From a coaching perspective, the staff has shown ${
        Math.random() > 0.5 ? 'adaptability' : 'stubbornness'
      } in their approach. ` +
      `In-game adjustments have been ${Math.random() > 0.5 ? 'effective' : 'questionable'}, ` +
      `particularly in ${Math.random() > 0.5 ? 'second half' : 'crucial'} situations. ` +
      `The team's record in one-score games (${Math.floor(Math.random() * 3)}-${Math.floor(Math.random() * 3)}) ` +
      `speaks to their ability to ${Math.random() > 0.5 ? 'execute under pressure' : 'close out tight contests'}. ` +
      `Penalty discipline, averaging ${Math.floor(Math.random() * 4) + 4} flags per game, ` +
      `${Math.random() > 0.5 ? 'has been impressive' : 'remains an area for improvement'}.`
    );
    
    // Playoff/bowl implications
    paragraphs.push(
      `Looking at the bigger picture, the ${team.mascot}'s postseason aspirations remain ${
        season.overallRecord.wins >= 8 ? 'very much alive' : season.overallRecord.wins >= 6 ? 'within reach' : 'a long shot'
      }. ` +
      `Current projections have them ${
        season.ranking && season.ranking <= 12 ? 'in the College Football Playoff conversation' :
        season.overallRecord.wins >= 6 ? 'headed to a respectable bowl game' :
        'needing to win out for bowl eligibility'
      }. ` +
      `The computer models give them a ${Math.floor(Math.random() * 30) + 40}% chance of achieving their stated goals, ` +
      `assuming current performance levels maintain through the remainder of the schedule.`
    );
    
    // Future outlook and conclusion
    paragraphs.push(
      `As we project forward, ${outlook}. The combination of ${
        Math.random() > 0.5 ? 'experienced veterans' : 'emerging young talent'
      } ` +
      `and ${Math.random() > 0.5 ? 'strong recruiting' : 'coaching stability'} ` +
      `positions the ${team.mascot} ${
        season.overallRecord.wins > season.overallRecord.losses ? 'favorably' : 'with work to do'
      } ` +
      `for both the remainder of this season and beyond. ` +
      `${writer.catchphrases[2]}, and the data suggests this program is ${
        Math.random() > 0.5 ? 'trending upward' : 'at a crossroads'
      }. ` +
      `How they finish this season will set the tone for what's to come in ${team.name} football.`
    );
    
    return paragraphs.join('\n\n');
  }
}

// Forum response generator with context awareness
export class ForumResponseGenerator {
  constructor(private apiKey?: string) {}

  async generateContextAwareResponse(
    userPost: string,
    thread: ForumPost,
    threadHistory: any[],
    team: Team,
    recentGames: Game[],
    season: Season
  ): Promise<{
    responses: Array<{
      author: string;
      archetype: string;
      content: string;
      delay: number;
    }>;
  }> {
    const responses: Array<{
      author: string;
      archetype: string;
      content: string;
      delay: number;
    }> = [];
    
    // Analyze post sentiment and content
    const postLower = userPost.toLowerCase();
    const sentiment = this.analyzeSentiment(postLower);
    const topics = this.extractTopics(postLower, thread.category);
    
    // Determine which archetypes would likely respond
    const respondingArchetypes = this.selectRespondingArchetypes(sentiment, topics, thread.category);
    
    // Generate responses for each archetype
    for (const archetypeKey of respondingArchetypes) {
      const archetype = fanArchetypes[archetypeKey as keyof typeof fanArchetypes];
      const response = this.generateArchetypeResponse(
        archetypeKey,
        archetype,
        userPost,
        thread,
        team,
        sentiment,
        topics,
        recentGames,
        season
      );
      
      if (response) {
        responses.push({
          author: this.generateArchetypeUsername(team, archetypeKey),
          archetype: archetype.name,
          content: response,
          delay: Math.random() * 3000 + 2000 // 2-5 seconds
        });
      }
    }
    
    return { responses };
  }

  private analyzeSentiment(text: string): 'positive' | 'negative' | 'neutral' | 'question' {
    const positiveWords = ['great', 'awesome', 'love', 'excited', 'win', 'dominate', 'best'];
    const negativeWords = ['terrible', 'hate', 'fire', 'awful', 'lose', 'suck', 'worst'];
    const questionWords = ['?', 'what', 'why', 'how', 'when', 'where', 'who'];
    
    const hasPositive = positiveWords.some(word => text.includes(word));
    const hasNegative = negativeWords.some(word => text.includes(word));
    const hasQuestion = questionWords.some(word => text.includes(word));
    
    if (hasQuestion) return 'question';
    if (hasPositive && !hasNegative) return 'positive';
    if (hasNegative && !hasPositive) return 'negative';
    return 'neutral';
  }

  private extractTopics(text: string, category: string): string[] {
    const topics: string[] = [category];
    
    if (text.includes('coach') || text.includes('staff')) topics.push('coaching');
    if (text.includes('recruit') || text.includes('commit')) topics.push('recruiting');
    if (text.includes('playoff') || text.includes('bowl')) topics.push('postseason');
    if (text.includes('qb') || text.includes('quarterback')) topics.push('quarterback');
    if (text.includes('defense') || text.includes('offense')) topics.push('strategy');
    
    return topics;
  }

  private selectRespondingArchetypes(
    sentiment: string,
    topics: string[],
    category: string
  ): string[] {
    const archetypes: string[] = [];
    
    // Different archetypes respond to different situations
    if (sentiment === 'positive') {
      archetypes.push('eternal-optimist');
      if (Math.random() > 0.5) archetypes.push('casual-fan');
      if (Math.random() > 0.7) archetypes.push('doom-and-gloom'); // contrarian
    } else if (sentiment === 'negative') {
      archetypes.push('doom-and-gloom');
      if (Math.random() > 0.5) archetypes.push('eternal-optimist'); // counterpoint
      if (Math.random() > 0.6) archetypes.push('old-timer');
    } else if (sentiment === 'question') {
      if (topics.includes('recruiting')) archetypes.push('recruiting-guru');
      if (topics.includes('strategy') || topics.includes('coaching')) archetypes.push('coach-critic');
      archetypes.push('stats-nerd');
      if (Math.random() > 0.5) archetypes.push('casual-fan');
    }
    
    // Limit responses to 0-3
    return archetypes.slice(0, Math.floor(Math.random() * 3) + 1);
  }

  private generateArchetypeResponse(
    archetypeKey: string,
    archetype: any,
    userPost: string,
    thread: ForumPost,
    team: Team,
    sentiment: string,
    topics: string[],
    recentGames: Game[],
    season: Season
  ): string {
    const lastGame = recentGames[recentGames.length - 1];
    
    switch (archetypeKey) {
      case 'eternal-optimist':
        return this.generateOptimistResponse(userPost, team, sentiment, lastGame, season);
      
      case 'stats-nerd':
        return this.generateStatsNerdResponse(userPost, team, topics, recentGames, season);
      
      case 'old-timer':
        return this.generateOldTimerResponse(userPost, team, sentiment, topics);
      
      case 'doom-and-gloom':
        return this.generateDoomResponse(userPost, team, sentiment, lastGame, season);
      
      case 'recruiting-guru':
        return this.generateRecruitingGuruResponse(userPost, team, topics);
      
      case 'coach-critic':
        return this.generateCoachCriticResponse(userPost, team, topics, lastGame);
      
      case 'casual-fan':
        return this.generateCasualFanResponse(userPost, team, sentiment, thread.category);
      
      default:
        return '';
    }
  }

  private generateOptimistResponse(
    userPost: string,
    team: Team,
    sentiment: string,
    lastGame: Game | undefined,
    season: Season
  ): string {
    if (sentiment === 'negative') {
      return `Hey now, let's not lose faith! Sure, ${lastGame && lastGame.result === 'L' ? 'that loss stung' : 'things look tough'}, ` +
        `but this ${team.mascot} team has shown they can bounce back. We're still ${season.overallRecord.wins}-${season.overallRecord.losses} ` +
        `and there's a lot of football left to play. Trust the process! Go ${team.mascot}! üí™`;
    } else {
      return `Exactly! This is what I've been saying all along! This ${team.mascot} team is special. ` +
        `${lastGame && lastGame.result === 'W' ? `That win over ${lastGame.opponent} proved it.` : ''} ` +
        `${season.ranking ? `We're ranked #${season.ranking} for a reason!` : 'Rankings don\'t tell the whole story!'} ` +
        `I believe this is our year! #${team.name.replace(/\s+/g, '')}Forever`;
    }
  }

  private generateStatsNerdResponse(
    userPost: string,
    team: Team,
    topics: string[],
    recentGames: Game[],
    season: Season
  ): string {
    const totalYards = recentGames.reduce((sum, g) => sum + (g.stats.passingYards || 0) + (g.stats.rushingYards || 0), 0);
    const avgYards = Math.round(totalYards / recentGames.length);
    
    return `Interesting point. Let me add some context with the numbers: Over the last ${recentGames.length} games, ` +
      `we're averaging ${avgYards} total yards per game. Our efficiency metrics show ${
        recentGames[0]?.stats.thirdDownConversions || 'improved'
      } third down conversion rate. ` +
      `${season.conferenceRecord.wins > season.conferenceRecord.losses 
        ? `In conference play, we're outscoring opponents by an average of ${Math.floor(Math.random() * 10) + 5} points.` 
        : `The concerning trend is our -${Math.floor(Math.random() * 5) + 2} turnover margin in conference games.`
      } ` +
      `Based on advanced analytics, our win probability for the remaining schedule is ${Math.floor(Math.random() * 20) + 60}%.`;
  }

  private generateOldTimerResponse(
    userPost: string,
    team: Team,
    sentiment: string,
    topics: string[]
  ): string {
    const years = ['\'85', '\'92', '\'98', '\'03', '\'07'];
    const randomYear = years[Math.floor(Math.random() * years.length)];
    
    if (topics.includes('coaching')) {
      return `You know, this reminds me of the ${randomYear} season when we had similar coaching questions. ` +
        `Back then, Coach Thompson (or was it Williams?) made the tough call to switch up the offense mid-season. ` +
        `These young fans don't remember, but we went on to win 8 straight after that. ` +
        `Sometimes you gotta trust the process. I've seen a lot of ${team.mascot} football in my day, and this too shall pass.`;
    } else {
      return `Been following this team since ${randomYear}, and let me tell you - ` +
        `${sentiment === 'positive' ? 'this feels like one of those special seasons' : 'we\'ve been through worse'}. ` +
        `I remember when we ${sentiment === 'positive' ? 'won the conference with a freshman QB' : 'lost 10 straight and still came back strong'}. ` +
        `The kids these days have all the talent in the world, they just need to play ${team.mascot} football - ` +
        `tough, physical, and smart. That's how we've always done it.`;
    }
  }

  private generateDoomResponse(
    userPost: string,
    team: Team,
    sentiment: string,
    lastGame: Game | undefined,
    season: Season
  ): string {
    if (sentiment === 'positive') {
      return `Oh great, another sunshine pumper. Wake me up when we actually beat a ranked team on the road. ` +
        `${lastGame?.result === 'W' ? `Sure we beat ${lastGame.opponent}, but they're terrible this year.` : ''} ` +
        `Mark my words, this team will find a way to disappoint us like they always do. ` +
        `${season.conferenceRecord.losses > 0 ? `Already ${season.conferenceRecord.losses} conference losses and counting...` : 'Just wait until conference play really heats up...'}`;
    } else {
      return `Finally someone who sees it like it is! I've been saying this all season - ` +
        `this team is NOT ready for primetime. ${lastGame?.stats.turnovers ? `${lastGame.stats.turnovers} turnovers last game!` : 'The mistakes are killing us!'} ` +
        `Same old ${team.mascot}, different year. Until we make SERIOUS changes, we'll keep getting the same results. ` +
        `But sure, keep drinking the kool-aid everyone. üôÑ`;
    }
  }

  private generateRecruitingGuruResponse(
    userPost: string,
    team: Team,
    topics: string[]
  ): string {
    const positions = ['QB', 'WR', 'RB', 'OL', 'DL', 'LB', 'DB'];
    const randomPosition = positions[Math.floor(Math.random() * positions.length)];
    const stars = Math.floor(Math.random() * 2) + 3;
    
    return `Great question about recruiting! Just got off the phone with my sources - ` +
      `we're in great shape with that ${stars}-star ${randomPosition} from ${
        ['Texas', 'Florida', 'California', 'Georgia', 'Ohio'][Math.floor(Math.random() * 5)]
      }. ` +
      `He's down to us and two other schools. Official visit went VERY well last weekend. ` +
      `Also hearing good things about our position with the JUCO transfer market. ` +
      `This staff is building something special on the trail. The ${new Date().getFullYear() + 1} class could be historic for ${team.name}. ` +
      `Can't say too much more right now, but stay tuned... üëÄ`;
  }

  private generateCoachCriticResponse(
    userPost: string,
    team: Team,
    topics: string[],
    lastGame: Game | undefined
  ): string {
    if (lastGame?.result === 'L') {
      return `THANK YOU! Someone else who sees the coaching issues! That 4th quarter was a masterclass in what NOT to do. ` +
        `${lastGame.stats.turnovers ? 'Zero adjustments after the turnovers.' : 'The play calling was predictable.'} ` +
        `Why are we still running that vanilla defense against spread teams? ` +
        `And don't get me started on the clock management... my high school coach could've handled that better. ` +
        `At some point, talent isn't enough. You need coaches who can actually COACH.`;
    } else {
      return `Look, I'm glad we won, but let's not pretend the coaching was perfect. ` +
        `${lastGame ? `That 3rd and short call in the 2nd quarter? Terrible.` : 'Some questionable decisions out there.'} ` +
        `We're winning despite the coaching, not because of it. Against better teams, those mistakes will cost us. ` +
        `I just want to see us maximize our potential, and right now, I don't think we are.`;
    }
  }

  private generateCasualFanResponse(
    userPost: string,
    team: Team,
    sentiment: string,
    category: string
  ): string {
    const responses = {
      'positive': [
        `Love the positivity! Go ${team.mascot}! üéâ`,
        `Right there with you! This team is fun to watch!`,
        `Agreed! Can't wait for the next game! Who's tailgating?`,
        `Yes!! ${team.name} all the way! üí™`
      ],
      'negative': [
        `I hear you, tough times but we gotta stick together!`,
        `Win or lose, still proud to be a ${team.mascot} fan!`,
        `Every team has ups and downs. We'll bounce back!`,
        `Chin up! Next game is a new opportunity!`
      ],
      'neutral': [
        `Good points all around! Go ${team.mascot}!`,
        `Interesting discussion! Love this forum!`,
        `Anyone else going to the game this weekend?`,
        `Great to see so much passion for our ${team.mascot}!`
      ],
      'question': [
        `Good question! I was wondering the same thing.`,
        `Not sure, but excited to find out! Go ${team.mascot}!`,
        `I think someone posted about this last week?`,
        `Following this thread for answers! üëÄ`
      ]
    };
    
    const sentimentResponses = responses[sentiment as keyof typeof responses] || responses.neutral;
    return sentimentResponses[Math.floor(Math.random() * sentimentResponses.length)];
  }

  private generateArchetypeUsername(team: Team, archetypeKey: string): string {
    const suffixes = ['4Life', '_Nation', `_${new Date().getFullYear()}`, '_Forever', '_Fan'];
    const suffix = suffixes[Math.floor(Math.random() * suffixes.length)];
    
    const usernames: Record<string, string[]> = {
      'eternal-optimist': [`Believe_In_${team.mascot}`, `${team.mascot}_Faith`, `Always${team.name.replace(/\s+/g, '')}`],
      'stats-nerd': [`${team.name.replace(/\s+/g, '')}Analytics`, `NumbersCruncher`, `StatGuy_${team.mascot}`],
      'old-timer': [`${team.mascot}_Since85`, `OldSchool${team.name.replace(/\s+/g, '')}`, `Longtime${team.mascot}`],
      'doom-and-gloom': [`Realistic${team.mascot}Fan`, `${team.name.replace(/\s+/g, '')}Cynic`, `ToldYouSo`],
      'recruiting-guru': [`${team.mascot}Recruiting`, `InsideInfo`, `RecruitScoop_${team.name.replace(/\s+/g, '')}`],
      'coach-critic': [`FireThe${['OC', 'DC'][Math.floor(Math.random() * 2)]}`, `${team.mascot}PlayCaller`, `XsAndOs`],
      'casual-fan': [`Go${team.mascot}Go`, `${team.name.replace(/\s+/g, '')}4Ever`, `Proud${team.mascot}`],
      'rival-troll': [`${team.mascot}Hater`, `RentFree`, `YourRival`]
    };
    
    const baseNames = usernames[archetypeKey] || [`${team.mascot}Fan`];
    return baseNames[Math.floor(Math.random() * baseNames.length)] + suffix;
  }
}

// Main AI Service class
export class AIService {
  private weeklyAnalysis: WeeklyAnalysisEngine;
  private forumGenerator: ForumResponseGenerator;
  
  constructor(private apiKey?: string) {
    this.weeklyAnalysis = new WeeklyAnalysisEngine(apiKey);
    this.forumGenerator = new ForumResponseGenerator(apiKey);
  }
  
  async generateDynamicNewsContent(
    type: 'game-recap' | 'recruiting' | 'analysis',
    data: any,
    writer: NewsWriter,
    team: Team
  ): Promise<string> {
    return this.weeklyAnalysis.generateDynamicArticle(type, data, writer, team);
  }
  
  async generateForumResponses(
    userPost: string,
    thread: ForumPost,
    threadHistory: any[],
    team: Team,
    recentGames: Game[],
    season: Season
  ): Promise<any> {
    return this.forumGenerator.generateContextAwareResponse(
      userPost,
      thread,
      threadHistory,
      team,
      recentGames,
      season
    );
  }
  
  async analyzeWeeklyTrends(
    games: Game[],
    team: Team,
    season: Season,
    players: Player[],
    recruits: Recruit[]
  ): Promise<any> {
    return this.weeklyAnalysis.analyzeWeeklyData(games, team, season, players, recruits);
  }
}

// Export singleton instance
export const aiService = new AIService();
</file>

<file path="src/services/OpenAIService.ts">
import OpenAI from 'openai';
import type { Game, Team, Season, Player, Recruit } from '../types/index';

// Initialize OpenAI client
const openai = new OpenAI({
  apiKey: import.meta.env.VITE_OPENAI_API_KEY || 'demo-key',
  dangerouslyAllowBrowser: true // Note: In production, API calls should be made from a backend
});

export interface AIGeneratedContent {
  content: string;
  author?: string;
  archetype?: string;
}

// Generate image using DALL-E
export async function generateArticleImage(prompt: string): Promise<string | undefined> {
  try {
    const response = await openai.images.generate({
      model: "dall-e-3",
      prompt: prompt,
      size: "1024x1024",
      quality: "standard",
      n: 1,
    });

    return response.data[0]?.url;
  } catch (error) {
    console.error('Failed to generate image:', error);
    return undefined;
  }
}

// Generate sports article using GPT
export async function generateSportsArticle(
  game: Game,
  team: Team,
  writerPersonality: string,
  writerName: string
): Promise<string> {
  const won = game.result === 'W';
  const margin = Math.abs(game.score.for - game.score.against);
  const isBlowout = margin > 20;
  const isClose = margin <= 7;
  
  const prompt = `You are ${writerName}, a ${writerPersonality} college football writer covering the ${team.name} ${team.mascot}. 
  
Write a detailed 8-12 paragraph article about this game:
- ${team.name} ${won ? 'defeated' : 'lost to'} ${game.opponent} ${game.score.for}-${game.score.against}
- Location: ${game.location}
- Stats: ${game.stats.passingYards || 0} passing yards, ${game.stats.rushingYards || 0} rushing yards, ${game.stats.turnovers || 0} turnovers

Writing style guidelines:
- ${writerPersonality === 'enthusiastic' ? 'Be passionate and optimistic, use exciting language' : ''}
- ${writerPersonality === 'critical' ? 'Be analytical and critical, point out flaws even in wins' : ''}
- ${writerPersonality === 'analytical' ? 'Focus on statistics, efficiency metrics, and strategic analysis' : ''}
- ${isClose && won ? 'Emphasize the dramatic finish and clutch plays' : ''}
- ${isBlowout && won ? 'Celebrate the dominant performance' : ''}
- ${!won && isBlowout ? 'Be critical of the poor performance' : ''}

Include:
1. Dramatic opening paragraph
2. Key turning point in the game
3. Offensive performance analysis
4. Defensive performance analysis
5. Coaching decisions and strategy
6. Player performances (create realistic player names)
7. What this means for the season
8. Looking ahead

Make it sound like authentic sports journalism with specific details and analysis.`;

  try {
    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [{ role: 'user', content: prompt }],
      temperature: 0.8,
      max_tokens: 1000
    });

    return response.choices[0].message.content || 'Article generation failed.';
  } catch (error) {
    console.error('OpenAI API error:', error);
    // Fallback to template if API fails
    return `The ${team.mascot} ${won ? 'secured a' : 'suffered a'} ${margin}-point ${won ? 'victory' : 'defeat'} against ${game.opponent}. [API Error - Using Fallback]`;
  }
}

// Generate forum responses using GPT
export async function generateForumResponse(
  userPost: string,
  threadContext: string,
  team: Team,
  archetype: string,
  recentGames?: Game[]
): Promise<AIGeneratedContent> {
  const recentRecord = recentGames ? 
    `Recent record: ${recentGames.filter(g => g.result === 'W').length}-${recentGames.filter(g => g.result === 'L').length}` : 
    '';

  const prompt = `You are a ${team.mascot} fan on a sports forum with this personality: ${archetype}

Thread context: ${threadContext}
User posted: "${userPost}"
${recentRecord}

Respond as this type of fan:
- ${archetype === 'eternal-optimist' ? 'Always positive, finds silver linings, believes in the team no matter what' : ''}
- ${archetype === 'stats-nerd' ? 'Focuses on statistics, analytics, efficiency metrics' : ''}
- ${archetype === 'old-timer' ? 'References past seasons, compares to historical teams, nostalgic' : ''}
- ${archetype === 'doomer' ? 'Pessimistic, expects the worst, critical of everything' : ''}
- ${archetype === 'reasonable' ? 'Balanced takes, sees both sides, rational analysis' : ''}

Keep response under 100 words. Be authentic to the archetype. Use forum-style casual language.`;

  try {
    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [{ role: 'user', content: prompt }],
      temperature: 0.9,
      max_tokens: 150
    });

    return {
      content: response.choices[0].message.content || 'I agree with that take.',
      archetype
    };
  } catch (error) {
    console.error('OpenAI API error:', error);
    // Fallback response
    return {
      content: 'Interesting point. What does everyone else think?',
      archetype
    };
  }
}

// Generate dynamic news ticker items
export async function generateTickerItem(
  team: Team,
  games: Game[],
  recruits: Recruit[],
  season: Season
): Promise<string> {
  const lastGame = games[games.length - 1];
  const recentCommits = recruits.filter(r => r.status === 'Committed').slice(-3);
  
  const context = `Team: ${team.name} ${team.mascot}
Current record: ${season.overallRecord.wins}-${season.overallRecord.losses}
Last game: ${lastGame ? `${lastGame.result === 'W' ? 'Won' : 'Lost'} vs ${lastGame.opponent} ${lastGame.score.for}-${lastGame.score.against}` : 'No games yet'}
Recent commits: ${recentCommits.map(r => `${r.stars}‚≠ê ${r.position} ${r.name}`).join(', ')}
${season.ranking ? `Currently ranked #${season.ranking}` : 'Unranked'}`;

  const prompt = `Generate a single breaking news ticker item (under 20 words) for a college football team based on this context:
${context}

Make it exciting and newsworthy. Examples: recruiting news, game results, rankings, injury updates, etc.`;

  try {
    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [{ role: 'user', content: prompt }],
      temperature: 0.9,
      max_tokens: 50
    });

    return response.choices[0].message.content?.trim() || 'Breaking: Check back for updates';
  } catch (error) {
    console.error('OpenAI API error:', error);
    return `${team.mascot} ${season.overallRecord.wins}-${season.overallRecord.losses} ‚Ä¢ Check back for updates`;
  }
}

// Generate coach hot seat discussion
export async function generateCoachingDiscussion(
  coachName: string,
  record: string,
  hotSeat: boolean,
  team: Team,
  recentGames: Game[]
): Promise<string> {
  const losses = recentGames.filter(g => g.result === 'L').length;
  const blowoutLosses = recentGames.filter(g => 
    g.result === 'L' && Math.abs(g.score.for - g.score.against) > 20
  ).length;

  const prompt = `Write a forum post about ${team.name} coach ${coachName} (Record: ${record}).
${hotSeat ? 'Coach is on the hot seat.' : 'Coach is not currently on hot seat.'}
Recent performance: ${losses} losses in last ${recentGames.length} games, ${blowoutLosses} blowouts.

Write as a passionate fan. 50-75 words. ${hotSeat ? 'Be critical but fair' : 'Be supportive but honest'}.`;

  try {
    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [{ role: 'user', content: prompt }],
      temperature: 0.8,
      max_tokens: 100
    });

    return response.choices[0].message.content || `${coachName}'s future remains uncertain.`;
  } catch (error) {
    console.error('OpenAI API error:', error);
    return `${coachName} needs to turn things around quickly. The fanbase is getting restless.`;
  }
}

// Generate recruiting pitch
export async function generateRecruitingPost(
  recruit: Recruit,
  team: Team,
  currentCommits: number
): Promise<string> {
  const prompt = `Write an excited forum post about ${recruit.stars}-star ${recruit.position} ${recruit.name} from ${recruit.hometown}, ${recruit.state} ${recruit.status === 'Committed' ? 'committing to' : 'considering'} ${team.name}.
Current recruiting class has ${currentCommits} commits.

Write as an enthusiastic fan. 40-60 words. Include why this is important for the program.`;

  try {
    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [{ role: 'user', content: prompt }],
      temperature: 0.9,
      max_tokens: 80
    });

    return response.choices[0].message.content || `Great pickup for the ${team.mascot}!`;
  } catch (error) {
    console.error('OpenAI API error:', error);
    return `${recruit.name} would be a huge get for our ${recruit.position} room. Fingers crossed!`;
  }
}
</file>

<file path="src/stores/aiSettingsStore.ts">
import { create } from 'zustand';
import { persist } from 'zustand/middleware';

export interface AIContentSettings {
  // Core content - always enabled for user's team
  coreContent: {
    gameRecaps: boolean;
    recruitingNews: boolean;
    teamAnalysis: boolean;
  };
  
  // Extended coverage - user configurable
  extendedCoverage: {
    rivalTeamNews: boolean;
    conferenceRoundups: boolean;
    nationalStorylines: boolean;
    opponentPreviews: boolean;
  };
  
  // Smart features
  smartFeatures: {
    autoEnableOpponentContent: boolean;
    autoEnableRankingContent: boolean;
    autoEnablePlayoffContent: boolean;
  };
  
  // Manual overrides for specific teams
  teamSpecificSettings: {
    [teamId: string]: {
      generateContent: boolean;
      contentTypes: ('news' | 'forum' | 'recruiting')[];
    };
  };
}

interface AISettingsStore {
  settings: AIContentSettings;
  updateExtendedCoverage: (key: keyof AIContentSettings['extendedCoverage'], value: boolean) => void;
  updateSmartFeatures: (key: keyof AIContentSettings['smartFeatures'], value: boolean) => void;
  setTeamSpecificSetting: (teamId: string, generateContent: boolean, contentTypes?: ('news' | 'forum' | 'recruiting')[]) => void;
  removeTeamSpecificSetting: (teamId: string) => void;
  shouldGenerateContentForTeam: (teamId: string, userTeamId: string | null, isRival?: boolean, isOpponent?: boolean, isRanked?: boolean) => boolean;
  getContentTypesForTeam: (teamId: string) => ('news' | 'forum' | 'recruiting')[];
  resetToDefaults: () => void;
}

const defaultSettings: AIContentSettings = {
  coreContent: {
    gameRecaps: true,
    recruitingNews: true,
    teamAnalysis: true,
  },
  extendedCoverage: {
    rivalTeamNews: true,
    conferenceRoundups: false,
    nationalStorylines: false,
    opponentPreviews: true,
  },
  smartFeatures: {
    autoEnableOpponentContent: true,
    autoEnableRankingContent: true,
    autoEnablePlayoffContent: true,
  },
  teamSpecificSettings: {},
};

export const useAISettingsStore = create<AISettingsStore>()(
  persist(
    (set, get) => ({
      settings: defaultSettings,
      
      updateExtendedCoverage: (key, value) => set((state) => ({
        settings: {
          ...state.settings,
          extendedCoverage: {
            ...state.settings.extendedCoverage,
            [key]: value,
          },
        },
      })),
      
      updateSmartFeatures: (key, value) => set((state) => ({
        settings: {
          ...state.settings,
          smartFeatures: {
            ...state.settings.smartFeatures,
            [key]: value,
          },
        },
      })),
      
      setTeamSpecificSetting: (teamId, generateContent, contentTypes = ['news', 'forum', 'recruiting']) => 
        set((state) => ({
          settings: {
            ...state.settings,
            teamSpecificSettings: {
              ...state.settings.teamSpecificSettings,
              [teamId]: { generateContent, contentTypes },
            },
          },
        })),
      
      removeTeamSpecificSetting: (teamId) => set((state) => {
        const { [teamId]: _, ...rest } = state.settings.teamSpecificSettings;
        return {
          settings: {
            ...state.settings,
            teamSpecificSettings: rest,
          },
        };
      }),
      
      shouldGenerateContentForTeam: (teamId, userTeamId, isRival = false, isOpponent = false, isRanked = false) => {
        const { settings } = get();
        
        // Always generate content for user's team
        if (teamId === userTeamId) return true;
        
        // Check team-specific overrides first
        if (settings.teamSpecificSettings[teamId]) {
          return settings.teamSpecificSettings[teamId].generateContent;
        }
        
        // Check extended coverage settings
        if (isRival && settings.extendedCoverage.rivalTeamNews) return true;
        if (isOpponent && settings.extendedCoverage.opponentPreviews) return true;
        
        // Check smart features
        if (isOpponent && settings.smartFeatures.autoEnableOpponentContent) return true;
        if (isRanked && settings.smartFeatures.autoEnableRankingContent) return true;
        
        return false;
      },
      
      getContentTypesForTeam: (teamId) => {
        const { settings } = get();
        const teamSettings = settings.teamSpecificSettings[teamId];
        return teamSettings?.contentTypes || ['news', 'forum', 'recruiting'];
      },
      
      resetToDefaults: () => set({ settings: defaultSettings }),
    }),
    {
      name: 'cfb-ai-settings-storage',
    }
  )
);
</file>

<file path="src/stores/coachStore.ts">
import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import type { Coach } from '../types/index';

interface CoachStore {
  coaches: Coach[];
  currentCoachName: string | null;
  addCoach: (coach: Coach) => void;
  updateCoach: (name: string, coach: Partial<Coach>) => void;
  deleteCoach: (name: string) => void;
  setCurrentCoach: (name: string) => void;
  getCurrentCoach: () => Coach | undefined;
  getCoachByName: (name: string) => Coach | undefined;
}

export const useCoachStore = create<CoachStore>()(
  persist(
    (set, get) => ({
      coaches: [],
      currentCoachName: null,
      
      addCoach: (coach) => set((state) => ({ 
        coaches: [...state.coaches, coach],
        currentCoachName: state.coaches.length === 0 ? coach.name : state.currentCoachName
      })),
      
      updateCoach: (name, updatedCoach) => set((state) => ({
        coaches: state.coaches.map((coach) =>
          coach.name === name ? { ...coach, ...updatedCoach } : coach
        ),
      })),
      
      deleteCoach: (name) => set((state) => ({
        coaches: state.coaches.filter((coach) => coach.name !== name),
        currentCoachName: state.currentCoachName === name ? null : state.currentCoachName,
      })),
      
      setCurrentCoach: (name) => set(() => ({ 
        currentCoachName: name 
      })),
      
      getCurrentCoach: () => {
        const { coaches, currentCoachName } = get();
        return coaches.find((coach) => coach.name === currentCoachName);
      },
      
      getCoachByName: (name) => {
        return get().coaches.find((coach) => coach.name === name);
      },
    }),
    {
      name: 'cfb-coach-storage',
    }
  )
);
</file>

<file path="src/stores/gameStore.ts">
import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import type { Game } from '../types/index';

interface GameStore {
  games: Game[];
  addGame: (game: Game) => void;
  updateGame: (id: string, game: Partial<Game>) => void;
  deleteGame: (id: string) => void;
  getGameById: (id: string) => Game | undefined;
  getGamesBySeasonId: (seasonId: string) => Game[];
}

export const useGameStore = create<GameStore>()(
  persist(
    (set, get) => ({
      games: [],
      
      addGame: (game) => set((state) => ({ 
        games: [...state.games, game] 
      })),
      
      updateGame: (id, updatedGame) => set((state) => ({
        games: state.games.map((game) =>
          game.id === id ? { ...game, ...updatedGame } : game
        ),
      })),
      
      deleteGame: (id) => set((state) => ({
        games: state.games.filter((game) => game.id !== id),
      })),
      
      getGameById: (id) => {
        return get().games.find((game) => game.id === id);
      },
      
      getGamesBySeasonId: (seasonId) => {
        // This will be implemented when we link games to seasons
        return get().games;
      },
    }),
    {
      name: 'cfb-game-storage',
    }
  )
);
</file>

<file path="src/stores/playerStore.ts">
import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import type { Player } from '../types/index';

interface PlayerStore {
  players: Player[];
  addPlayer: (player: Player) => void;
  updatePlayer: (id: string, player: Partial<Player>) => void;
  deletePlayer: (id: string) => void;
  getPlayerById: (id: string) => Player | undefined;
  getPlayersByPosition: (position: string) => Player[];
  getPlayersByClass: (playerClass: Player['class']) => Player[];
}

export const usePlayerStore = create<PlayerStore>()(
  persist(
    (set, get) => ({
      players: [],
      
      addPlayer: (player) => set((state) => ({ 
        players: [...state.players, player] 
      })),
      
      updatePlayer: (id, updatedPlayer) => set((state) => ({
        players: state.players.map((player) =>
          player.id === id ? { ...player, ...updatedPlayer } : player
        ),
      })),
      
      deletePlayer: (id) => set((state) => ({
        players: state.players.filter((player) => player.id !== id),
      })),
      
      getPlayerById: (id) => {
        return get().players.find((player) => player.id === id);
      },
      
      getPlayersByPosition: (position) => {
        return get().players.filter((player) => player.position === position);
      },
      
      getPlayersByClass: (playerClass) => {
        return get().players.filter((player) => player.class === playerClass);
      },
    }),
    {
      name: 'cfb-player-storage',
    }
  )
);
</file>

<file path="src/stores/recruitStore.ts">
import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import type { Recruit } from '../types/index';

interface RecruitStore {
  recruits: Recruit[];
  addRecruit: (recruit: Recruit) => void;
  updateRecruit: (id: string, recruit: Partial<Recruit>) => void;
  deleteRecruit: (id: string) => void;
  getRecruitById: (id: string) => Recruit | undefined;
  getRecruitsByYear: (year: number) => Recruit[];
  getRecruitsByStatus: (status: Recruit['status']) => Recruit[];
  commitRecruit: (id: string) => void;
  signRecruit: (id: string, playerId: string) => void;
}

export const useRecruitStore = create<RecruitStore>()(
  persist(
    (set, get) => ({
      recruits: [],
      
      addRecruit: (recruit) => set((state) => ({ 
        recruits: [...state.recruits, recruit] 
      })),
      
      updateRecruit: (id, updatedRecruit) => set((state) => ({
        recruits: state.recruits.map((recruit) =>
          recruit.id === id ? { ...recruit, ...updatedRecruit } : recruit
        ),
      })),
      
      deleteRecruit: (id) => set((state) => ({
        recruits: state.recruits.filter((recruit) => recruit.id !== id),
      })),
      
      getRecruitById: (id) => {
        return get().recruits.find((recruit) => recruit.id === id);
      },
      
      getRecruitsByYear: (year) => {
        return get().recruits.filter((recruit) => recruit.signedYear === year);
      },
      
      getRecruitsByStatus: (status) => {
        return get().recruits.filter((recruit) => recruit.status === status);
      },
      
      commitRecruit: (id) => set((state) => ({
        recruits: state.recruits.map((recruit) =>
          recruit.id === id ? { ...recruit, status: 'Committed' } : recruit
        ),
      })),
      
      signRecruit: (id, playerId) => set((state) => ({
        recruits: state.recruits.map((recruit) =>
          recruit.id === id ? { ...recruit, status: 'Signed', playerId } : recruit
        ),
      })),
    }),
    {
      name: 'cfb-recruit-storage',
    }
  )
);
</file>

<file path="src/stores/seasonStore.ts">
import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import type { Season } from '../types/index';

interface SeasonStore {
  seasons: Season[];
  currentSeasonId: string | null;
  addSeason: (season: Season) => void;
  updateSeason: (id: string, season: Partial<Season>) => void;
  deleteSeason: (id: string) => void;
  setCurrentSeason: (id: string) => void;
  getCurrentSeason: () => Season | undefined;
  getSeasonById: (id: string) => Season | undefined;
}

export const useSeasonStore = create<SeasonStore>()(
  persist(
    (set, get) => ({
      seasons: [],
      currentSeasonId: null,
      
      addSeason: (season) => set((state) => ({ 
        seasons: [...state.seasons, season],
        // Set as current season if it's the first one
        currentSeasonId: state.seasons.length === 0 ? season.id : state.currentSeasonId
      })),
      
      updateSeason: (id, updatedSeason) => set((state) => ({
        seasons: state.seasons.map((season) =>
          season.id === id ? { ...season, ...updatedSeason } : season
        ),
      })),
      
      deleteSeason: (id) => set((state) => ({
        seasons: state.seasons.filter((season) => season.id !== id),
        currentSeasonId: state.currentSeasonId === id ? null : state.currentSeasonId,
      })),
      
      setCurrentSeason: (id) => set(() => ({ 
        currentSeasonId: id 
      })),
      
      getCurrentSeason: () => {
        const { seasons, currentSeasonId } = get();
        return seasons.find((season) => season.id === currentSeasonId);
      },
      
      getSeasonById: (id) => {
        return get().seasons.find((season) => season.id === id);
      },
    }),
    {
      name: 'cfb-season-storage',
    }
  )
);
</file>

<file path="src/stores/teamStore.ts">
import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import type { Team } from '../types/index';

interface TeamStore {
  teams: Team[];
  userTeamId: string | null;
  addTeam: (team: Team) => void;
  updateTeam: (id: string, team: Partial<Team>) => void;
  deleteTeam: (id: string) => void;
  setUserTeam: (id: string) => void;
  getUserTeam: () => Team | undefined;
  getTeamById: (id: string) => Team | undefined;
  getRivals: () => Team[];
}

export const useTeamStore = create<TeamStore>()(
  persist(
    (set, get) => ({
      teams: [],
      userTeamId: null,
      
      addTeam: (team) => set((state) => ({ 
        teams: [...state.teams, team] 
      })),
      
      updateTeam: (id, updatedTeam) => set((state) => ({
        teams: state.teams.map((team) =>
          team.id === id ? { ...team, ...updatedTeam } : team
        ),
      })),
      
      deleteTeam: (id) => set((state) => ({
        teams: state.teams.filter((team) => team.id !== id),
        userTeamId: state.userTeamId === id ? null : state.userTeamId,
      })),
      
      setUserTeam: (id) => set(() => ({ 
        userTeamId: id 
      })),
      
      getUserTeam: () => {
        const { teams, userTeamId } = get();
        return teams.find((team) => team.id === userTeamId);
      },
      
      getTeamById: (id) => {
        return get().teams.find((team) => team.id === id);
      },
      
      getRivals: () => {
        return get().teams.filter((team) => team.isRival);
      },
    }),
    {
      name: 'cfb-team-storage',
    }
  )
);
</file>

<file path="src/types/index.ts">
export type Game = {
  id: string;
  date: string;
  week: number;
  opponent: string;
  location: 'Home' | 'Away' | 'Neutral';
  result: 'W' | 'L';
  score: { for: number; against: number };
  rivalry?: boolean;
  conferenceGame?: boolean;
  bowlGame?: string;
  playoffGame?: boolean;
  stats: {
    passingYards?: number;
    passingTDs?: number;
    rushingYards?: number;
    rushingTDs?: number;
    turnovers?: number;
    sacks?: number;
    interceptions?: number;
  };
  opponentStats?: {
    passingYards?: number;
    passingTDs?: number;
    rushingYards?: number;
    rushingTDs?: number;
    turnovers?: number;
    sacks?: number;
    interceptions?: number;
  };
  screenshotUploaded?: boolean;
  ocrExtracted?: boolean;
  bypassed?: boolean;
  notes?: string;
};

export type Player = {
  id: string;
  name: string;
  position: string;
  class: 'FR' | 'SO' | 'JR' | 'SR' | 'RS';
  jerseyNumber?: number;
  hometown?: string;
  statsBySeason: Record<string, any>;
  awards?: string[];
  storyNotes?: string;
  overall?: number;
  depthPosition?: string; // Position on depth chart (e.g., "QB1", "RB2", etc.)
};

export type Coach = {
  id: string;
  coachName: string;
  name: string; // Alias for compatibility
  startYear: number;
  endYear?: number;
  record: string;
  wins: number;
  losses: number;
  championships: number;
  style: string;
  hotSeat: boolean;
  reasonLeft?: string;
};

export type Recruit = {
  id: string;
  name: string;
  stars: 2 | 3 | 4 | 5;
  position: string;
  state: string;
  hometown?: string;
  status: 'Interested' | 'Committed' | 'Signed';
  signedYear: number;
  playerId?: string;
  otherOffers?: string[];
};

export type DynastyEvent = {
  id: string;
  year: number;
  title: string;
  type: 'Game' | 'Season' | 'Player' | 'Scandal' | 'Milestone' | 'Comeback';
  description: string;
  impact: string;
};

export type Season = {
  id: string;
  year: number;
  teamName: string;
  conference: string;
  division?: string;
  games: string[]; // Array of Game IDs
  conferenceRecord: { wins: number; losses: number };
  overallRecord: { wins: number; losses: number };
  ranking?: number;
  bowlGame?: string;
  championshipWon?: 'Conference' | 'Division' | 'National';
  coachId: string;
  captains?: string[]; // Array of Player IDs
  preseasonGoals?: string[];
  seasonSummary?: string;
};

export type Team = {
  id: string;
  name: string;
  mascot: string;
  conference: string;
  primaryColor: string;
  secondaryColor: string;
  logo?: string; // URL or base64
  stadium?: string;
  isRival: boolean;
  rivalryName?: string; // e.g., "The Iron Bowl"
  historicalRecord?: { wins: number; losses: number };
  lastPlayed?: string;
  notes?: string;
};
</file>

<file path="src/utils/AIContentGenerator.ts">
import type { Game, Player, Recruit, Season, Team, Coach } from '../types/index';
import { generateSportsArticle, generateTickerItem, generateArticleImage } from '../services/OpenAIService';

// Forum name generators based on team mascot/identity (unique names with similar feel)
export const getForumName = (team: Team): string => {
  const forumNames: Record<string, string> = {
    // SEC
    'alabama': 'Crimson Chronicles',
    'arkansas': 'Razorback Rally', 
    'auburn': 'Tiger Tailgate',
    'florida': 'Swamp Central',
    'georgia': 'Bulldog Nation Hub',
    'kentucky': 'Wildcat Watch',
    'lsu': 'Bayou Breakdown',
    'mississippi-state': 'Cowbell Corner',
    'missouri': 'Tiger Town Talk',
    'oklahoma': 'Boomer Base',
    'ole-miss': 'Rebel Rendezvous',
    'south-carolina': 'Gamecock Grounds',
    'tennessee': 'Rocky Top Forum',
    'texas': 'Longhorn Lounge',
    'texas-am': 'Aggie Assembly',
    'vanderbilt': 'Commodore Connect',
    
    // Big Ten
    'michigan': 'Maize & Blue Central',
    'michigan-state': 'Green & White Hub',
    'ohio-state': 'Scarlet & Gray Station',
    'penn-state': 'Nittany Nation',
    'wisconsin': 'Badger Den',
    'iowa': 'Hawkeye Haven',
    'nebraska': 'Cornhusker Corner',
    'minnesota': 'Golden Gopher Grounds',
    'illinois': 'Fighting Illini Forum',
    'indiana': 'Hoosier Huddle',
    'purdue': 'Boilermaker Base',
    'northwestern': 'Purple Pride Plaza',
    'maryland': 'Turtle Talk',
    'rutgers': 'Scarlet Knight Central',
    'oregon': 'Duck Dynasty Forum',
    'washington': 'Husky Hangout',
    'usc': 'Trojan Territory',
    'ucla': 'Bruin Base',
    
    // Big 12
    'texas-tech': 'Red Raider Rally',
    'oklahoma-state': 'Cowboy Central',
    'baylor': 'Bear Cave',
    'tcu': 'Horned Frog Hub',
    'kansas': 'Jayhawk Junction',
    'kansas-state': 'Wildcat Way',
    'iowa-state': 'Cyclone Station',
    'west-virginia': 'Mountaineer Manor',
    'cincinnati': 'Bearcat Boulevard',
    'houston': 'Cougar Corner',
    'ucf': 'Knight Watch',
    'byu': 'Cougar Connection',
    'colorado': 'Buffalo Base',
    'arizona': 'Desert Wildcat Den',
    'arizona-state': 'Sun Devil Central',
    'utah': 'Ute Territory',
    
    // ACC
    'clemson': 'Tiger Town Forum',
    'florida-state': 'Seminole Central',
    'miami': 'Hurricane Hub', 
    'virginia-tech': 'Hokie Haven',
    'north-carolina': 'Tar Heel Talk',
    'nc-state': 'Wolfpack Way',
    'duke': 'Blue Devil Den',
    'georgia-tech': 'Yellow Jacket Junction',
    'louisville': 'Cardinal Central',
    'pitt': 'Panther Plaza',
    'syracuse': 'Orange Outlook',
    'wake-forest': 'Demon Deacon Depot',
    'boston-college': 'Eagle Eyrie',
    'virginia': 'Cavalier Corner',
    'california': 'Golden Bear Grove',
    'stanford': 'Cardinal Corner',
    'smu': 'Mustang Meadows',
    
    // Independent/Other
    'notre-dame': 'Irish Impact',
    'army': 'Black Knight Brigade',
    'navy': 'Midshipman Marina',
    
    // Default fallback pattern
  };
  
  return forumNames[team.id] || `${team.mascot} Nation`;
};

// Generate forum usernames based on team
export const generateForumUsername = (team: Team, index: number): string => {
  const prefixes = [
    team.mascot,
    team.name.split(' ')[0],
    team.primaryColor.substring(1, 4).toUpperCase(),
    'Die_Hard',
    'True',
    'Loyal',
    'Big',
    'Crazy',
    '4Ever',
  ];
  
  const suffixes = [
    'Fan',
    '4Life',
    'Forever',
    `_${Math.floor(Math.random() * 100)}`,
    `${new Date().getFullYear() - Math.floor(Math.random() * 30)}`,
    'Believer',
    'Nation',
    'Pride',
    '_Guy',
    '_Gal',
  ];
  
  const prefix = prefixes[index % prefixes.length];
  const suffix = suffixes[Math.floor(Math.random() * suffixes.length)];
  
  return `${prefix}${suffix}`;
};

// News Writers with distinct personalities
export const newsWriters: NewsWriter[] = [
  {
    id: 'mike-davidson',
    name: 'Mike Davidson',
    title: 'Senior Beat Writer',
    personality: 'veteran',
    writingStyle: 'analytical',
    bias: 'realistic',
    yearsExperience: 15,
    avatar: 'üë®‚Äçüíº',
    specialties: ['game analysis', 'team strategy'],
    catchphrases: ['The numbers don\'t lie', 'Film study reveals', 'Looking at the tape']
  },
  {
    id: 'sarah-jenkins',
    name: 'Sarah Jenkins', 
    title: 'Recruiting Insider',
    personality: 'enthusiastic',
    writingStyle: 'conversational',
    bias: 'optimistic',
    yearsExperience: 8,
    avatar: 'üë©‚Äçüíª',
    specialties: ['recruiting', 'player development'],
    catchphrases: ['Sources close to the program', 'Big get for the program', 'This kid is special']
  },
  {
    id: 'tommy-taylor',
    name: 'Tommy Taylor',
    title: 'Sports Editor',
    personality: 'critical',
    writingStyle: 'direct',
    bias: 'skeptical',
    yearsExperience: 12,
    avatar: 'üë®‚Äçüì∞',
    specialties: ['coaching decisions', 'program direction'],
    catchphrases: ['Questions remain', 'Time will tell', 'Not so fast']
  },
  {
    id: 'jessica-wong',
    name: 'Jessica Wong',
    title: 'Staff Writer',
    personality: 'balanced',
    writingStyle: 'descriptive',
    bias: 'neutral',
    yearsExperience: 5,
    avatar: 'üë©‚Äç‚úèÔ∏è',
    specialties: ['game recaps', 'player profiles'],
    catchphrases: ['Both sides of the ball', 'The tale of two halves', 'Credit where it\'s due']
  },
  {
    id: 'marcus-williams',
    name: 'Marcus Williams',
    title: 'Senior Analyst',
    personality: 'data-driven',
    writingStyle: 'technical',
    bias: 'analytical',
    yearsExperience: 10,
    avatar: 'üë®‚Äçüíª',
    specialties: ['analytics', 'advanced stats'],
    catchphrases: ['The metrics suggest', 'Statistically speaking', 'Efficiency ratings show']
  }
];

// Get writer based on article type and context
function selectWriter(type: string, team: Team, isPositive: boolean): NewsWriter {
  if (type === 'recruiting') return newsWriters.find(w => w.id === 'sarah-jenkins')!;
  if (type === 'analysis') return newsWriters.find(w => w.id === 'marcus-williams')!;
  
  // For game recaps, vary the writer
  if (isPositive) {
    return Math.random() > 0.5 
      ? newsWriters.find(w => w.id === 'mike-davidson')!
      : newsWriters.find(w => w.id === 'jessica-wong')!;
  } else {
    return newsWriters.find(w => w.id === 'tommy-taylor')!;
  }
}

// Generate image prompt for DALL-E based on article
function generateImagePrompt(article: NewsArticle, team: Team): string {
  const baseStyle = "sports photography, professional lighting, high quality, dynamic composition";
  
  if (article.type === 'game-recap') {
    if (article.headline.includes('Dominate')) {
      return `Triumphant college football players in ${team.primaryColor} uniforms celebrating victory, ${baseStyle}`;
    } else if (article.headline.includes('Fall')) {
      return `Dejected college football players walking off field after tough loss, dramatic lighting, ${baseStyle}`;
    } else {
      return `Intense college football action shot, players in ${team.primaryColor} jerseys, ${baseStyle}`;
    }
  } else if (article.type === 'recruiting') {
    return `Young athlete signing letter of intent, ${team.primaryColor} hat on table, recruitment ceremony, ${baseStyle}`;
  } else if (article.type === 'analysis') {
    return `College football stadium packed with fans in ${team.primaryColor}, aerial view, ${baseStyle}`;
  }
  
  return `College football team ${team.mascot} in action, ${baseStyle}`;
}

// News ticker items generator
export async function generateNewsTicker(
  games: Game[],
  recruits: Recruit[], 
  season: Season,
  team: Team
): Promise<string[]> {
  const ticker: string[] = [];
  
  // Latest game result with actual stats
  const lastGame = games[games.length - 1];
  if (lastGame) {
    ticker.push(`${team.mascot} ${lastGame.result === 'W' ? 'defeat' : 'fall to'} ${lastGame.opponent} ${lastGame.score.for}-${lastGame.score.against}${lastGame.location === 'Away' ? ' on the road' : lastGame.location === 'Home' ? ' at home' : ''}`);
    
    // Add a stat from the game
    if (lastGame.stats.passingYards && lastGame.stats.passingYards > 300) {
      ticker.push(`QB throws for ${lastGame.stats.passingYards} yards in ${lastGame.result === 'W' ? 'victory' : 'defeat'}`);
    } else if (lastGame.stats.rushingYards && lastGame.stats.rushingYards > 200) {
      ticker.push(`${team.mascot} rush for ${lastGame.stats.rushingYards} yards vs ${lastGame.opponent}`);
    }
  }
  
  // Current record with context
  const winPct = (season.overallRecord.wins / (season.overallRecord.wins + season.overallRecord.losses) * 100).toFixed(0);
  ticker.push(`${team.name} sitting at ${season.overallRecord.wins}-${season.overallRecord.losses} (${winPct}%) ‚Ä¢ ${season.conferenceRecord.wins}-${season.conferenceRecord.losses} in conference`);
  
  // Recent commits with more detail
  const recentCommits = recruits.filter(r => r.status === 'Committed').slice(-2);
  recentCommits.forEach(commit => {
    ticker.push(`BREAKING: ${commit.stars}‚≠ê ${commit.position} ${commit.name} (${commit.hometown}, ${commit.state}) commits to ${team.name}`);
  });
  
  // Ranking update with movement
  if (season.ranking) {
    const rankMovement = games.length > 3 ? (Math.random() > 0.5 ? '‚Üë' : '‚Üì') + Math.floor(Math.random() * 3 + 1) : '';
    ticker.push(`${team.mascot} ${rankMovement ? `move ${rankMovement} to` : 'remain at'} #${season.ranking} in latest poll`);
  }
  
  // Winning/losing streak
  const streak = calculateStreak(games);
  if (Math.abs(streak) >= 3) {
    ticker.push(`${team.mascot} ${streak > 0 ? `riding ${streak}-game win streak` : `looking to snap ${Math.abs(streak)}-game skid`}`);
  }
  
  // Conference standings
  if (season.conferenceRecord.wins > 0 || season.conferenceRecord.losses > 0) {
    ticker.push(`${team.name} ${season.conferenceRecord.wins > season.conferenceRecord.losses ? 'atop' : 'fighting in'} ${team.conference} standings`);
  }
  
  // Try to add one dynamic AI-generated ticker item
  try {
    const aiTicker = await generateTickerItem(team, games, recruits, season);
    if (aiTicker) {
      ticker.push(aiTicker);
    }
  } catch (error) {
    console.log('OpenAI ticker generation failed, using templates only');
  }
  
  return ticker;
}

// Helper function to calculate win/loss streak
function calculateStreak(games: Game[]): number {
  if (games.length === 0) return 0;
  
  let streak = 0;
  const recentGames = [...games].reverse();
  const firstResult = recentGames[0].result;
  
  for (const game of recentGames) {
    if (game.result === firstResult) {
      streak += firstResult === 'W' ? 1 : -1;
    } else {
      break;
    }
  }
  
  return streak;
}

// News headline generators with writer personalities
export const generateNewsHeadlines = async (
  games: Game[],
  recruits: Recruit[],
  season: Season,
  team: Team,
  players: Player[]
): Promise<NewsArticle[]> => {
  const articles: NewsArticle[] = [];
  const recentGames = games.slice(-3).reverse();
  
  // Generate articles based on recent games
  for (const game of recentGames) {
    const isWin = game.result === 'W';
    const isBlowout = Math.abs(game.score.for - game.score.against) > 20;
    const isClose = Math.abs(game.score.for - game.score.against) <= 7;
    const writer = selectWriter('game-recap', team, isWin);
    
    let headline = '';
    let subheadline = '';
    
    // Adjust headline based on writer personality
    if (writer.personality === 'critical' && !isWin) {
      headline = `${team.mascot} Exposed in ${game.score.against}-${game.score.for} Loss to ${game.opponent}`;
      subheadline = 'Troubling signs emerge as team struggles on both sides of the ball';
    } else if (writer.personality === 'enthusiastic' && isWin) {
      headline = `${team.mascot} Spectacular in ${game.score.for}-${game.score.against} Victory Over ${game.opponent}!`;
      subheadline = 'Another dominant performance shows this team is for real';
    } else if (writer.personality === 'analytical') {
      headline = `By the Numbers: ${team.mascot} ${isWin ? 'Defeat' : 'Fall to'} ${game.opponent} ${game.score.for}-${game.score.against}`;
      subheadline = `Statistical breakdown reveals ${isWin ? 'efficient performance' : 'areas of concern'}`;
    } else {
      // Default headlines
      if (isWin && isBlowout) {
        headline = `${team.mascot} Dominate ${game.opponent} in ${game.score.for}-${game.score.against} Victory`;
        subheadline = `${team.name} cruises to easy win in ${game.location === 'Home' ? 'front of home crowd' : game.location === 'Away' ? 'hostile territory' : 'neutral site showdown'}`;
      } else if (isWin && isClose) {
        headline = `${team.mascot} Edge ${game.opponent} in Thrilling ${game.score.for}-${game.score.against} Victory`;
        subheadline = 'Last-minute heroics seal the deal for ' + team.name;
      } else {
        headline = `${team.mascot} Fall to ${game.opponent} ${game.score.against}-${game.score.for}`;
        subheadline = game.rivalry ? 'Rivalry loss stings for ' + team.name : 'Tough road loss for the ' + team.mascot;
      }
    }
    
    const content = await generateGameRecap(game, team, isWin ? (isBlowout ? 'blowout-win' : 'close-win') : 'loss', writer);
    
    const imagePrompt = generateImagePrompt({ type: 'game-recap', headline } as NewsArticle, team);
    let imageUrl: string | undefined;
    
    // Try to generate image, but don't block if it fails
    try {
      imageUrl = await generateArticleImage(imagePrompt);
    } catch (error) {
      console.log('Failed to generate article image:', error);
    }
    
    articles.push({
      id: `news-${game.id}`,
      headline,
      subheadline,
      content,
      date: game.date,
      type: 'game-recap',
      author: writer.name,
      authorTitle: writer.title,
      imagePrompt,
      imageUrl
    });
  }
  
  // Generate recruiting news
  const recentCommits = recruits.filter(r => r.status === 'Committed').slice(-2);
  const recruitingWriter = newsWriters.find(w => w.id === 'sarah-jenkins')!;
  
  recentCommits.forEach(recruit => {
    const article = {
      id: `news-recruit-${recruit.id}`,
      headline: `${recruit.stars}-Star ${recruit.position} ${recruit.name} Commits to ${team.name}`,
      subheadline: `${recruitingWriter.catchphrases[2]}! ${team.mascot} land talented prospect from ${recruit.state}`,
      content: generateRecruitingArticle(recruit, team, recruitingWriter),
      date: new Date().toISOString().split('T')[0],
      type: 'recruiting' as const,
      author: recruitingWriter.name,
      authorTitle: recruitingWriter.title,
      imagePrompt: generateImagePrompt({ type: 'recruiting' } as NewsArticle, team)
    };
    
    articles.push(article);
  });
  
  // Season outlook article
  if (season.overallRecord.wins >= 8) {
    const analyst = newsWriters.find(w => w.id === 'marcus-williams')!;
    articles.push({
      id: 'news-season-outlook',
      headline: `${analyst.catchphrases[0]}: ${team.mascot} Playoff Chances Improving`,
      subheadline: `At ${season.overallRecord.wins}-${season.overallRecord.losses}, statistical models show promising outlook`,
      content: generateSeasonOutlook(season, team, analyst),
      date: new Date().toISOString().split('T')[0],
      type: 'analysis',
      author: analyst.name,
      authorTitle: analyst.title,
      imagePrompt: generateImagePrompt({ type: 'analysis' } as NewsArticle, team)
    });
  }
  
  return articles.slice(0, 6);
};

// Forum post generators
export const generateForumPosts = (
  games: Game[],
  recruits: Recruit[],
  season: Season,
  team: Team,
  coach: Coach,
  players: Player[]
): ForumPost[] => {
  const posts: ForumPost[] = [];
  const lastGame = games[games.length - 1];
  const recentGames = games.slice(-5);
  const forumName = getForumName(team);
  
  // Calculate win streak
  const streak = calculateStreak(games);
  const winPct = games.length > 0 ? (games.filter(g => g.result === 'W').length / games.length * 100).toFixed(0) : '0';
  
  // Post-game reactions based on actual results
  if (lastGame) {
    const margin = Math.abs(lastGame.score.for - lastGame.score.against);
    const isBlowout = margin > 20;
    const isClose = margin <= 7;
    const isUpset = lastGame.location === 'Away' && lastGame.result === 'W' && margin > 14;
    
    if (lastGame.result === 'W') {
      // Win reactions vary by game type
      if (isBlowout) {
        posts.push({
          id: `forum-${Date.now()}-1`,
          title: `${lastGame.opponent} Game Thread - TOTAL DOMINATION! ${lastGame.score.for}-${lastGame.score.against}`,
          author: generateForumUsername(team, 0),
          content: `STATEMENT WIN! We absolutely destroyed ${lastGame.opponent}. ${lastGame.stats.rushingYards > 200 ? `${lastGame.stats.rushingYards} rushing yards!` : `${lastGame.stats.passingYards} through the air!`} This team is SPECIAL!`,
          replies: Math.floor(Math.random() * 100) + 150,
          views: Math.floor(Math.random() * 2000) + 3000,
          lastActivity: '1 hour ago',
          category: 'game-thread',
          isPinned: true
        });
      } else if (isClose) {
        posts.push({
          id: `forum-${Date.now()}-1`,
          title: `${lastGame.opponent} Game Thread - CARDIAC ${team.mascot.toUpperCase()}! ${lastGame.score.for}-${lastGame.score.against}`,
          author: generateForumUsername(team, 0),
          content: `My heart can't take these close games! What a finish! ${lastGame.stats.turnovers === 0 ? 'Zero turnovers was the key.' : 'We survived despite the turnovers.'} Great team win!`,
          replies: Math.floor(Math.random() * 80) + 80,
          views: Math.floor(Math.random() * 1500) + 2000,
          lastActivity: '2 hours ago',
          category: 'game-thread',
          isPinned: true
        });
      } else {
        posts.push({
          id: `forum-${Date.now()}-1`,
          title: `${lastGame.opponent} Game Thread - ${team.mascot} WIN ${lastGame.score.for}-${lastGame.score.against}!`,
          author: generateForumUsername(team, 0),
          content: `Solid ${lastGame.location === 'Away' ? 'road' : lastGame.location === 'Home' ? 'home' : 'neutral site'} win! ${streak > 2 ? `That's ${Math.abs(streak)} in a row!` : 'Back in the win column!'} ${(lastGame.stats.passingYards || 0) + (lastGame.stats.rushingYards || 0) > 450 ? 'Offense was clicking!' : 'Defense stepped up big time!'}`,
          replies: Math.floor(Math.random() * 60) + 40,
          views: Math.floor(Math.random() * 1000) + 1200,
          lastActivity: '3 hours ago',
          category: 'game-thread',
          isPinned: true
        });
      }
      
      // Player performance thread for wins
      if (lastGame.stats.passingTDs >= 3 || lastGame.stats.rushingTDs >= 2) {
        posts.push({
          id: `forum-${Date.now()}-2`,
          title: `${lastGame.stats.passingTDs >= 3 ? 'QB went OFF today!' : 'Ground game was UNSTOPPABLE!'}`,
          author: generateForumUsername(team, 1),
          content: `${lastGame.stats.passingTDs >= 3 ? `${lastGame.stats.passingTDs} passing TDs and ${lastGame.stats.passingYards} yards!` : `${lastGame.stats.rushingTDs} rushing TDs and ${lastGame.stats.rushingYards} yards on the ground!`} This is what we've been waiting for!`,
          replies: Math.floor(Math.random() * 40) + 20,
          views: Math.floor(Math.random() * 600) + 400,
          lastActivity: '4 hours ago',
          category: 'game-thread'
        });
      }
    } else {
      // Loss reactions vary by severity
      if (isBlowout) {
        posts.push({
          id: `forum-${Date.now()}-3`,
          title: `${lastGame.opponent} Game Thread - Embarrassing. ${lastGame.score.against}-${lastGame.score.for}`,
          author: generateForumUsername(team, 2),
          content: `That was pathetic. ${lastGame.stats.turnovers >= 3 ? `${lastGame.stats.turnovers} turnovers!` : `Only ${(lastGame.stats.passingYards || 0) + (lastGame.stats.rushingYards || 0)} total yards?`} ${coach.hotSeat ? 'This coaching staff is in over their heads.' : 'Major changes needed NOW.'}`,
          replies: Math.floor(Math.random() * 150) + 200,
          views: Math.floor(Math.random() * 3000) + 4000,
          lastActivity: '30 minutes ago',
          category: 'game-thread'
        });
        
        posts.push({
          id: `forum-${Date.now()}-4`,
          title: coach.hotSeat ? 'üî• HOT SEAT WATCH üî•' : 'What is wrong with this team?',
          author: generateForumUsername(team, 3),
          content: coach.hotSeat ? 
            `${coach.coachName} is ${coach.wins}-${coach.losses} overall. ${coach.championships === 0 ? 'ZERO championships.' : `Only ${coach.championships} championship${coach.championships > 1 ? 's' : ''}.`} How much longer?` :
            `Getting blown out ${lastGame.location === 'Home' ? 'AT HOME' : 'on the road'} is unacceptable. ${streak < -2 ? `${Math.abs(streak)} losses in a row!` : 'This can\'t continue.'}`,
          replies: Math.floor(Math.random() * 200) + 300,
          views: Math.floor(Math.random() * 4000) + 5000,
          lastActivity: '15 minutes ago',
          category: 'coaching'
        });
      } else if (isClose) {
        posts.push({
          id: `forum-${Date.now()}-3`,
          title: `Gut-wrenching loss to ${lastGame.opponent} ${lastGame.score.against}-${lastGame.score.for}`,
          author: generateForumUsername(team, 2),
          content: `So close yet so far. ${lastGame.stats.turnovers > 0 ? `Those ${lastGame.stats.turnovers} turnover${lastGame.stats.turnovers > 1 ? 's' : ''} killed us.` : 'Just couldn\'t make plays when it mattered.'} This one hurts.`,
          replies: Math.floor(Math.random() * 80) + 60,
          views: Math.floor(Math.random() * 1200) + 1000,
          lastActivity: '1 hour ago',
          category: 'game-thread'
        });
      } else {
        posts.push({
          id: `forum-${Date.now()}-3`,
          title: `${lastGame.opponent} ${lastGame.score.against}, ${team.name} ${lastGame.score.for} - Post Game Thread`,
          author: generateForumUsername(team, 2),
          content: `Disappointing loss. ${(lastGame.stats.passingYards || 0) + (lastGame.stats.rushingYards || 0) < 300 ? 'Offense was anemic.' : 'Defense couldn\'t get stops.'} ${season.overallRecord.losses >= 4 ? 'Season slipping away...' : 'Need to bounce back fast.'}`,
          replies: Math.floor(Math.random() * 60) + 50,
          views: Math.floor(Math.random() * 800) + 800,
          lastActivity: '2 hours ago',
          category: 'game-thread'
        });
      }
    }
  }
  
  // Recruiting posts based on actual recruits
  const commits = recruits.filter(r => r.status === 'Committed');
  const targets = recruits.filter(r => r.stars >= 4 && r.status === 'Interested');
  const recentCommit = commits[commits.length - 1];
  
  if (recentCommit) {
    posts.push({
      id: `forum-${Date.now()}-5`,
      title: `üéâ BOOM! ${recentCommit.stars}‚≠ê ${recentCommit.position} ${recentCommit.name} COMMITS!`,
      author: generateForumUsername(team, 4),
      content: `LET'S GO! Welcome to the ${team.mascot} family! Kid from ${recentCommit.hometown}, ${recentCommit.state}. ${commits.length >= 10 ? `That's ${commits.length} commits in this class!` : 'Building something special!'} ${recentCommit.stars >= 4 ? 'HUGE get!' : 'Love this pickup!'}`,
      replies: Math.floor(Math.random() * 100) + 50,
      views: Math.floor(Math.random() * 1500) + 1000,
      lastActivity: '5 hours ago',
      category: 'recruiting',
      isPinned: true
    });
  }
  
  if (targets.length > 0) {
    const topTarget = targets[0];
    posts.push({
      id: `forum-${Date.now()}-6`,
      title: `[Recruiting] Tracking ${topTarget.stars}‚≠ê ${topTarget.position} ${topTarget.name}`,
      author: generateForumUsername(team, 5),
      content: `Elite prospect from ${topTarget.state}. ${topTarget.stars === 5 ? 'This would be a PROGRAM-CHANGING recruit!' : `Top ${topTarget.position} in the region.`} Hearing we're in good shape but several other schools want him.`,
      replies: Math.floor(Math.random() * 80) + 40,
      views: Math.floor(Math.random() * 1200) + 800,
      lastActivity: '6 hours ago',
      category: 'recruiting'
    });
  }
  
  // Season discussion with real context
  const bowlEligible = season.overallRecord.wins >= 6;
  const conferenceContender = season.conferenceRecord.wins >= Math.floor((season.conferenceRecord.wins + season.conferenceRecord.losses) * 0.7);
  
  posts.push({
    id: `forum-${Date.now()}-7`,
    title: `${season.year} Season Thread - ${season.overallRecord.wins}-${season.overallRecord.losses} (${season.conferenceRecord.wins}-${season.conferenceRecord.losses} ${team.conference})`,
    author: generateForumUsername(team, 6),
    content: `${season.ranking ? `Ranked #${season.ranking}! ` : ''}${bowlEligible ? 'Bowl eligible! ' : season.overallRecord.wins >= 4 ? 'Fighting for bowl eligibility. ' : 'Long season... '}${conferenceContender ? `Still in the ${team.conference} race!` : `${winPct}% win rate. ${season.overallRecord.wins >= 8 ? 'Special season developing!' : season.overallRecord.wins <= 3 ? 'Rough year.' : 'Work to do.'}`}`,
    replies: Math.floor(Math.random() * 200) + 234,
    views: Math.floor(Math.random() * 3000) + 4567,
    lastActivity: '8 hours ago',
    category: 'general',
    isPinned: true
  });
  
  // Conference/rival specific posts
  const conferenceRecord = `${season.conferenceRecord.wins}-${season.conferenceRecord.losses}`;
  posts.push({
    id: `forum-${Date.now()}-8`,
    title: `${team.conference} Standings Update - We're ${conferenceRecord}`,
    author: generateForumUsername(team, 7),
    content: `${season.conferenceRecord.wins > season.conferenceRecord.losses ? `Sitting pretty in the ${team.conference}! ` : season.conferenceRecord.wins === 0 && season.conferenceRecord.losses > 0 ? `Winless in conference... ` : `Middle of the pack. `}${games.some(g => g.rivalry) ? 'Rivalry game coming up - MUST WIN!' : `Big conference matchups ahead.`}`,
    replies: Math.floor(Math.random() * 60) + 45,
    views: Math.floor(Math.random() * 800) + 890,
    lastActivity: '10 hours ago',
    category: 'general'
  });
  
  // Coaching discussion based on actual performance
  if (coach.hotSeat || season.overallRecord.losses >= 6) {
    posts.push({
      id: `forum-${Date.now()}-9`,
      title: coach.hotSeat ? `üî• ${coach.coachName} Hot Seat Thread üî•` : 'Honest question about our coaching...',
      author: generateForumUsername(team, 8),
      content: `${coach.coachName} is ${coach.wins}-${coach.losses} all-time. ${coach.hotSeat ? 'The seat is SCORCHING.' : 'Are we headed in the right direction?'} ${coach.championships > 0 ? `Yes, ${coach.championships} championship${coach.championships > 1 ? 's' : ''}, but what have you done lately?` : 'Still waiting for that breakthrough season.'}`,
      replies: Math.floor(Math.random() * 150) + 156,
      views: Math.floor(Math.random() * 2000) + 2341,
      lastActivity: '4 hours ago',
      category: 'coaching'
    });
  }
  
  // Team-specific tradition/culture post
  posts.push({
    id: `forum-${Date.now()}-10`,
    title: `${team.stadium} ${games.filter(g => g.location === 'Home' && g.result === 'W').length > games.filter(g => g.location === 'Home' && g.result === 'L').length ? 'is a FORTRESS!' : 'needs to get LOUDER!'}`,
    author: generateForumUsername(team, 9),
    content: `Home record: ${games.filter(g => g.location === 'Home' && g.result === 'W').length}-${games.filter(g => g.location === 'Home' && g.result === 'L').length}. ${games.filter(g => g.location === 'Home' && g.result === 'W').length > games.filter(g => g.location === 'Home' && g.result === 'L').length ? `Love our home field advantage! ${team.mascot} nation shows up!` : `We need to protect our house better. Get out there and support!`}`,
    replies: Math.floor(Math.random() * 100) + 78,
    views: Math.floor(Math.random() * 1500) + 1234,
    lastActivity: '12 hours ago',
    category: 'off-topic'
  });
  
  // Add some randomness to reply counts and views
  posts.forEach(post => {
    // Add some variance to make it more realistic
    post.views = Math.floor(post.views * (0.8 + Math.random() * 0.4));
    post.replies = Math.floor(post.replies * (0.7 + Math.random() * 0.6));
  });
  
  return posts;
};

// Helper functions for content generation with writer personalities
async function generateGameRecap(game: Game, team: Team, type: string, writer: NewsWriter): Promise<string> {
  // Try to use OpenAI first
  try {
    const article = await generateSportsArticle(game, team, writer.personality, writer.name);
    return article;
  } catch (error) {
    console.log('Falling back to template generation');
    // Fallback to template generation
  }
  
  const paragraphs = [];
  const catchphrase = writer.catchphrases[Math.floor(Math.random() * writer.catchphrases.length)];
  const won = game.result === 'W';
  const margin = Math.abs(game.score.for - game.score.against);
  const isClose = margin <= 7;
  const isBlowout = margin > 20;
  
  // 1. Dramatic intro paragraph (hook or drama setup)
  if (isClose && won) {
    paragraphs.push(
      `${team.stadium || 'The home stadium'} erupted in pandemonium as the final seconds ticked off the clock. After ${game.rivalry ? 'years of frustration in this bitter rivalry' : 'a hard-fought battle'}, the ${team.mascot} had done it. ${team.name} ${game.score.for}, ${game.opponent} ${game.score.against}. The scoreboard told only part of the story of a game that will be remembered for years to come.`
    );
  } else if (isClose && !won) {
    paragraphs.push(
      `The silence was deafening. ${team.stadium || 'The stadium'} sat in stunned disbelief as ${game.opponent} celebrated on the ${team.mascot}' home turf. A ${game.score.against}-${game.score.for} defeat that felt like a punch to the gut, leaving ${team.name} players slumped on the sideline and fans filing out in dismay. This one is going to sting for a while.`
    );
  } else if (isBlowout && won) {
    paragraphs.push(
      `Statement made. Message sent. The ${team.mascot} didn't just beat ${game.opponent} on ${new Date(game.date).toLocaleDateString()} ‚Äì they demolished them. The ${game.score.for}-${game.score.against} final score reflected total domination in every phase of the game, a performance that announced to the college football world that ${team.name} means business.`
    );
  } else {
    paragraphs.push(
      `${catchphrase}. The ${team.mascot} ${won ? 'secured a' : 'suffered a'} ${game.score.for}-${game.score.against} ${won ? 'victory over' : 'defeat to'} ${game.opponent} in ${game.location === 'Home' ? 'front of the home crowd' : game.location === 'Away' ? 'hostile territory' : 'a neutral site battle'}. It was a game that ${won ? 'showcased the team\'s resilience' : 'exposed areas needing immediate attention'}.`
    );
  }
  // 2. Defining moment or swing play
  if (game.stats.turnovers && game.stats.turnovers >= 2) {
    paragraphs.push(
      `The game's momentum shifted dramatically in the ${won ? 'third' : 'second'} quarter when ${won ? `the ${team.mascot} defense came alive with back-to-back turnovers` : `costly turnovers derailed what had been a promising drive`}. ${game.stats.interceptions ? `${game.stats.interceptions} interception${game.stats.interceptions > 1 ? 's' : ''}` : 'The turnovers'} ${won ? 'set up short fields and swung the game decisively' : 'proved to be the difference in a game of slim margins'}.`
    );
  } else if (isClose) {
    paragraphs.push(
      `The pivotal moment came with ${Math.floor(Math.random() * 5) + 3}:${Math.floor(Math.random() * 60).toString().padStart(2, '0')} remaining in the fourth quarter. ${won ? `Facing a crucial third down, the ${team.mascot} offense delivered when it mattered most` : `The ${team.mascot} had their chances, but couldn't convert when it counted`}. That single play encapsulated the entire contest ‚Äì a game decided by the thinnest of margins and the ability to execute under pressure.`
    );
  } else {
    paragraphs.push(
      `From the opening drive, it was clear which team came to play. ${won ? `The ${team.mascot} imposed their will early and often` : `${game.opponent} set the tone immediately`}, ${won ? 'establishing dominance on both lines of scrimmage' : 'leaving the home team searching for answers'}. By halftime, the ${won ? 'rout was on' : 'deficit felt insurmountable'}.`
    );
  }
  // 3. Offensive leaders (key stat line)
  const totalOffense = (game.stats.passingYards || 0) + (game.stats.rushingYards || 0);
  paragraphs.push(
    `Offensively, the ${team.mascot} ${totalOffense > 400 ? 'put on a clinic' : totalOffense > 300 ? 'moved the ball effectively' : 'struggled to find rhythm'}, ` +
    `finishing with ${totalOffense} total yards. The passing game accounted for ${game.stats.passingYards || 0} yards${game.stats.passingTDs ? ` and ${game.stats.passingTDs} touchdown${game.stats.passingTDs > 1 ? 's' : ''}` : ''}, ` +
    `while the ground attack ${game.stats.rushingYards > 150 ? 'pounded away for' : 'managed'} ${game.stats.rushingYards || 0} yards${game.stats.rushingTDs ? ` and ${game.stats.rushingTDs} score${game.stats.rushingTDs > 1 ? 's' : ''}` : ''}. ` +
    `${writer.personality === 'analytical' ? `The yards-per-play average of ${(totalOffense / 65).toFixed(1)} ${totalOffense > 400 ? 'showcased offensive efficiency' : 'left room for improvement'}.` : `${totalOffense > 400 ? 'It was a thing of beauty to watch.' : 'The unit will need to be better moving forward.'}`}`
  );
  // 4. Defensive story (INTs, sacks, clutch plays)
  if (game.opponentStats) {
    const oppTotal = (game.opponentStats.passingYards || 0) + (game.opponentStats.rushingYards || 0);
    paragraphs.push(
      `Defensively, the ${team.mascot} ${oppTotal < 300 ? 'were outstanding' : oppTotal < 400 ? 'bent but didn\'t break' : 'struggled to contain'} ${game.opponent}'s attack. ` +
      `They ${game.stats.interceptions ? `came up with ${game.stats.interceptions} crucial interception${game.stats.interceptions > 1 ? 's' : ''}${game.stats.sacks ? ' and' : ''}` : ''}${game.stats.sacks ? ` registered ${game.stats.sacks} sack${game.stats.sacks > 1 ? 's' : ''}` : ''} ` +
      `while ${oppTotal < 300 ? 'suffocating' : 'allowing'} ${oppTotal} total yards. ` +
      `${won ? 'When the game was on the line, this unit rose to the occasion.' : 'The inability to get crucial stops proved costly.'}`
    );
  } else {
    paragraphs.push(
      `The defensive effort ${won ? 'proved to be the difference' : 'fell short when it mattered most'}. ` +
      `${game.stats.interceptions || game.stats.sacks ? `Despite forcing ${game.stats.interceptions || 0} turnover${(game.stats.interceptions || 0) > 1 ? 's' : ''} and recording ${game.stats.sacks || 0} sack${(game.stats.sacks || 0) > 1 ? 's' : ''}, ` : ''}` +
      `the unit ${won ? 'made the plays necessary to secure victory' : 'couldn\'t make the stops needed in crucial moments'}. ` +
      `${isClose ? 'In a game of inches, every play mattered.' : won ? 'It was a dominant performance.' : 'Adjustments are clearly needed.'}`
    );
  }
  // 5. Coach/player quotes (fictional but themed)
  if (writer.personality === 'veteran' || writer.personality === 'balanced') {
    paragraphs.push(
      `"${won ? 'I\'m proud of how our guys fought today' : 'We didn\'t execute when it mattered'}," the head coach said in the post-game press conference. ` +
      `"${won && isClose ? 'Character wins like this define seasons' : won && isBlowout ? 'This is the standard we expect' : !won && isClose ? 'Credit to them, they made one more play than we did' : 'We\'ve got to look in the mirror and get better'}." ` +
      `${won ? 'Players echoed their coach\'s sentiment' : 'The locker room was subdued'}, with ${won ? 'team leaders emphasizing the importance of staying humble and hungry' : 'veterans taking responsibility for the defeat'}.`
    );
  }
  // 6. Season context (rank, record, rivalries)
  paragraphs.push(
    `This ${won ? 'victory' : 'defeat'} ${won ? 'improves' : 'drops'} the ${team.mascot} to ${game.week > 1 ? 'an overall record that' : 'a start that'} ` +
    `${won ? 'keeps them in the hunt' : 'puts added pressure on upcoming games'}. ` +
    `${game.conferenceGame ? `In conference play, every game carries massive implications, and this result ${won ? 'strengthens their position' : 'complicates the path forward'}.` : ''}` +
    `${game.rivalry ? ` For a rivalry game of this magnitude, the ${won ? 'bragging rights alone make this victory sweet' : 'sting of defeat will linger until next year\'s meeting'}.` : ''}` +
    `${game.playoffGame ? ` With playoff implications on the line, this ${won ? 'win keeps championship dreams alive' : 'loss deals a devastating blow to postseason hopes'}.` : ''}`
  );
  
  // 7. Next game preview or implications  
  paragraphs.push(
    `Looking ahead, the ${team.mascot} ${won ? 'will look to build on this momentum' : 'must quickly turn the page'} as they prepare for their next challenge. ` +
    `The schedule doesn't get any easier, and ${won ? 'maintaining this level of play' : 'addressing the issues exposed today'} will be crucial. ` +
    `${writer.personality === 'critical' ? 'Questions remain about this team\'s ceiling' : writer.personality === 'enthusiastic' ? 'The potential for something special is there' : 'Time will tell how this team responds'}, ` +
    `but one thing is certain: in college football, every week brings new opportunities and new challenges.`
  );
  
  // 8. Final wrap-up tone (hype, doubt, momentum)
  if (won && writer.personality === 'enthusiastic') {
    paragraphs.push(
      `${catchphrase}! The ${team.mascot} are rolling, and the energy around this program is palpable. ` +
      `${isClose ? 'Games like this build championship character' : 'Dominant performances like this send a message'}. ` +
      `The faithful are believing, the team is buying in, and the best may be yet to come. ${team.mascot} nation, enjoy this one!`
    );
  } else if (!won && writer.personality === 'critical') {
    paragraphs.push(
      `${catchphrase}. Another week, another disappointment. The ${team.mascot} faithful deserve better than what they witnessed today. ` +
      `Until fundamental changes are made, expect more of the same. The talent is there, but talent without execution is just potential ‚Äì and potential doesn't win football games.`
    );
  } else {
    paragraphs.push(
      `As the ${team.mascot} ${won ? 'celebrate' : 'regroup from'} this week ${game.week} ${won ? 'triumph' : 'setback'}, ` +
      `the bigger picture remains in focus. The season is far from over, and how this team responds in the coming weeks will define their legacy. ` +
      `For now, the ${team.mascot} ${won ? 'can savor this victory' : 'must learn from this defeat'} while keeping their eyes on the ultimate prize. ` +
      `In college football, it's not how you start ‚Äì it's how you finish.`
    );
  }
  
  return paragraphs.filter(p => p).join('\n\n');
}

function generateRecruitingArticle(recruit: Recruit, team: Team, writer: NewsWriter): string {
  const catchphrase = writer.catchphrases[Math.floor(Math.random() * writer.catchphrases.length)];
  
  if (writer.personality === 'enthusiastic') {
    return `${catchphrase}! The ${team.name} coaching staff has landed an absolute STUD in ${recruit.stars}-star ${recruit.position} ${recruit.name} from ${recruit.state}!\n\n` +
      `This is HUGE for the program! ${recruit.name} is exactly the type of playmaker that can take this team to the next level. ${team.mascot} fans should be pumped!\n\n` +
      `The momentum on the recruiting trail is real, folks. This staff is building something special!`;
  }
  
  return `The ${team.name} coaching staff has landed a major commitment from ${recruit.stars}-star ${recruit.position} ${recruit.name} out of ${recruit.state}.\n\n` +
    `"We're thrilled to add ${recruit.name} to our ${team.mascot} family," said the coaching staff. "His talent and character are exactly what we're looking for."\n\n` +
    `This commitment continues the strong recruiting momentum for ${team.name} as they build toward the future.`;
}

function generateSeasonOutlook(season: Season, team: Team, writer: NewsWriter): string {
  const catchphrase = writer.catchphrases[Math.floor(Math.random() * writer.catchphrases.length)];
  
  if (writer.personality === 'data-driven') {
    return `${catchphrase}, the ${team.mascot} sit at ${season.overallRecord.wins}-${season.overallRecord.losses} with a 73.2% win percentage.\n\n` +
      `Conference performance (${season.conferenceRecord.wins}-${season.conferenceRecord.losses}) projects to a ${season.conferenceRecord.wins >= 5 ? '78% probability of conference title contention' : '42% chance of bowl eligibility improvement'}.\n\n` +
      `${season.ranking ? `Current ranking (#${season.ranking}) combined with strength of schedule metrics suggests a 31% probability of New Year\'s Six bowl selection.` : `Despite being unranked, computer models show a 67% chance of receiving votes in the next poll.`}`;
  }
  
  return `At ${season.overallRecord.wins}-${season.overallRecord.losses}, the ${team.mascot} are having a season to remember.\n\n` +
    `With a conference record of ${season.conferenceRecord.wins}-${season.conferenceRecord.losses}, the team ${season.conferenceRecord.wins >= 5 ? 'is in the hunt for a conference title' : 'has shown they can compete with anyone'}.\n\n` +
    `${season.ranking ? `Currently ranked #${season.ranking}, the ${team.mascot} have put themselves in position for a major bowl game.` : `While not ranked yet, this team has shown they belong among the nation's best.`}`;
}

// Type definitions
export interface NewsWriter {
  id: string;
  name: string;
  title: string;
  personality: 'veteran' | 'enthusiastic' | 'critical' | 'balanced' | 'data-driven';
  writingStyle: 'analytical' | 'conversational' | 'direct' | 'descriptive' | 'technical';
  bias: 'optimistic' | 'realistic' | 'skeptical' | 'neutral' | 'analytical';
  yearsExperience: number;
  avatar: string;
  specialties: string[];
  catchphrases: string[];
}

export interface ArticleComment {
  id: string;
  articleId: string;
  author: string;
  archetype?: string;
  content: string;
  timestamp: string;
  likes: number;
  isUserComment?: boolean;
  isAuthorComment?: boolean;
  parentId?: string;
  replies?: ArticleComment[];
  depth?: number;
}

export interface NewsArticle {
  id: string;
  headline: string;
  subheadline: string;
  content: string;
  date: string;
  type: 'game-recap' | 'recruiting' | 'analysis' | 'opinion';
  author: string;
  authorTitle?: string;
  imagePrompt?: string;
  imageUrl?: string;
  comments?: ArticleComment[];
}

export interface ForumPost {
  id: string;
  title: string;
  author: string;
  content: string;
  replies: number;
  views: number;
  lastActivity: string;
  category: 'game-thread' | 'recruiting' | 'general' | 'coaching' | 'off-topic';
  isPinned?: boolean;
}
</file>

<file path="src/utils/aiContextDetection.ts">
import type { Game, Team, Season } from '../types/index';
import { useAISettingsStore } from '../stores/aiSettingsStore';

export interface AIContentContext {
  isUserTeam: boolean;
  isRival: boolean;
  isUpcomingOpponent: boolean;
  isRecentOpponent: boolean;
  isRanked: boolean;
  isConferenceTeam: boolean;
  isPlayoffContender: boolean;
  weeksUntilGame?: number;
}

export function getTeamAIContext(
  team: Team,
  userTeamId: string | null,
  games: Game[],
  currentSeason: Season | null,
  allTeams: Team[]
): AIContentContext {
  const context: AIContentContext = {
    isUserTeam: team.id === userTeamId,
    isRival: team.isRival || false,
    isUpcomingOpponent: false,
    isRecentOpponent: false,
    isRanked: false,
    isConferenceTeam: false,
    isPlayoffContender: false,
  };

  if (!userTeamId || !currentSeason) return context;

  const userTeam = allTeams.find(t => t.id === userTeamId);
  if (!userTeam) return context;

  // Check if team is in same conference
  context.isConferenceTeam = team.conference === userTeam.conference;

  // Check if team is an upcoming opponent
  const today = new Date();
  const upcomingGames = games
    .filter(g => new Date(g.date) > today)
    .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());

  const nextGameVsTeam = upcomingGames.find(g => g.opponent === team.name);
  if (nextGameVsTeam) {
    context.isUpcomingOpponent = true;
    const weeksUntil = Math.ceil(
      (new Date(nextGameVsTeam.date).getTime() - today.getTime()) / 
      (1000 * 60 * 60 * 24 * 7)
    );
    context.weeksUntilGame = weeksUntil;
  }

  // Check if team was a recent opponent
  const recentGames = games
    .filter(g => new Date(g.date) <= today)
    .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
    .slice(0, 3);

  context.isRecentOpponent = recentGames.some(g => g.opponent === team.name);

  // Check if team is ranked (would need to be stored in team data or season data)
  // For now, we'll use a simple heuristic
  if (currentSeason.ranking && currentSeason.ranking <= 25) {
    context.isRanked = true;
  }

  // Check if team is a playoff contender
  const winPercentage = currentSeason.overallRecord.wins / 
    (currentSeason.overallRecord.wins + currentSeason.overallRecord.losses);
  
  if (winPercentage >= 0.75 && currentSeason.overallRecord.wins >= 6) {
    context.isPlayoffContender = true;
  }

  return context;
}

export function shouldGenerateContent(
  team: Team,
  context: AIContentContext,
  userTeamId: string | null,
  aiSettings: ReturnType<typeof useAISettingsStore.getState>
): boolean {
  return aiSettings.shouldGenerateContentForTeam(
    team.id,
    userTeamId,
    context.isRival,
    context.isUpcomingOpponent,
    context.isRanked
  );
}

export function getContentPriority(context: AIContentContext): number {
  let priority = 0;

  if (context.isUserTeam) return 100; // Highest priority
  if (context.isUpcomingOpponent && context.weeksUntilGame) {
    // Higher priority for games coming soon
    priority += 50 - (context.weeksUntilGame * 5);
  }
  if (context.isRival) priority += 30;
  if (context.isRecentOpponent) priority += 20;
  if (context.isRanked) priority += 15;
  if (context.isConferenceTeam) priority += 10;
  if (context.isPlayoffContender) priority += 25;

  return priority;
}

export function filterTeamsByAISettings(
  teams: Team[],
  userTeamId: string | null,
  games: Game[],
  currentSeason: Season | null
): Team[] {
  if (!userTeamId || !currentSeason) return [];

  const aiSettings = useAISettingsStore.getState();
  const teamsWithContext = teams.map(team => ({
    team,
    context: getTeamAIContext(team, userTeamId, games, currentSeason, teams),
  }));

  // Filter teams that should have content generated
  const filteredTeams = teamsWithContext
    .filter(({ team, context }) => shouldGenerateContent(team, context, userTeamId, aiSettings))
    .sort((a, b) => getContentPriority(b.context) - getContentPriority(a.context))
    .map(({ team }) => team);

  return filteredTeams;
}
</file>

<file path="src/utils/sampleDataGenerator.ts">
import type { Game, Player, Recruit, Season, Coach } from '../types/index';

// Generate sample games for testing
export function generateSampleGames(teamName: string): Game[] {
  const opponents = ['Georgia', 'Florida', 'LSU', 'Auburn', 'Tennessee', 'Texas A&M', 'Ole Miss', 'Mississippi State'];
  const games: Game[] = [];
  
  // Generate 8 games with varied results
  const gameData = [
    { opponent: 'Georgia', result: 'L', scoreFor: 17, scoreAgainst: 24, location: 'Away', week: 1 },
    { opponent: 'Florida', result: 'W', scoreFor: 35, scoreAgainst: 31, location: 'Home', week: 2 },
    { opponent: 'LSU', result: 'W', scoreFor: 42, scoreAgainst: 21, location: 'Home', week: 3 },
    { opponent: 'Auburn', result: 'L', scoreFor: 14, scoreAgainst: 17, location: 'Away', week: 4 },
    { opponent: 'Tennessee', result: 'W', scoreFor: 28, scoreAgainst: 24, location: 'Home', week: 5 },
    { opponent: 'Texas A&M', result: 'W', scoreFor: 31, scoreAgainst: 28, location: 'Away', week: 6 },
    { opponent: 'Ole Miss', result: 'L', scoreFor: 21, scoreAgainst: 38, location: 'Home', week: 7 },
    { opponent: 'Mississippi State', result: 'W', scoreFor: 45, scoreAgainst: 14, location: 'Away', week: 8 }
  ];
  
  gameData.forEach((data, index) => {
    const game: Game = {
      id: `game-${Date.now()}-${index}`,
      date: new Date(2024, 8 + Math.floor(index / 4), (index % 4) * 7 + 1).toISOString().split('T')[0],
      week: data.week,
      opponent: data.opponent,
      location: data.location as 'Home' | 'Away',
      result: data.result as 'W' | 'L',
      score: { for: data.scoreFor, against: data.scoreAgainst },
      rivalry: data.opponent === 'Auburn',
      conferenceGame: true,
      stats: {
        passingYards: Math.floor(Math.random() * 200) + 150,
        passingTDs: Math.floor(Math.random() * 3) + 1,
        rushingYards: Math.floor(Math.random() * 150) + 100,
        rushingTDs: Math.floor(Math.random() * 3),
        turnovers: Math.floor(Math.random() * 3),
        sacks: Math.floor(Math.random() * 4),
        interceptions: Math.floor(Math.random() * 2)
      },
      opponentStats: {
        passingYards: Math.floor(Math.random() * 200) + 150,
        passingTDs: Math.floor(Math.random() * 3) + 1,
        rushingYards: Math.floor(Math.random() * 150) + 100,
        rushingTDs: Math.floor(Math.random() * 3),
        turnovers: Math.floor(Math.random() * 3)
      }
    };
    games.push(game);
  });
  
  return games;
}

// Generate sample players
export function generateSamplePlayers(): Player[] {
  return [
    {
      id: 'player-1',
      name: 'Jake Thompson',
      position: 'QB',
      class: 'JR',
      jerseyNumber: 7,
      hometown: 'Dallas, TX',
      overall: 88,
      depthPosition: 'QB1',
      statsBySeason: {
        '2024': {
          games: 8,
          passingYards: 2145,
          passingTDs: 18,
          interceptions: 6
        }
      },
      awards: ['SEC Offensive Player of the Week (Week 3)']
    },
    {
      id: 'player-2',
      name: 'Marcus Williams',
      position: 'RB',
      class: 'SO',
      jerseyNumber: 22,
      hometown: 'Atlanta, GA',
      overall: 85,
      depthPosition: 'RB1',
      statsBySeason: {
        '2024': {
          games: 8,
          rushingYards: 856,
          rushingTDs: 9,
          receivingYards: 234,
          receivingTDs: 2
        }
      }
    },
    {
      id: 'player-3',
      name: 'Chris Johnson',
      position: 'WR',
      class: 'SR',
      jerseyNumber: 81,
      hometown: 'Miami, FL',
      overall: 87,
      depthPosition: 'WR1',
      statsBySeason: {
        '2024': {
          games: 8,
          receptions: 45,
          receivingYards: 678,
          receivingTDs: 6
        }
      },
      awards: ['All-SEC Second Team (2023)']
    },
    {
      id: 'player-4',
      name: 'David Miller',
      position: 'LB',
      class: 'JR',
      jerseyNumber: 44,
      hometown: 'Houston, TX',
      overall: 86,
      depthPosition: 'MLB1',
      statsBySeason: {
        '2024': {
          games: 8,
          tackles: 67,
          sacks: 4.5,
          interceptions: 1
        }
      }
    }
  ];
}

// Generate sample recruits
export function generateSampleRecruits(): Recruit[] {
  return [
    {
      id: 'recruit-1',
      name: 'Darius Jackson',
      stars: 5,
      position: 'QB',
      state: 'TX',
      hometown: 'Houston',
      status: 'Committed',
      signedYear: 2025,
      otherOffers: ['Texas', 'Oklahoma', 'LSU', 'Ohio State']
    },
    {
      id: 'recruit-2',
      name: 'Anthony Davis',
      stars: 4,
      position: 'WR',
      state: 'FL',
      hometown: 'Tampa',
      status: 'Committed',
      signedYear: 2025,
      otherOffers: ['Florida', 'Florida State', 'Miami']
    },
    {
      id: 'recruit-3',
      name: 'Michael Thompson',
      stars: 4,
      position: 'LB',
      state: 'GA',
      hometown: 'Atlanta',
      status: 'Interested',
      signedYear: 2025,
      otherOffers: ['Georgia', 'Alabama', 'Clemson', 'Auburn']
    },
    {
      id: 'recruit-4',
      name: 'James Wilson',
      stars: 3,
      position: 'OL',
      state: 'AL',
      hometown: 'Birmingham',
      status: 'Committed',
      signedYear: 2025,
      otherOffers: ['Auburn', 'Tennessee']
    }
  ];
}

// Generate sample season
export function generateSampleSeason(teamId: string, games: Game[]): Season {
  const wins = games.filter(g => g.result === 'W').length;
  const losses = games.filter(g => g.result === 'L').length;
  
  return {
    id: 'season-2024',
    year: 2024,
    teamName: teamId,
    conference: 'SEC',
    division: 'West',
    games: games.map(g => g.id),
    conferenceRecord: { wins: wins - 1, losses: losses },
    overallRecord: { wins, losses },
    ranking: wins >= 6 ? 15 : undefined,
    coachId: 'coach-main',
    preseasonGoals: ['Win 9+ games', 'Beat Auburn', 'Win bowl game'],
    seasonSummary: 'Season in progress...'
  };
}

// Generate sample coach
export function generateSampleCoach(): Coach {
  return {
    id: 'coach-main',
    coachName: 'Mike Stevens',
    name: 'Mike Stevens',
    startYear: 2022,
    record: '18-12',
    wins: 18,
    losses: 12,
    championships: 0,
    style: 'Spread',
    hotSeat: false
  };
}
</file>

<file path="src/utils/teamTheme.ts">
import type { Team } from '../types/index';

// Apply team-specific CSS variables for dynamic theming
export function applyTeamTheme(team: Team | null) {
  if (!team) {
    // Reset to default theme
    document.documentElement.style.removeProperty('--team-primary');
    document.documentElement.style.removeProperty('--team-secondary');
    document.documentElement.style.removeProperty('--team-primary-rgb');
    document.documentElement.style.removeProperty('--team-secondary-rgb');
    return;
  }

  // Convert hex to RGB for opacity support
  const hexToRgb = (hex: string): string => {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    if (!result) return '0, 0, 0';
    return `${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(result[3], 16)}`;
  };

  // Set CSS variables
  document.documentElement.style.setProperty('--team-primary', team.primaryColor);
  document.documentElement.style.setProperty('--team-secondary', team.secondaryColor);
  document.documentElement.style.setProperty('--team-primary-rgb', hexToRgb(team.primaryColor));
  document.documentElement.style.setProperty('--team-secondary-rgb', hexToRgb(team.secondaryColor));

  // Add team-specific class for additional styling
  document.body.className = `team-${team.id}`;
}

// Get contrast color for text on team color backgrounds
export function getContrastColor(hexColor: string): string {
  // Convert hex to RGB
  const r = parseInt(hexColor.slice(1, 3), 16);
  const g = parseInt(hexColor.slice(3, 5), 16);
  const b = parseInt(hexColor.slice(5, 7), 16);

  // Calculate luminance
  const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;

  // Return white for dark colors, black for light colors
  return luminance > 0.5 ? '#000000' : '#FFFFFF';
}

// Generate team-specific gradient
export function getTeamGradient(team: Team, direction: 'to-r' | 'to-b' = 'to-r'): string {
  return `linear-gradient(${direction === 'to-r' ? 'to right' : 'to bottom'}, ${team.primaryColor}, ${team.secondaryColor})`;
}

// Team-specific component classes
export const teamClasses = {
  header: 'bg-gradient-to-r from-[var(--team-primary)] to-[var(--team-secondary)]',
  headerText: 'text-white drop-shadow-md',
  primaryBg: 'bg-[var(--team-primary)]',
  secondaryBg: 'bg-[var(--team-secondary)]',
  primaryText: 'text-[var(--team-primary)]',
  secondaryText: 'text-[var(--team-secondary)]',
  primaryBorder: 'border-[var(--team-primary)]',
  secondaryBorder: 'border-[var(--team-secondary)]',
  primaryButton: 'bg-[var(--team-primary)] hover:bg-[var(--team-primary)]/90 text-white',
  secondaryButton: 'bg-[var(--team-secondary)] hover:bg-[var(--team-secondary)]/90',
  primaryBadge: 'bg-[var(--team-primary)]/10 text-[var(--team-primary)] border border-[var(--team-primary)]/20',
  secondaryBadge: 'bg-[var(--team-secondary)]/10 text-[var(--team-secondary)] border border-[var(--team-secondary)]/20',
  gradientBg: 'bg-gradient-to-br from-[var(--team-primary)] to-[var(--team-secondary)]',
  gradientText: 'bg-gradient-to-r from-[var(--team-primary)] to-[var(--team-secondary)] bg-clip-text text-transparent',
  hoverPrimary: 'hover:bg-[var(--team-primary)]/10 hover:border-[var(--team-primary)]',
  hoverSecondary: 'hover:bg-[var(--team-secondary)]/10 hover:border-[var(--team-secondary)]',
  focusPrimary: 'focus:ring-[var(--team-primary)] focus:border-[var(--team-primary)]',
  focusSecondary: 'focus:ring-[var(--team-secondary)] focus:border-[var(--team-secondary)]',
};

// Get team-appropriate accent color (for highlights, badges, etc)
export function getTeamAccentColor(team: Team): string {
  // Some teams have specific accent colors based on their identity
  const accentOverrides: Record<string, string> = {
    'michigan': '#FFCB05', // Maize
    'oregon': '#FEE123', // Yellow
    'lsu': '#FDD023', // Gold
    'notre-dame': '#C99700', // Gold
    'florida': '#FA4616', // Orange
    'tennessee': '#FF8200', // Orange
    'texas': '#BF5700', // Burnt Orange
  };

  return accentOverrides[team.id] || team.secondaryColor;
}
</file>

<file path="src/App.tsx">
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { Layout } from './components/Layout';
import { SeasonDashboard } from './components/SeasonDashboard';
import { Schedule } from './components/Schedule';
import { GameList } from './components/GameList';
import { PlayerManager } from './components/PlayerManager';
import { CoachRoom } from './components/CoachRoom';
import { TeamList } from './components/TeamList';
import { RecruitTracker } from './components/RecruitTracker';
import { Timeline } from './components/Timeline';
import { NewsHub } from './components/NewsHub';
import { FanForum } from './components/FanForum';
import { AISettings } from './components/AISettings';
import { useEffect } from 'react';
import { useTeamStore } from './stores/teamStore';
import { useSeasonStore } from './stores/seasonStore';
import { usePlayerStore } from './stores/playerStore';
import { useGameStore } from './stores/gameStore';
import { useCoachStore } from './stores/coachStore';
import { useRecruitStore } from './stores/recruitStore';
import { dummyTeams, dummySeason, dummyPlayers, dummyGames, dummyCoach, dummyRecruits } from './data/dummyData';
import { applyTeamTheme } from './utils/teamTheme';

function App() {
  // Initialize stores with dummy data on first load
  useEffect(() => {
    const teamStore = useTeamStore.getState();
    const seasonStore = useSeasonStore.getState();
    const playerStore = usePlayerStore.getState();
    const gameStore = useGameStore.getState();
    const coachStore = useCoachStore.getState();
    const recruitStore = useRecruitStore.getState();

    // Check if we have old dummy teams and clear them
    const hasOldTeams = teamStore.teams.some(team => 
      team.id === 'team-1' || 
      team.id === 'team-2' || 
      team.id === 'team-3' ||
      team.id === 'team-4' ||
      team.id === 'team-5'
    );
    
    // Clear and reinitialize if we have old teams or no teams
    if (teamStore.teams.length === 0 || hasOldTeams) {
      // Clear all teams first if we have old data
      if (hasOldTeams) {
        localStorage.removeItem('cfb-team-storage');
        window.location.reload(); // Force a reload to clear the state
      } else {
        // Add new teams
        dummyTeams.forEach(team => teamStore.addTeam(team));
        teamStore.setUserTeam('kansas-state');
      }
    }

    if (seasonStore.seasons.length === 0) {
      seasonStore.addSeason(dummySeason);
    }

    if (playerStore.players.length === 0) {
      dummyPlayers.forEach(player => playerStore.addPlayer(player));
    }

    if (gameStore.games.length === 0) {
      dummyGames.forEach(game => gameStore.addGame(game));
    }

    if (coachStore.coaches.length === 0) {
      coachStore.addCoach(dummyCoach);
    }

    if (recruitStore.recruits.length === 0) {
      dummyRecruits.forEach(recruit => recruitStore.addRecruit(recruit));
    }
  }, []);

  // Apply team theme when user team changes
  const userTeam = useTeamStore(state => state.getUserTeam());
  useEffect(() => {
    applyTeamTheme(userTeam);
  }, [userTeam]);

  return (
    <Router>
      <Layout>
        <Routes>
          <Route path="/" element={<SeasonDashboard />} />
          <Route path="/news" element={<NewsHub />} />
          <Route path="/forum" element={<FanForum />} />
          <Route path="/schedule" element={<Schedule />} />
          <Route path="/games" element={<GameList />} />
          <Route path="/players" element={<PlayerManager />} />
          <Route path="/coaches" element={<CoachRoom />} />
          <Route path="/teams" element={<TeamList />} />
          <Route path="/recruits" element={<RecruitTracker />} />
          <Route path="/timeline" element={<Timeline />} />
          <Route path="/ai-settings" element={<AISettings />} />
        </Routes>
      </Layout>
    </Router>
  );
}

export default App;
</file>

<file path="src/index.css">
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');
@import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500;600;700&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 248 250 252; /* slate-50 */
    --foreground: 15 23 42; /* slate-900 */
    
    /* Team color CSS variables - dynamically set */
    --team-primary: theme('colors.primary.600');
    --team-secondary: theme('colors.secondary.600');
    --team-primary-rgb: 99, 102, 241;
    --team-secondary-rgb: 75, 85, 99;
  }


  body {
    @apply bg-slate-50 text-slate-900 font-sans antialiased;
  }

  h1, h2, h3, h4, h5, h6 {
    @apply font-semibold tracking-tight;
  }

  h1 {
    @apply text-4xl;
  }

  h2 {
    @apply text-3xl;
  }

  h3 {
    @apply text-2xl;
  }

  h4 {
    @apply text-xl;
  }

  h5 {
    @apply text-lg;
  }
}

@layer components {
  .btn {
    @apply inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary-500 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50;
  }

  .btn-primary {
    @apply btn bg-primary-600 text-white hover:bg-primary-700 active:bg-primary-800;
  }

  .btn-secondary {
    @apply btn bg-secondary-100 text-secondary-900 hover:bg-secondary-200 active:bg-secondary-300;
  }

  .btn-ghost {
    @apply btn hover:bg-secondary-100 hover:text-secondary-900;
  }

  .btn-sm {
    @apply h-9 px-3;
  }

  .btn-md {
    @apply h-10 px-4 py-2;
  }

  .btn-lg {
    @apply h-11 px-8;
  }

  .card {
    @apply bg-white rounded-lg border border-secondary-200 shadow-sm;
  }

  .card-hover {
    @apply card transition-shadow hover:shadow-md;
  }

  .input {
    @apply flex h-10 w-full rounded-md border border-secondary-300 bg-white px-3 py-2 text-sm placeholder:text-secondary-400 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent disabled:cursor-not-allowed disabled:opacity-50;
  }

  select.input {
    @apply appearance-none bg-no-repeat bg-[length:16px] bg-[center_right_0.75rem] pr-10 cursor-pointer;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%236b7280' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
  }
  
  select.input:focus {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%231e40af' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
  }

  .label {
    @apply text-sm font-medium text-secondary-700;
  }

  .badge {
    @apply inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-semibold transition-colors;
  }

  .badge-primary {
    @apply badge bg-primary-100 text-primary-800;
  }

  .badge-success {
    @apply badge bg-green-100 text-green-800;
  }

  .badge-error {
    @apply badge bg-red-100 text-red-800;
  }

  .badge-warning {
    @apply badge bg-amber-100 text-amber-800;
  }
  
  .badge-secondary {
    @apply badge bg-secondary-100 text-secondary-800;
  }
  
  .badge-accent {
    @apply badge bg-accent-100 text-accent-800;
  }
  
  /* Team color badges */
  .badge-team-primary {
    background-color: rgba(var(--team-primary-rgb), 0.1);
    color: var(--team-primary);
    border: 1px solid rgba(var(--team-primary-rgb), 0.2);
  }
  
  .badge-team-secondary {
    background-color: rgba(var(--team-secondary-rgb), 0.1);
    color: var(--team-secondary);
    border: 1px solid rgba(var(--team-secondary-rgb), 0.2);
  }
  
  .badge-team-solid {
    background-color: var(--team-primary);
    color: white;
  }

  .stat-value {
    @apply font-mono text-2xl font-semibold text-primary-800;
  }

  .stat-label {
    @apply text-sm text-secondary-600;
  }

  .modal-overlay {
    @apply fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50;
  }

  .modal-content {
    @apply bg-white rounded-lg p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto relative;
  }
  
  .modal-content select {
    @apply relative z-10;
  }
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }

  .animate-in {
    animation: fadeIn 0.5s ease-in-out;
  }

  .gradient-primary {
    @apply bg-gradient-to-r from-primary-600 to-primary-700;
  }

  .gradient-accent {
    @apply bg-gradient-to-r from-accent-500 to-accent-600;
  }

  .text-gradient {
    @apply bg-clip-text text-transparent;
  }
}
</file>

<file path="src/main.tsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
</file>

<file path="src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path=".env.example">
# OpenAI API Configuration
VITE_OPENAI_API_KEY=your_openai_api_key_here

# Optional: API endpoint for fetching keys (if using external service)
VITE_API_ENDPOINT=http://localhost:5555

# Optional: Other API keys
# VITE_SOME_OTHER_KEY=your_key_here
</file>

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# API Keys and secrets
**/apiKeys.ts
**/secrets.ts
*.key
*.pem

# Local storage backups
*.backup
*.cache

# OS files
.DS_Store
Thumbs.db

# Temporary files
*.tmp
*.temp
</file>

<file path="eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'
import { globalIgnores } from 'eslint/config'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      js.configs.recommended,
      tseslint.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
  },
])
</file>

<file path="index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="package.json">
{
  "name": "dynastylab",
  "private": true,
  "version": "1.0.0",
  "description": "AI-powered college football dynasty tracker with dynamic content generation",
  "author": "Your Name",
  "license": "MIT",
  "keywords": ["college-football", "cfb", "dynasty", "sports", "react", "typescript", "ai"],
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "openai": "^5.11.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-router-dom": "^7.7.1",
    "zustand": "^5.0.7"
  },
  "devDependencies": {
    "@eslint/js": "^9.30.1",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "@vitejs/plugin-react": "^4.6.0",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.30.1",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.3.0",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.4.17",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.35.1",
    "vite": "^7.0.4"
  }
}
</file>

<file path="postcss.config.js">
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="README.md">
# DynastyLab

AI-powered college football dynasty tracker with dynamic content generation. Track your CFB 25 dynasty progress with intelligent commentary, dynamic news articles, and vibrant fan forums.

\![React](https://img.shields.io/badge/React-18.3-blue)
\![TypeScript](https://img.shields.io/badge/TypeScript-5.6-blue)
\![Vite](https://img.shields.io/badge/Vite-6.0-purple)
\![TailwindCSS](https://img.shields.io/badge/TailwindCSS-3.4-teal)
\![License](https://img.shields.io/badge/License-MIT-green)

## Features

### üèà Dynasty Management
- **Season Tracking**: Monitor your progress through multiple seasons
- **Game Management**: Record game results, stats, and milestones
- **Player Tracking**: Manage rosters, depth charts, and player development
- **Recruiting**: Track recruiting classes and commitments
- **Coach Management**: Monitor coaching records and hot seat status

### ü§ñ AI-Powered Content
- **Dynamic News Articles**: AI-generated articles based on your dynasty events
- **Smart Forums**: Team-specific fan forums with AI-generated discussions
- **Writer Personalities**: Multiple AI writers with distinct styles and biases
- **Opponent Scouting**: Automated preview content for upcoming games

### üé® Immersive Experience
- **Team Theming**: Dynamic UI that adopts your team's colors
- **134 Team Forums**: Unique forum for every FBS team
- **Nested Comments**: Engage with AI fans in realistic discussions
- **News Ticker**: Breaking news updates based on your dynasty

### ‚öôÔ∏è Smart Features
- **AI Content Settings**: Control which teams get AI-generated content
- **Cost-Efficient**: Only generate content for teams you care about
- **Context-Aware**: Automatically enables content for upcoming opponents
- **Data Persistence**: All data saved locally in browser storage

## Getting Started

### Prerequisites
- Node.js 18+ 
- npm or yarn
- OpenAI API key (for AI features)

### Installation

1. Clone the repository:
```bash
git clone https://github.com/yourusername/dynastylab.git
cd dynastylab
```

2. Install dependencies:
```bash
npm install
```

3. Create a `.env` file in the root directory:
```bash
cp .env.example .env
```

4. Add your OpenAI API key to `.env`:
```
VITE_OPENAI_API_KEY=your_openai_api_key_here
```

5. Start the development server:
```bash
npm run dev
```

6. Open http://localhost:5173 in your browser

## Usage

### Initial Setup
1. Select your team from the Teams page
2. Create a new season or load existing data
3. Configure AI settings to control content generation

### Managing Your Dynasty
- **Games**: Add game results with detailed stats
- **Players**: Track player development and manage depth charts
- **Recruiting**: Monitor and sign recruiting classes
- **News**: Read AI-generated articles about your dynasty
- **Forums**: Engage with AI fans in team-specific forums

### AI Content Settings
Control API costs by choosing which teams generate AI content:
- Your team always has full AI features
- Enable rivals for year-round content
- Auto-enable opponents during game week
- Manual overrides for any team

## Tech Stack

- **Frontend**: React 18 + TypeScript
- **Build Tool**: Vite
- **Styling**: TailwindCSS v3
- **State Management**: Zustand with persistence
- **AI Integration**: OpenAI GPT-3.5/4
- **Routing**: React Router v6
- **Icons**: Heroicons

## Project Structure

```
src/
‚îú‚îÄ‚îÄ components/      # React components
‚îú‚îÄ‚îÄ stores/         # Zustand state stores
‚îú‚îÄ‚îÄ types/          # TypeScript type definitions
‚îú‚îÄ‚îÄ utils/          # Utility functions
‚îú‚îÄ‚îÄ services/       # External service integrations
‚îú‚îÄ‚îÄ styles/         # CSS and styling
‚îî‚îÄ‚îÄ data/           # Static data and constants
```

## Configuration

### Environment Variables
- `VITE_OPENAI_API_KEY`: Your OpenAI API key (required for AI features)
- `VITE_API_ENDPOINT`: Optional API endpoint for key management

### AI Settings
Configure AI content generation in the AI Settings page:
- Core content (always on for your team)
- Extended coverage (rivals, conference, national)
- Smart features (auto-enable based on context)

## Contributing

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## Roadmap

- [ ] OCR integration for screenshot data extraction
- [ ] Mobile responsive design
- [ ] Export dynasty data
- [ ] Historical statistics and trends
- [ ] Playoff bracket tracking
- [ ] Award tracking
- [ ] Multi-dynasty support
- [ ] Cloud backup options

## License

This project is licensed under the MIT License - see the LICENSE file for details.

## Acknowledgments

- Built for the CFB 25 gaming community
- Inspired by dynasty mode in EA Sports College Football
- Forum names inspired by popular CFB community sites
- AI content powered by OpenAI

## Disclaimer

This is an unofficial companion app and is not affiliated with EA Sports or the NCAA. All team names and marks are property of their respective institutions.

---

**Note**: Remember to keep your API keys secure and never commit them to version control\!
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#eff6ff',
          100: '#dbeafe',
          200: '#bfdbfe',
          300: '#93bbfd',
          400: '#60a5fa',
          500: '#3b82f6',
          600: '#2563eb',
          700: '#1d4ed8',
          800: '#1e40af',
          900: '#1e3a8a',
          950: '#172554',
        },
        secondary: {
          50: '#f8fafc',
          100: '#f1f5f9',
          200: '#e2e8f0',
          300: '#cbd5e1',
          400: '#94a3b8',
          500: '#64748b',
          600: '#475569',
          700: '#334155',
          800: '#1e293b',
          900: '#0f172a',
          950: '#020617',
        },
        accent: {
          50: '#ecfdf5',
          100: '#d1fae5',
          200: '#a7f3d0',
          300: '#6ee7b7',
          400: '#34d399',
          500: '#10b981',
          600: '#059669',
          700: '#047857',
          800: '#065f46',
          900: '#064e3b',
          950: '#022c22',
        },
      },
      fontFamily: {
        sans: ['Inter', 'system-ui', '-apple-system', 'sans-serif'],
        mono: ['JetBrains Mono', 'monospace'],
      },
      animation: {
        'fade-in': 'fadeIn 0.5s ease-in-out',
        'slide-up': 'slideUp 0.3s ease-out',
      },
      keyframes: {
        fadeIn: {
          '0%': { opacity: '0' },
          '100%': { opacity: '1' },
        },
        slideUp: {
          '0%': { transform: 'translateY(10px)', opacity: '0' },
          '100%': { transform: 'translateY(0)', opacity: '1' },
        },
      },
    },
  },
  plugins: [],
}
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2022",
    "useDefineForClassFields": true,
    "lib": ["ES2022", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2023",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="vite.config.ts">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})
</file>

</files>
